(this["webpackJsonp"] = this["webpackJsonp"] || []).push([["app-service"],[
/* 0 */
/*!************************************************!*\
  !*** C:/Users/W/Desktop/remotecontrol/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ 1);\nvar _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ 2));\n__webpack_require__(/*! uni-pages */ 6);\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 27));\nvar _App = _interopRequireDefault(__webpack_require__(/*! ./App */ 30));\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n_vue.default.config.productionTip = false;\n_App.default.mpType = 'app';\nvar app = new _vue.default(_objectSpread({}, _App.default));\napp.$mount();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbWFpbi5qcyJdLCJuYW1lcyI6WyJWdWUiLCJjb25maWciLCJwcm9kdWN0aW9uVGlwIiwiQXBwIiwibXBUeXBlIiwiYXBwIiwiJG1vdW50Il0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFBbUI7QUFDbkI7QUFBdUI7QUFBQTtBQUV2QkEsWUFBRyxDQUFDQyxNQUFNLENBQUNDLGFBQWEsR0FBRyxLQUFLO0FBRWhDQyxZQUFHLENBQUNDLE1BQU0sR0FBRyxLQUFLO0FBRWxCLElBQU1DLEdBQUcsR0FBRyxJQUFJTCxZQUFHLG1CQUNaRyxZQUFHLEVBQ1I7QUFDRkUsR0FBRyxDQUFDQyxNQUFNLEVBQUUiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAndW5pLXBhZ2VzJztpbXBvcnQgVnVlIGZyb20gJ3Z1ZSdcclxuaW1wb3J0IEFwcCBmcm9tICcuL0FwcCdcclxuXHJcblZ1ZS5jb25maWcucHJvZHVjdGlvblRpcCA9IGZhbHNlXHJcblxyXG5BcHAubXBUeXBlID0gJ2FwcCdcclxuXHJcbmNvbnN0IGFwcCA9IG5ldyBWdWUoe1xyXG4gICAgLi4uQXBwXHJcbn0pXHJcbmFwcC4kbW91bnQoKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/interopRequireDefault.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),
/* 2 */
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/defineProperty.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toPropertyKey = __webpack_require__(/*! ./toPropertyKey.js */ 3);
function _defineProperty(obj, key, value) {
  key = toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),
/* 3 */
/*!**************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/toPropertyKey.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = __webpack_require__(/*! ./typeof.js */ 4)["default"];
var toPrimitive = __webpack_require__(/*! ./toPrimitive.js */ 5);
function _toPropertyKey(arg) {
  var key = toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
module.exports = _toPropertyKey, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),
/* 4 */
/*!*******************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/typeof.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) {
  "@babel/helpers - typeof";

  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
}
module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),
/* 5 */
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/toPrimitive.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = __webpack_require__(/*! ./typeof.js */ 4)["default"];
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
module.exports = _toPrimitive, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),
/* 6 */
/*!***************************************************!*\
  !*** C:/Users/W/Desktop/remotecontrol/pages.json ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

if (typeof Promise !== 'undefined' && !Promise.prototype.finally) {
  Promise.prototype.finally = function (callback) {
    var promise = this.constructor;
    return this.then(function (value) {
      return promise.resolve(callback()).then(function () {
        return value;
      });
    }, function (reason) {
      return promise.resolve(callback()).then(function () {
        throw reason;
      });
    });
  };
}
if (typeof uni !== 'undefined' && uni && uni.requireGlobal) {
  var global = uni.requireGlobal();
  ArrayBuffer = global.ArrayBuffer;
  Int8Array = global.Int8Array;
  Uint8Array = global.Uint8Array;
  Uint8ClampedArray = global.Uint8ClampedArray;
  Int16Array = global.Int16Array;
  Uint16Array = global.Uint16Array;
  Int32Array = global.Int32Array;
  Uint32Array = global.Uint32Array;
  Float32Array = global.Float32Array;
  Float64Array = global.Float64Array;
  BigInt64Array = global.BigInt64Array;
  BigUint64Array = global.BigUint64Array;
}
if (uni.restoreGlobal) {
  uni.restoreGlobal(weex, plus, setTimeout, clearTimeout, setInterval, clearInterval);
}
__definePage('pages/index/index', function () {
  return Vue.extend(__webpack_require__(/*! pages/index/index.vue?mpType=page */ 7).default);
});
__definePage('pages/first/index', function () {
  return Vue.extend(__webpack_require__(/*! pages/first/index.vue?mpType=page */ 14).default);
});

/***/ }),
/* 7 */
/*!**************************************************************************!*\
  !*** C:/Users/W/Desktop/remotecontrol/pages/index/index.vue?mpType=page ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.vue?vue&type=template&id=2be84a3c&mpType=page */ 8);\n/* harmony import */ var _index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.vue?vue&type=script&lang=js&mpType=page */ 10);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_1__) if([\"default\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_1__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n/* harmony import */ var _E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js */ 13);\n\nvar renderjs\n\n\n\n\n/* normalize component */\n\nvar component = Object(_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n  _index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__[\"render\"],\n  _index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"],\n  false,\n  null,\n  null,\n  null,\n  false,\n  _index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__[\"components\"],\n  renderjs\n)\n\ncomponent.options.__file = \"pages/index/index.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBNkg7QUFDN0g7QUFDb0U7QUFDTDs7O0FBRy9EO0FBQytLO0FBQy9LLGdCQUFnQix3TEFBVTtBQUMxQixFQUFFLHNGQUFNO0FBQ1IsRUFBRSwyRkFBTTtBQUNSLEVBQUUsb0dBQWU7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsK0ZBQVU7QUFDWjtBQUNBOztBQUVBO0FBQ2UsZ0YiLCJmaWxlIjoiNy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zLCByZWN5Y2xhYmxlUmVuZGVyLCBjb21wb25lbnRzIH0gZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTJiZTg0YTNjJm1wVHlwZT1wYWdlXCJcbnZhciByZW5kZXJqc1xuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmbXBUeXBlPXBhZ2VcIlxuZXhwb3J0ICogZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJm1wVHlwZT1wYWdlXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIUU6XFxcXHNvZnR3YXJlXFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcdnVlLWxvYWRlclxcXFxsaWJcXFxccnVudGltZVxcXFxjb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgZmFsc2UsXG4gIGNvbXBvbmVudHMsXG4gIHJlbmRlcmpzXG4pXG5cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwicGFnZXMvaW5kZXgvaW5kZXgudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/*!********************************************************************************************************!*\
  !*** C:/Users/W/Desktop/remotecontrol/pages/index/index.vue?vue&type=template&id=2be84a3c&mpType=page ***!
  \********************************************************************************************************/
/*! exports provided: render, staticRenderFns, recyclableRender, components */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--10-0!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/filter-modules-template.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!./index.vue?vue&type=template&id=2be84a3c&mpType=page */ 9);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "recyclableRender", function() { return _E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__["recyclableRender"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "components", function() { return _E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__["components"]; });



/***/ }),
/* 9 */

  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--10-0!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/filter-modules-template.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!C:/Users/W/Desktop/remotecontrol/pages/index/index.vue?vue&type=template&id=2be84a3c&mpType=page ***!

/*! exports provided: render, staticRenderFns, recyclableRender, components */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "recyclableRender", function() { return recyclableRender; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "components", function() { return components; });
var components
var render = function () {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { staticClass: _vm._$s(0, "sc", "flex-center"), attrs: { _i: 0 } },
    [
      _c(
        "div",
        { staticClass: _vm._$s(1, "sc", "container"), attrs: { _i: 1 } },
        [
          _c(
            "div",
            { staticClass: _vm._$s(2, "sc", "flex-center"), attrs: { _i: 2 } },
            [
              _c(
                "div",
                {
                  staticClass: _vm._$s(3, "sc", "unit-1-2 unit-1-on-mobile"),
                  attrs: { _i: 3 },
                },
                [
                  _c("p"),
                  _vm._$s(5, "i", _vm.tips)
                    ? _c("div", [_vm._v(_vm._$s(5, "t0-0", _vm._s(_vm.tips)))])
                    : _vm._e(),
                  _c(
                    "div",
                    { staticClass: _vm._$s(6, "sc", "form"), attrs: { _i: 6 } },
                    [
                      _c("p", [
                        _c("input", {
                          directives: [
                            {
                              name: "model",
                              rawName: "v-model",
                              value: _vm.input_val[0],
                              expression: "input_val[0]",
                            },
                          ],
                          attrs: { _i: 8 },
                          domProps: {
                            value: _vm._$s(8, "v-model", _vm.input_val[0]),
                          },
                          on: {
                            input: function ($event) {
                              if ($event.target.composing) {
                                return
                              }
                              _vm.$set(_vm.input_val, 0, $event.target.value)
                            },
                          },
                        }),
                      ]),
                      _c("p", [
                        _c("input", {
                          directives: [
                            {
                              name: "model",
                              rawName: "v-model",
                              value: _vm.input_val[1],
                              expression: "input_val[1]",
                            },
                          ],
                          attrs: { _i: 10 },
                          domProps: {
                            value: _vm._$s(10, "v-model", _vm.input_val[1]),
                          },
                          on: {
                            input: function ($event) {
                              if ($event.target.composing) {
                                return
                              }
                              _vm.$set(_vm.input_val, 1, $event.target.value)
                            },
                          },
                        }),
                      ]),
                      _vm._$s(11, "i", _vm.mode == 2)
                        ? _c("div", [
                            _c("input", {
                              directives: [
                                {
                                  name: "model",
                                  rawName: "v-model",
                                  value: _vm.input_val[2],
                                  expression: "input_val[2]",
                                },
                              ],
                              attrs: { _i: 12 },
                              domProps: {
                                value: _vm._$s(12, "v-model", _vm.input_val[2]),
                              },
                              on: {
                                input: function ($event) {
                                  if ($event.target.composing) {
                                    return
                                  }
                                  _vm.$set(
                                    _vm.input_val,
                                    2,
                                    $event.target.value
                                  )
                                },
                              },
                            }),
                          ])
                        : _vm._e(),
                      _vm._$s(13, "i", _vm.mode == 1)
                        ? _c("div", [
                            _c("input", {
                              directives: [
                                {
                                  name: "model",
                                  rawName: "v-model",
                                  value: _vm.input_val[3],
                                  expression: "input_val[3]",
                                },
                              ],
                              attrs: { _i: 14 },
                              domProps: {
                                value: _vm._$s(14, "v-model", _vm.input_val[3]),
                              },
                              on: {
                                input: function ($event) {
                                  if ($event.target.composing) {
                                    return
                                  }
                                  _vm.$set(
                                    _vm.input_val,
                                    3,
                                    $event.target.value
                                  )
                                },
                              },
                            }),
                          ])
                        : _vm._e(),
                      _c("button", {
                        staticClass: _vm._$s(
                          15,
                          "sc",
                          "btn btn-primary btn-block"
                        ),
                        attrs: { _i: 15 },
                        on: { click: _vm.button1 },
                      }),
                    ]
                  ),
                  _c(
                    "div",
                    {
                      staticClass: _vm._$s(
                        16,
                        "sc",
                        "flex-left top-gap text-small"
                      ),
                      attrs: { _i: 16 },
                    },
                    [
                      _vm._$s(17, "i", _vm.mode == 0)
                        ? _c(
                            "div",
                            {
                              staticClass: _vm._$s(17, "sc", "unit-2-3"),
                              attrs: { _i: 17 },
                            },
                            [
                              _c("a", {
                                attrs: { _i: 18 },
                                on: {
                                  click: function ($event) {
                                    _vm.mode = 1
                                  },
                                },
                              }),
                            ]
                          )
                        : _vm._e(),
                      _vm._$s(19, "i", _vm.mode == 0)
                        ? _c(
                            "div",
                            {
                              staticClass: _vm._$s(
                                19,
                                "sc",
                                "unit-1-3 flex-right"
                              ),
                              attrs: { _i: 19 },
                            },
                            [
                              _c("a", {
                                attrs: { _i: 20 },
                                on: {
                                  click: function ($event) {
                                    _vm.mode = 2
                                  },
                                },
                              }),
                            ]
                          )
                        : _vm._e(),
                      _vm._$s(21, "i", _vm.mode == 1)
                        ? _c(
                            "div",
                            {
                              staticClass: _vm._$s(21, "sc", "unit-2-3"),
                              attrs: { _i: 21 },
                            },
                            [
                              _c("a", {
                                attrs: { _i: 22 },
                                on: {
                                  click: function ($event) {
                                    _vm.mode = 0
                                  },
                                },
                              }),
                            ]
                          )
                        : _vm._e(),
                      _vm._$s(23, "i", _vm.mode == 1)
                        ? _c(
                            "div",
                            {
                              staticClass: _vm._$s(
                                23,
                                "sc",
                                "unit-1-3 flex-right"
                              ),
                              attrs: { _i: 23 },
                            },
                            [
                              _c("a", {
                                attrs: { _i: 24 },
                                on: {
                                  click: function ($event) {
                                    _vm.mode = 2
                                  },
                                },
                              }),
                            ]
                          )
                        : _vm._e(),
                      _vm._$s(25, "i", _vm.mode == 2)
                        ? _c(
                            "div",
                            {
                              staticClass: _vm._$s(25, "sc", "unit-2-3"),
                              attrs: { _i: 25 },
                            },
                            [
                              _c("a", {
                                attrs: { _i: 26 },
                                on: {
                                  click: function ($event) {
                                    _vm.mode = 1
                                  },
                                },
                              }),
                            ]
                          )
                        : _vm._e(),
                      _vm._$s(27, "i", _vm.mode == 2)
                        ? _c(
                            "div",
                            {
                              staticClass: _vm._$s(
                                27,
                                "sc",
                                "unit-1-3 flex-right"
                              ),
                              attrs: { _i: 27 },
                            },
                            [
                              _c("a", {
                                attrs: { _i: 28 },
                                on: {
                                  click: function ($event) {
                                    _vm.mode = 0
                                  },
                                },
                              }),
                            ]
                          )
                        : _vm._e(),
                    ]
                  ),
                ]
              ),
            ]
          ),
        ]
      ),
    ]
  )
}
var recyclableRender = false
var staticRenderFns = []
render._withStripped = true



/***/ }),
/* 10 */
/*!**************************************************************************************************!*\
  !*** C:/Users/W/Desktop/remotecontrol/pages/index/index.vue?vue&type=script&lang=js&mpType=page ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _E_software_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!./node_modules/babel-loader/lib!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--6-1!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/using-components.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!./index.vue?vue&type=script&lang=js&mpType=page */ 11);\n/* harmony import */ var _E_software_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_E_software_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _E_software_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0__) if([\"default\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _E_software_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_E_software_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQW1sQixDQUFnQixrbkJBQUcsRUFBQyIsImZpbGUiOiIxMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb2QgZnJvbSBcIi0hRTpcXFxcc29mdHdhcmVcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcYmFiZWwtbG9hZGVyXFxcXGxpYlxcXFxpbmRleC5qcyFFOlxcXFxzb2Z0d2FyZVxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHdlYnBhY2stcHJlcHJvY2Vzcy1sb2FkZXJcXFxcaW5kZXguanM/P3JlZi0tNi0xIUU6XFxcXHNvZnR3YXJlXFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcd2VicGFjay11bmktYXBwLWxvYWRlclxcXFx1c2luZy1jb21wb25lbnRzLmpzIUU6XFxcXHNvZnR3YXJlXFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcdnVlLWxvYWRlclxcXFxsaWJcXFxcaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZtcFR5cGU9cGFnZVwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIUU6XFxcXHNvZnR3YXJlXFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXGJhYmVsLWxvYWRlclxcXFxsaWJcXFxcaW5kZXguanMhRTpcXFxcc29mdHdhcmVcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcQGRjbG91ZGlvXFxcXHZ1ZS1jbGktcGx1Z2luLXVuaVxcXFxwYWNrYWdlc1xcXFx3ZWJwYWNrLXByZXByb2Nlc3MtbG9hZGVyXFxcXGluZGV4LmpzPz9yZWYtLTYtMSFFOlxcXFxzb2Z0d2FyZVxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHdlYnBhY2stdW5pLWFwcC1sb2FkZXJcXFxcdXNpbmctY29tcG9uZW50cy5qcyFFOlxcXFxzb2Z0d2FyZVxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHZ1ZS1sb2FkZXJcXFxcbGliXFxcXGluZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmbXBUeXBlPXBhZ2VcIiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/*!*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--6-1!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/using-components.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!C:/Users/W/Desktop/remotecontrol/pages/index/index.vue?vue&type=script&lang=js&mpType=page ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  data: function data() {\n    return {\n      imageURL: '/static/th.jpg',\n      motto: 'Hello',\n      ////\n      mode: 0,\n      //0登录，1改密，2注册,3退出\n      tips: \"\",\n      input_val: [null, null, null, null],\n      //初始4个null\n      // direction: \"/uploadapi/api/\"\n      //   direction: \"http://192.168.137.1:81/uploadapi/api/\"\n      direction: \"http://ywz3.buaamc2.net:9013/seepapi/auth/\"\n      // direction: \"http://192.168.137.1:8000/api/\"\n    };\n  },\n  onLoad: function onLoad() {\n    __f__(\"log\", \"onload ok.\", \" at pages/index/index.vue:74\");\n    // alert(\"123\")\n  },\n\n  methods: {\n    button1: function button1(event) {\n      __f__(\"log\", this.mode, \" at pages/index/index.vue:81\");\n      var that = this; //注意，http请求后的函数中，this的指向为副本的局部，无法真正修改！！所以要用that先复制指针，用that改值\n\n      __f__(\"log\", that.input_val, \" at pages/index/index.vue:84\");\n      if (this.mode == 0) {\n        //登录\n        __f__(\"log\", \"logging.\", \" at pages/index/index.vue:87\");\n        var param = {\n          \"mode\": \"0\",\n          \"data\": JSON.stringify(that.input_val)\n        };\n        __f__(\"log\", param, \" at pages/index/index.vue:92\");\n        //http requests\n        uni.request({\n          url: this.direction,\n          data: param,\n          header: {\n            'content-type': 'application/x-www-form-urlencoded'\n          },\n          method: 'POST',\n          //请求方式  或GET，必须为大写\n          success: function success(res) {\n            __f__(\"log\", '返回', res.data, \" at pages/index/index.vue:100\");\n            if (res.data[\"status\"] == \"ok\") {\n              var url = \"../first/index?username=\" + that.input_val[0];\n              uni.navigateTo({\n                url: url\n              });\n            } else {\n              uni.showToast({\n                title: \"验证失败\",\n                icon: \"none\"\n              });\n            }\n          },\n          fail: function fail(res) {\n            uni.showToast({\n              title: \"失败\",\n              icon: \"none\"\n            });\n          }\n        });\n\n        //end mode=0\n      }\n      ;\n      if (this.mode == 1) {\n        //改密\n        __f__(\"log\", \"logging.\", \" at pages/index/index.vue:125\");\n        var param = {\n          \"mode\": \"1\",\n          \"data\": JSON.stringify(that.input_val)\n        };\n        __f__(\"log\", param, \" at pages/index/index.vue:130\");\n        //http requests\n        uni.request({\n          url: this.direction,\n          data: param,\n          header: {\n            'content-type': 'application/x-www-form-urlencoded'\n          },\n          method: 'POST',\n          //请求方式  或GET，必须为大写\n          success: function success(res) {\n            __f__(\"log\", '返回', res.data, \" at pages/index/index.vue:138\");\n            if (res.data[\"status\"] == \"ok\") {\n              uni.showToast({\n                title: \"成功\",\n                icon: \"none\"\n              });\n              that.mode = 0;\n            } else {\n              uni.showToast({\n                title: \"失败\",\n                icon: \"none\"\n              });\n            }\n          },\n          fail: function fail(res) {\n            uni.showToast({\n              title: \"失败\",\n              icon: \"none\"\n            });\n          }\n        });\n\n        //end mode=1\n      }\n\n      if (this.mode == 2) {\n        //注册\n        __f__(\"log\", \"logging.\", \" at pages/index/index.vue:166\");\n        var param = {\n          \"mode\": \"2\",\n          \"data\": JSON.stringify(that.input_val)\n        };\n        __f__(\"log\", param, \" at pages/index/index.vue:171\");\n        //http requests\n        uni.request({\n          url: this.direction,\n          data: param,\n          header: {\n            'content-type': 'application/x-www-form-urlencoded'\n          },\n          method: 'POST',\n          //请求方式  或GET，必须为大写\n          success: function success(res) {\n            __f__(\"log\", '返回', res.data, \" at pages/index/index.vue:179\");\n            if (res.data[\"status\"] == \"ok\") {\n              uni.showToast({\n                title: \"成功\",\n                icon: \"none\"\n              });\n              that.mode = 0;\n            } else {\n              uni.showToast({\n                title: \"失败\",\n                icon: \"none\"\n              });\n            }\n          },\n          fail: function fail(res) {\n            uni.showToast({\n              title: \"失败\",\n              icon: \"none\"\n            });\n          }\n        });\n\n        //end mode=2\n      }\n    }\n  }\n};\nexports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/*!*********************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js ***!
  \*********************************************************************/
/*! exports provided: log, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "log", function() { return log; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return formatLog; });
function typof (v) {
  var s = Object.prototype.toString.call(v)
  return s.substring(8, s.length - 1)
}

function isDebugMode () {
  /* eslint-disable no-undef */
  return typeof __channelId__ === 'string' && __channelId__
}

function jsonStringifyReplacer (k, p) {
  switch (typof(p)) {
    case 'Function':
      return 'function() { [native code] }'
    default :
      return p
  }
}

function log (type) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key]
  }
  console[type].apply(console, args)
}

function formatLog () {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key]
  }
  var type = args.shift()
  if (isDebugMode()) {
    args.push(args.pop().replace('at ', 'uni-app:///'))
    return console[type].apply(console, args)
  }

  var msgs = args.map(function (v) {
    var type = Object.prototype.toString.call(v).toLowerCase()

    if (type === '[object object]' || type === '[object array]') {
      try {
        v = '---BEGIN:JSON---' + JSON.stringify(v, jsonStringifyReplacer) + '---END:JSON---'
      } catch (e) {
        v = type
      }
    } else {
      if (v === null) {
        v = '---NULL---'
      } else if (v === undefined) {
        v = '---UNDEFINED---'
      } else {
        var vType = typof(v).toUpperCase()

        if (vType === 'NUMBER' || vType === 'BOOLEAN') {
          v = '---BEGIN:' + vType + '---' + v + '---END:' + vType + '---'
        } else {
          v = String(v)
        }
      }
    }

    return v
  })
  var msg = ''

  if (msgs.length > 1) {
    var lastMsg = msgs.pop()
    msg = msgs.join('---COMMA---')

    if (lastMsg.indexOf(' at ') === 0) {
      msg += lastMsg
    } else {
      msg += '---COMMA---' + lastMsg
    }
  } else {
    msg = msgs[0]
  }

  console[type](msg)
}


/***/ }),
/* 13 */
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js ***!
  \**********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode, /* vue-cli only */
  components, // fixed by xxxxxx auto components
  renderjs // fixed by xxxxxx renderjs
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // fixed by xxxxxx auto components
  if (components) {
    if (!options.components) {
      options.components = {}
    }
    var hasOwn = Object.prototype.hasOwnProperty
    for (var name in components) {
      if (hasOwn.call(components, name) && !hasOwn.call(options.components, name)) {
        options.components[name] = components[name]
      }
    }
  }
  // fixed by xxxxxx renderjs
  if (renderjs) {
    (renderjs.beforeCreate || (renderjs.beforeCreate = [])).unshift(function() {
      this[renderjs.__module] = this
    });
    (options.mixins || (options.mixins = [])).push(renderjs)
  }

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),
/* 14 */
/*!**************************************************************************!*\
  !*** C:/Users/W/Desktop/remotecontrol/pages/first/index.vue?mpType=page ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _index_vue_vue_type_template_id_50aa199a_mpType_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.vue?vue&type=template&id=50aa199a&mpType=page */ 15);\n/* harmony import */ var _index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.vue?vue&type=script&lang=js&mpType=page */ 17);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_1__) if([\"default\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_1__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n/* harmony import */ var _E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js */ 13);\n\nvar renderjs\n\n\n\n\n/* normalize component */\n\nvar component = Object(_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n  _index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _index_vue_vue_type_template_id_50aa199a_mpType_page__WEBPACK_IMPORTED_MODULE_0__[\"render\"],\n  _index_vue_vue_type_template_id_50aa199a_mpType_page__WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"],\n  false,\n  null,\n  null,\n  null,\n  false,\n  _index_vue_vue_type_template_id_50aa199a_mpType_page__WEBPACK_IMPORTED_MODULE_0__[\"components\"],\n  renderjs\n)\n\ncomponent.options.__file = \"pages/first/index.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBNkg7QUFDN0g7QUFDb0U7QUFDTDs7O0FBRy9EO0FBQytLO0FBQy9LLGdCQUFnQix3TEFBVTtBQUMxQixFQUFFLHNGQUFNO0FBQ1IsRUFBRSwyRkFBTTtBQUNSLEVBQUUsb0dBQWU7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsK0ZBQVU7QUFDWjtBQUNBOztBQUVBO0FBQ2UsZ0YiLCJmaWxlIjoiMTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucywgcmVjeWNsYWJsZVJlbmRlciwgY29tcG9uZW50cyB9IGZyb20gXCIuL2luZGV4LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01MGFhMTk5YSZtcFR5cGU9cGFnZVwiXG52YXIgcmVuZGVyanNcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJm1wVHlwZT1wYWdlXCJcbmV4cG9ydCAqIGZyb20gXCIuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZtcFR5cGU9cGFnZVwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiFFOlxcXFxzb2Z0d2FyZVxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHZ1ZS1sb2FkZXJcXFxcbGliXFxcXHJ1bnRpbWVcXFxcY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGwsXG4gIGZhbHNlLFxuICBjb21wb25lbnRzLFxuICByZW5kZXJqc1xuKVxuXG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInBhZ2VzL2ZpcnN0L2luZGV4LnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/*!********************************************************************************************************!*\
  !*** C:/Users/W/Desktop/remotecontrol/pages/first/index.vue?vue&type=template&id=50aa199a&mpType=page ***!
  \********************************************************************************************************/
/*! exports provided: render, staticRenderFns, recyclableRender, components */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_50aa199a_mpType_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--10-0!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/filter-modules-template.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!./index.vue?vue&type=template&id=50aa199a&mpType=page */ 16);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_50aa199a_mpType_page__WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_50aa199a_mpType_page__WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "recyclableRender", function() { return _E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_50aa199a_mpType_page__WEBPACK_IMPORTED_MODULE_0__["recyclableRender"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "components", function() { return _E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_50aa199a_mpType_page__WEBPACK_IMPORTED_MODULE_0__["components"]; });



/***/ }),
/* 16 */

  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--10-0!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/filter-modules-template.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!C:/Users/W/Desktop/remotecontrol/pages/first/index.vue?vue&type=template&id=50aa199a&mpType=page ***!

/*! exports provided: render, staticRenderFns, recyclableRender, components */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "recyclableRender", function() { return recyclableRender; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "components", function() { return components; });
var components
var render = function () {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", [
    _c("header", { attrs: { id: "top", _i: 1 } }, [
      _c("div", { attrs: { id: "top_box", _i: 2 } }, [
        _c("ul", { staticClass: _vm._$s(3, "sc", "rt"), attrs: { _i: 3 } }, [
          _c("li", [_vm._v(_vm._$s(4, "t0-0", _vm._s(_vm.username)))]),
          _c("li", [_c("a", { attrs: { _i: 6 }, on: { click: _vm.quit } })]),
        ]),
      ]),
    ]),
    _c("div", [
      _c("br"),
      _c("br"),
      _c("span", [
        _c("button", {
          staticClass: _vm._$s(11, "sc", "btn btn-primary"),
          attrs: { _i: 11 },
          on: {
            click: function ($event) {
              _vm.seen_id = 0
            },
          },
        }),
        _c("span", {
          attrs: { _i: 12 },
          domProps: {
            innerHTML: _vm._s(
              _vm._$s(12, "v-html", "&nbsp;&nbsp;&nbsp;&nbsp;")
            ),
          },
        }),
        _c("button", {
          staticClass: _vm._$s(13, "sc", "btn btn-primary"),
          attrs: { _i: 13 },
          on: {
            click: function ($event) {
              _vm.seen_id = 1
            },
          },
        }),
        _c("span", {
          attrs: { _i: 14 },
          domProps: {
            innerHTML: _vm._s(
              _vm._$s(14, "v-html", "&nbsp;&nbsp;&nbsp;&nbsp;")
            ),
          },
        }),
        _vm._$s(15, "i", _vm.username == "admin")
          ? _c("button", {
              staticClass: _vm._$s(15, "sc", "btn btn-primary"),
              attrs: { _i: 15 },
              on: {
                click: function ($event) {
                  _vm.seen_id = 2
                  _vm.buttonadmin()
                },
              },
            })
          : _vm._e(),
        _c("span", {
          attrs: { _i: 16 },
          domProps: {
            innerHTML: _vm._s(
              _vm._$s(16, "v-html", "&nbsp;&nbsp;&nbsp;&nbsp;")
            ),
          },
        }),
      ]),
      _c("br"),
      _c("br"),
      _c("br"),
      _vm._$s(20, "i", _vm.seen_id == 0)
        ? _c(
            "div",
            [
              _c("h2"),
              _c("p", [_vm._v(_vm._$s(22, "t0-0", _vm._s(_vm.res_time)))]),
              _c("hr"),
              _vm._l(
                _vm._$s(24, "f", { forItems: _vm.res_data1["data"] }),
                function (each, index, $20, $30) {
                  return _c(
                    "div",
                    {
                      key: _vm._$s(24, "f", {
                        forIndex: $20,
                        key: 24 + "-" + $30,
                      }),
                    },
                    [_c("hr")]
                  )
                }
              ),
            ],
            2
          )
        : _vm._e(),
      _vm._$s(26, "i", _vm.seen_id == 1)
        ? _c("div", [
            _c("label"),
            _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.input_val[0],
                  expression: "input_val[0]",
                },
              ],
              attrs: { _i: 28 },
              domProps: { value: _vm._$s(28, "v-model", _vm.input_val[0]) },
              on: {
                input: function ($event) {
                  if ($event.target.composing) {
                    return
                  }
                  _vm.$set(_vm.input_val, 0, $event.target.value)
                },
              },
            }),
            _c("br"),
            _c("label"),
            _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.input_val[1],
                  expression: "input_val[1]",
                },
              ],
              attrs: { _i: 31 },
              domProps: { value: _vm._$s(31, "v-model", _vm.input_val[1]) },
              on: {
                input: function ($event) {
                  if ($event.target.composing) {
                    return
                  }
                  _vm.$set(_vm.input_val, 1, $event.target.value)
                },
              },
            }),
            _c("br"),
            _c("label"),
            _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.input_val[2],
                  expression: "input_val[2]",
                },
              ],
              attrs: { _i: 34 },
              domProps: { value: _vm._$s(34, "v-model", _vm.input_val[2]) },
              on: {
                input: function ($event) {
                  if ($event.target.composing) {
                    return
                  }
                  _vm.$set(_vm.input_val, 2, $event.target.value)
                },
              },
            }),
            _c("br"),
            _c("label"),
            _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.input_val[3],
                  expression: "input_val[3]",
                },
              ],
              attrs: { _i: 37 },
              domProps: { value: _vm._$s(37, "v-model", _vm.input_val[3]) },
              on: {
                input: function ($event) {
                  if ($event.target.composing) {
                    return
                  }
                  _vm.$set(_vm.input_val, 3, $event.target.value)
                },
              },
            }),
            _c("button", {
              staticClass: _vm._$s(38, "sc", "btn btn-primary"),
              attrs: { _i: 38 },
              on: { click: _vm.change },
            }),
            _c("br"),
            _c("label"),
            _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.input_val[4],
                  expression: "input_val[4]",
                },
              ],
              attrs: { _i: 41 },
              domProps: { value: _vm._$s(41, "v-model", _vm.input_val[4]) },
              on: {
                input: function ($event) {
                  if ($event.target.composing) {
                    return
                  }
                  _vm.$set(_vm.input_val, 4, $event.target.value)
                },
              },
            }),
            _c("br"),
            _c("label"),
            _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.input_val[5],
                  expression: "input_val[5]",
                },
              ],
              attrs: { _i: 44 },
              domProps: { value: _vm._$s(44, "v-model", _vm.input_val[5]) },
              on: {
                input: function ($event) {
                  if ($event.target.composing) {
                    return
                  }
                  _vm.$set(_vm.input_val, 5, $event.target.value)
                },
              },
            }),
            _c("br"),
            _c("label"),
            _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.input_val[6],
                  expression: "input_val[6]",
                },
              ],
              attrs: { _i: 47 },
              domProps: { value: _vm._$s(47, "v-model", _vm.input_val[6]) },
              on: {
                input: function ($event) {
                  if ($event.target.composing) {
                    return
                  }
                  _vm.$set(_vm.input_val, 6, $event.target.value)
                },
              },
            }),
            _c("button", {
              staticClass: _vm._$s(48, "sc", "btn btn-primary"),
              attrs: { _i: 48 },
              on: {
                click: function ($event) {
                  return _vm.change((_vm.type = "update"))
                },
              },
            }),
          ])
        : _vm._e(),
      _vm._$s(49, "i", _vm.seen_id == 2)
        ? _c("div", [
            _c("h2"),
            _c("p", [
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.input_val[0],
                    expression: "input_val[0]",
                  },
                ],
                attrs: { _i: 52 },
                domProps: { value: _vm._$s(52, "v-model", _vm.input_val[0]) },
                on: {
                  input: function ($event) {
                    if ($event.target.composing) {
                      return
                    }
                    _vm.$set(_vm.input_val, 0, $event.target.value)
                  },
                },
              }),
            ]),
            _c("p", [
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.input_val[1],
                    expression: "input_val[1]",
                  },
                ],
                attrs: { _i: 54 },
                domProps: { value: _vm._$s(54, "v-model", _vm.input_val[1]) },
                on: {
                  input: function ($event) {
                    if ($event.target.composing) {
                      return
                    }
                    _vm.$set(_vm.input_val, 1, $event.target.value)
                  },
                },
              }),
            ]),
            _c("br"),
            _c("button", {
              staticClass: _vm._$s(56, "sc", "btn btn-primary"),
              attrs: { _i: 56 },
              on: {
                click: function ($event) {
                  this.changeadmin()
                  this.buttonadmin()
                },
              },
            }),
            _c("button", {
              staticClass: _vm._$s(57, "sc", "btn btn-primary"),
              attrs: { _i: 57 },
              on: {
                click: function ($event) {
                  this.registeradmin()
                  this.buttonadmin()
                },
              },
            }),
            _c("hr"),
            _c("h2"),
            _c("br"),
            _c("button", {
              staticClass: _vm._$s(61, "sc", "btn btn-primary "),
              attrs: { _i: 61 },
              on: { click: _vm.buttonadmin },
            }),
            _c("br"),
            _c("br"),
            _c(
              "table",
              {},
              [
                _c("tr", [_c("td"), _c("td"), _c("td")]),
                _vm._l(
                  _vm._$s(69, "f", { forItems: _vm.res_data_admin }),
                  function (each, index, $21, $31) {
                    return _c(
                      "tr",
                      {
                        key: _vm._$s(69, "f", {
                          forIndex: $21,
                          key: 69 + "-" + $31,
                        }),
                      },
                      [
                        _c("td", {
                          attrs: { _i: "70-" + $31 },
                          domProps: {
                            textContent: _vm._s(
                              _vm._$s("70-" + $31, "v-text", each[0])
                            ),
                          },
                        }),
                        _c("td", {
                          attrs: { _i: "71-" + $31 },
                          domProps: {
                            textContent: _vm._s(
                              _vm._$s("71-" + $31, "v-text", each[1])
                            ),
                          },
                        }),
                        _c("td", [
                          _c("button", {
                            staticClass: _vm._$s(
                              "73-" + $31,
                              "sc",
                              "btn btn-primary "
                            ),
                            attrs: { _i: "73-" + $31 },
                            on: {
                              click: function ($event) {
                                this.deleteadmin(each[0])
                                this.buttonadmin()
                              },
                            },
                          }),
                        ]),
                      ]
                    )
                  }
                ),
              ],
              2
            ),
            _c("br"),
            _c("br"),
            _c("hr"),
            _c("br"),
            _c("br"),
            _c("br"),
            _c("br"),
            _c("hr"),
            _c("br"),
            _c("br"),
            _c("p", [
              _c("input", {
                directives: [
                  {
                    name: "model",
                    rawName: "v-model",
                    value: _vm.input_val[0],
                    expression: "input_val[0]",
                  },
                ],
                attrs: { _i: 85 },
                domProps: { value: _vm._$s(85, "v-model", _vm.input_val[0]) },
                on: {
                  input: function ($event) {
                    if ($event.target.composing) {
                      return
                    }
                    _vm.$set(_vm.input_val, 0, $event.target.value)
                  },
                },
              }),
            ]),
            _c("button", {
              staticClass: _vm._$s(86, "sc", "btn btn-primary "),
              attrs: { _i: 86 },
              on: {
                click: function ($event) {
                  return this.deletefiles()
                },
              },
            }),
            _c("br"),
            _c("br"),
            _c("br"),
          ])
        : _vm._e(),
    ]),
  ])
}
var recyclableRender = false
var staticRenderFns = []
render._withStripped = true



/***/ }),
/* 17 */
/*!**************************************************************************************************!*\
  !*** C:/Users/W/Desktop/remotecontrol/pages/first/index.vue?vue&type=script&lang=js&mpType=page ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _E_software_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!./node_modules/babel-loader/lib!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--6-1!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/using-components.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!./index.vue?vue&type=script&lang=js&mpType=page */ 18);\n/* harmony import */ var _E_software_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_E_software_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _E_software_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0__) if([\"default\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _E_software_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_E_software_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQW1sQixDQUFnQixrbkJBQUcsRUFBQyIsImZpbGUiOiIxNy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb2QgZnJvbSBcIi0hRTpcXFxcc29mdHdhcmVcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcYmFiZWwtbG9hZGVyXFxcXGxpYlxcXFxpbmRleC5qcyFFOlxcXFxzb2Z0d2FyZVxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHdlYnBhY2stcHJlcHJvY2Vzcy1sb2FkZXJcXFxcaW5kZXguanM/P3JlZi0tNi0xIUU6XFxcXHNvZnR3YXJlXFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcd2VicGFjay11bmktYXBwLWxvYWRlclxcXFx1c2luZy1jb21wb25lbnRzLmpzIUU6XFxcXHNvZnR3YXJlXFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcdnVlLWxvYWRlclxcXFxsaWJcXFxcaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2luZGV4LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZtcFR5cGU9cGFnZVwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIUU6XFxcXHNvZnR3YXJlXFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXGJhYmVsLWxvYWRlclxcXFxsaWJcXFxcaW5kZXguanMhRTpcXFxcc29mdHdhcmVcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcQGRjbG91ZGlvXFxcXHZ1ZS1jbGktcGx1Z2luLXVuaVxcXFxwYWNrYWdlc1xcXFx3ZWJwYWNrLXByZXByb2Nlc3MtbG9hZGVyXFxcXGluZGV4LmpzPz9yZWYtLTYtMSFFOlxcXFxzb2Z0d2FyZVxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHdlYnBhY2stdW5pLWFwcC1sb2FkZXJcXFxcdXNpbmctY29tcG9uZW50cy5qcyFFOlxcXFxzb2Z0d2FyZVxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHZ1ZS1sb2FkZXJcXFxcbGliXFxcXGluZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmbXBUeXBlPXBhZ2VcIiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/*!*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--6-1!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/using-components.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!C:/Users/W/Desktop/remotecontrol/pages/first/index.vue?vue&type=script&lang=js&mpType=page ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__, wx) {\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ 1);\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _uCharts = _interopRequireDefault(__webpack_require__(/*! @/static/u-charts/u-charts.js */ 28));\nvar _wxcharts = _interopRequireDefault(__webpack_require__(/*! @/static/wxcharts.js */ 29));\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n//@=../..\nvar _self;\nvar canvaGauge = null; //必须！否则报错\n\nvar _self;\nvar canvaLineA = null;\n//这里的Data为测试使用，生产环境请从服务器获取\nvar Data = {\n  LineA: {\n    categories: ['2012', '2013', '2014', '2015', '2016', '2017'],\n    series: [{\n      name: '成交量A',\n      data: [35, 20, 25, 37, 4, 20]\n    }, {\n      name: '成交量B',\n      data: [70, 40, 65, 100, 44, 68]\n    }, {\n      name: '成交量C',\n      data: [100, 80, 95, 150, 112, 132]\n    }, {\n      name: '成交量D',\n      data: [100, 80, 95, 150, 112, 132]\n    }]\n  }\n};\nvar _default = {\n  data: function data() {\n    return {\n      canvasnamelist: [\"canvasGauge0\", \"canvasGauge1\"],\n      title: 'Hello',\n      username: \"\",\n      intervalId: null,\n      seen_id: 1,\n      //////////////\n      val: [0, 1],\n      ///画图变量\n      cWidth: '',\n      cHeight: '',\n      pixelRatio: 1,\n      //翻页变量\n      temp_index: 0,\n      all_count: null,\n      charts_len: 7,\n      //// \n      enable_sign_up: false,\n      //// \n      input_val: [null, null, null, null, null, null, null, null],\n      //初始8个null\n      res_data1: [],\n      temperature: \"\",\n      humidity: \"\",\n      temptime: \"\",\n      res_time: \"\",\n      res_data_admin: [],\n      // direction: \"/uploadapi\"\n      direction: \"http://127.0.0.1:8000\"\n      // direction: \"http://ywz3.buaamc2.net:9013/seepapi\"\n      // direction: \"http://192.168.137.1:8000\"\n    };\n  },\n  onLoad: function onLoad(options) {\n    __f__(\"log\", \"Op:\", options, \" at pages/first/index.vue:183\");\n    if (options == {}) {\n      this.username = \"test\";\n    } else {\n      this.username = options.username;\n    }\n    //加载时先刷新一下\n    this.fresh();\n    this.check_main();\n\n    //定时器\n    this.dataRefresh();\n\n    //画布\n    _self = this;\n    this.cWidth = uni.upx2px(750);\n    this.cHeight = uni.upx2px(500);\n  },\n  onReady: function onReady() {\n    ;\n    // this.showLineA(\"canvasLineA\",Data.LineA);\n  },\n\n  methods: {\n    //////////////////////////////////\n    quit: function quit(event) {\n      var url = \"../index/index\";\n      wx.navigateTo({\n        url: url\n      });\n    },\n    // draw(){\n    // \tthis.showLineA(\"canvasLineA\",Data.LineA);\n    // },\n    fresh: function fresh() {\n      __f__(\"log\", \"fresh \", \" at pages/first/index.vue:227\");\n      this.check_main();\n    },\n    // 定时刷新数据函数\n    dataRefresh: function dataRefresh() {\n      var _this = this;\n      // 计时器正在进行中，退出函数\n      if (this.intervalId != null) {\n        return;\n      }\n      // 计时器为空，操作\n      this.intervalId = setInterval(function () {\n        __f__(\"log\", \"刷新 \" + new Date(), \" at pages/first/index.vue:238\");\n        _this.fresh(); //加载数据函数\n      }, 5000);\n    },\n    // 停止定时器\n    clear: function clear() {\n      clearInterval(this.intervalId); //清除计时器\n      this.intervalId = null; //设置为null\n    },\n    // //定时器\n    // created() {\n    // \tthis.dataRefresh();\n    // },\n    destroyed: function destroyed() {\n      // 在页面销毁后，清除计时器\n      this.clear();\n    },\n    //////////////////////////////////\n    ///\n    //admin\n    buttonadmin: function buttonadmin() {\n      var that = this;\n      // 提交到后端\n      // $.ajaxSettings.async = false; //修改为同步请求！！！\n      var param = {\n        \"kind\": \"000\" //kind=0\n        // \"data\": JSON.stringify(this.input_val) //数组转json，必须经过此操作！\n      };\n\n      uni.request({\n        url: that.direction + \"/auth/\",\n        data: param,\n        header: {\n          'content-type': 'application/x-www-form-urlencoded'\n        },\n        method: 'GET',\n        //请求方式  或GET，必须为大写\n        success: function success(res) {\n          __f__(\"log\", \"get back.\", \" at pages/first/index.vue:272\");\n          __f__(\"log\", res.data, \" at pages/first/index.vue:273\");\n          that.res_data_admin = res.data['data'];\n        }\n      });\n    },\n    deleteadmin: function deleteadmin(data) {\n      var that = this;\n      __f__(\"log\", data, \" at pages/first/index.vue:281\");\n      var param = {\n        \"kind\": \"001\",\n        //kind=0\n        \"name\": data //JSON.stringify(this.input_val) //数组转json，必须经过此操作！\n      };\n\n      uni.request({\n        url: that.direction + \"/auth/\",\n        data: param,\n        header: {\n          'content-type': 'application/x-www-form-urlencoded'\n        },\n        method: 'GET',\n        //请求方式  或GET，必须为大写\n        success: function success(res) {\n          __f__(\"log\", \"get back.\", \" at pages/first/index.vue:292\");\n          __f__(\"log\", res.data, \" at pages/first/index.vue:293\");\n          if (res.data['status'] == 'ok') {\n            uni.showToast({\n              title: \"成功\",\n              icon: \"none\"\n            });\n          } else {\n            uni.showToast({\n              title: \"失败\",\n              icon: \"none\"\n            });\n          }\n        }\n      });\n    },\n    changeadmin: function changeadmin() {\n      var that = this;\n      // console.log(data);\n      var param = {\n        \"kind\": \"002\",\n        //kind=0\n        \"name\": this.input_val[0],\n        //JSON.stringify(this.input_val) //数组转json，必须经过此操作！\n        \"newpasswd\": this.input_val[1] //JSON.stringify(this.input_val) //数组转json，必须经过此操作！\n      };\n\n      uni.request({\n        url: that.direction + \"/auth/\",\n        data: param,\n        header: {\n          'content-type': 'application/x-www-form-urlencoded'\n        },\n        method: 'GET',\n        //请求方式  或GET，必须为大写\n        success: function success(res) {\n          __f__(\"log\", \"get back.\", \" at pages/first/index.vue:324\");\n          __f__(\"log\", res.data, \" at pages/first/index.vue:325\");\n          if (res.data['status'] == 'ok') {\n            uni.showToast({\n              title: \"成功\",\n              icon: \"none\"\n            });\n          } else {\n            uni.showToast({\n              title: \"失败\",\n              icon: \"none\"\n            });\n          }\n        }\n      });\n    },\n    registeradmin: function registeradmin() {\n      var that = this;\n      // console.log(data);\n      var param = {\n        \"kind\": \"003\",\n        //kind=0\n        \"name\": this.input_val[0],\n        //JSON.stringify(this.input_val) //数组转json，必须经过此操作！\n        \"newpasswd\": this.input_val[1] //JSON.stringify(this.input_val) //数组转json，必须经过此操作！\n      };\n\n      uni.request({\n        url: that.direction + \"/auth/\",\n        data: param,\n        header: {\n          'content-type': 'application/x-www-form-urlencoded'\n        },\n        method: 'GET',\n        //请求方式  或GET，必须为大写\n        success: function success(res) {\n          __f__(\"log\", \"get back.\", \" at pages/first/index.vue:356\");\n          __f__(\"log\", res.data, \" at pages/first/index.vue:357\");\n          if (res.data['status'] == 'ok') {\n            uni.showToast({\n              title: \"成功\",\n              icon: \"none\"\n            });\n          } else {\n            uni.showToast({\n              title: \"失败\",\n              icon: \"none\"\n            });\n          }\n        }\n      });\n    },\n    change_sign_up: function change_sign_up() {\n      if (self.enable_sign_up) {\n        var param = {\n          \"kind\": \"004\",\n          \"username\": that.username\n        };\n      } else {\n        var param = {\n          \"kind\": \"005\",\n          \"username\": that.username\n        };\n      }\n      uni.request({\n        url: that.direction + \"/auth/\",\n        data: param,\n        header: {\n          'content-type': 'application/x-www-form-urlencoded'\n        },\n        method: 'GET',\n        //请求方式  或GET，必须为大写\n        success: function success(res) {\n          if (res.data['status'] == 'ok') {\n            uni.showToast({\n              title: \"成功\",\n              icon: \"none\"\n            });\n          } else {\n            uni.showToast({\n              title: \"失败\",\n              icon: \"none\"\n            });\n          }\n        }\n      });\n    },\n    //////////////////////\n    deleteproduct: function deleteproduct(data) {\n      var that = this;\n      __f__(\"log\", data, \" at pages/first/index.vue:409\");\n      var param = {\n        \"kind\": \"31\",\n        //kind=0\n        \"username\": that.username,\n        \"id\": data //JSON.stringify(this.input_val) //数组转json，必须经过此操作！\n      };\n\n      uni.request({\n        url: that.direction + \"/test/\",\n        data: param,\n        header: {\n          'content-type': 'application/x-www-form-urlencoded'\n        },\n        method: 'GET',\n        //请求方式  或GET，必须为大写\n        success: function success(res) {\n          __f__(\"log\", \"get back.\", \" at pages/first/index.vue:421\");\n          __f__(\"log\", res.data, \" at pages/first/index.vue:422\");\n          if (res.data['status'] == 'ok') {\n            uni.showToast({\n              title: \"成功\",\n              icon: \"none\"\n            });\n            that.check_main();\n          } else {\n            uni.showToast({\n              title: \"失败\",\n              icon: \"none\"\n            });\n          }\n        }\n      });\n    },\n    //操作--button1\n    check_main: function check_main(event) {\n      var that = this;\n      // console.log(event); //可同时获得按钮信息\n      // console.log(this.input_val);\n      // 提交到后端\n      // $.ajaxSettings.async = false; //修改为同步请求！！！\n      var param = {\n        \"kind\": \"2\",\n        //kind=0\n        \"username\": that.username\n        //\"data\": JSON.stringify(this.input_val) //数组转json，必须经过此操作！\n      };\n      //http requests\n      // uni.request({\n      // \turl: that.direction + \"/test/\", \n      // \tdata:param,\n      // \theader: {'content-type': 'application/x-www-form-urlencoded'},\n      // \tmethod:'GET',//请求方式  或GET，必须为大写\n      // \tsuccess: res => {\n      // \tconsole.log('返回', res.data);\t\t\t\t\t\t\n      // \tconsole.log(\"get back.\")\n      // \tthat.res_data1 = res.data;\n      // \tthat.res_time = res.data['time'];\n\n      // \tconsole.log(\"length\");\n      // \tconsole.log(res.data.data.length);\n\n      // \tfor(var ii=0;ii<res.data.data.length ;ii++){\n      // \t\tconsole.log(ii);\n      // \t\tthat.canvasnamelist[ii] = \"canvasGauge\"+ii.toString();\n      // \t\tlet val = parseFloat(res.data.data[ii][2]);\n      // \t\tconsole.log(val);\n      // \t\tlet Gauge={\"categories\":[{\"value\":0.2,\"color\":\"#1890ff\"},{\"value\":0.8,\"color\":\"#2fc25b\"},{\"value\":1,\"color\":\"#f04864\"}],\n      // \t\t\"series\":[{\"name\":\"温度\",\"data\":val/100,\"ori\":val}]}; //如果最大温度是100的话\n\n      // \t\tthis.showGauge(that.canvasnamelist[ii],Gauge);\n      // \t\t// this.showGauge(\"canvasGauge0\",Gauge);\t\n      // \t}\n\n      // \t}\n      //   });\n    },\n    send: function send(a, b, passwd) {\n      __f__(\"log\", \"send\", a, b, \" at pages/first/index.vue:486\");\n      var that = this;\n      // console.log(event); //可同时获得按钮信息\n      // console.log(this.input_val);\n      // 提交到后端\n      // $.ajaxSettings.async = false; //修改为同步请求！！！\n      var param = {\n        \"kind\": \"1\",\n        //button\n        \"id\": a.toString(),\n        \"info\": b.toString(),\n        //指向\n        \"password\": passwd\n        //\"data\": JSON.stringify(this.input_val) //数组转json，必须经过此操作！\n      };\n      // console.log(param);\n      // $.get(that.direction + \"/test/\", param, function(data, status) {\n      // \tconsole.log(\"get back.\")\n      // \tconsole.log(data);\n      // \tthat.check_main();\n      // \talert(\"已提交\")\n      // })\n\n      //http requests\n      uni.request({\n        url: that.direction + \"/test/\",\n        data: param,\n        header: {\n          'content-type': 'application/x-www-form-urlencoded'\n        },\n        method: 'GET',\n        //请求方式  或GET，必须为大写\n        success: function success(res) {\n          __f__(\"log\", '返回', res.data, \" at pages/first/index.vue:514\");\n          that.check_main();\n          uni.showToast({\n            title: \"完毕\",\n            icon: \"none\"\n          });\n        }\n      });\n    },\n    //修改信息\n    change: function change(type) {\n      uni.request({\n        url: \"/unionenet/devices/status\",\n        // url: \"http://183.230.40.34/devices/status\",\n        header: {\n          \"api-key\": \"2kJV69eUrcMgCLjkyOzT8k1WY0Y=\"\n        },\n        data: {\n          'devIds': \"1048953737\"\n        },\n        method: 'GET',\n        //请求方式  或GET，必须为大写\n        success: function success(res) {\n          __f__(\"log\", '返回', res.data, \" at pages/first/index.vue:532\");\n        }\n      });\n    },\n    // change(type, with_pin=false) {\n    // \tvar that = this;\n    // \t// $.ajaxSettings.async = false; //修改为同步请求！！！\n    // \tvar param = {\n    // \t\t\"type\": type,\n    // \t\t\"user\":that.username,\n    // \t\t\"data\": JSON.stringify({\n    // \t\t\t\"device_id\": that.input_val[0],\n    // \t\t\t\"apikey\": that.input_val[1],\n    // \t\t\t\"comments\": that.input_val[2],\n    // \t\t\t\"email\": that.input_val[3],\n    // \t\t\t\"pin_conf\": [{\n    // \t\t\t\t\"pin_id\": that.input_val[4],\n    // \t\t\t\t\"comments\": that.input_val[5],\n    // \t\t\t\t\"alert_conf\": that.input_val[6]\n    // \t\t\t}]\n    // \t\t}) //数组转json，必须经过此操作！\n    // \t}\n    // \t// $.get(that.direction + \"/xxx/\", param, function(data, status) {\n    // \t//http requests\n    // \tuni.request({\n    // \t\turl: that.direction + \"/openapi/manage_conf/\", \n    // \t\tdata:param,\n    // \t\theader: {'content-type': 'application/x-www-form-urlencoded'},\n    // \t\tmethod:'POST',//请求方式  或GET，必须为大写\n    // \t\tsuccess: res => {\n    // \t\t\tconsole.log('返回', res.data);\t\n    // \t\t\tif(res.data['status']=='fail'){\n    // \t\t\t\tuni.showToast({\n    // \t\t\t\t\ttitle: \"设备号/密钥不正确\",\n    // \t\t\t\t\ticon: \"none\"\n    // \t\t\t\t})\t\t\t\t\t\t\t\t\n    // \t\t\t}\n    // \t\t\telse{\n    // \t\t\t\tuni.showToast({\n    // \t\t\t\t\ttitle: \"完毕\",\n    // \t\t\t\t\ticon: \"none\"\n    // \t\t\t\t})\t\n    // \t\t\t}\n    // \t\t}\n    // \t  });\n    // },\n    //gauge\n    showGauge: function showGauge(canvasId, chartData) {\n      canvaGauge = new _uCharts.default({\n        $this: _self,\n        canvasId: canvasId,\n        type: 'gauge',\n        fontSize: 11,\n        legend: false,\n        title: {\n          name: chartData.series[0].ori + '℃',\n          //Math.round()\n          color: chartData.categories[1].color,\n          fontSize: 25 * _self.pixelRatio,\n          offsetY: 50 * _self.pixelRatio //新增参数，自定义调整Y轴文案距离\n        },\n\n        subtitle: {\n          name: chartData.series[0].name,\n          color: '#666666',\n          fontSize: 15 * _self.pixelRatio,\n          offsetY: -50 * _self.pixelRatio //新增参数，自定义调整Y轴文案距离\n        },\n\n        extra: {\n          gauge: {\n            type: 'default',\n            width: _self.gaugeWidth * _self.pixelRatio,\n            //仪表盘背景的宽度\n            startAngle: 0.75,\n            endAngle: 0.25,\n            startNumber: 0.0,\n            endNumber: 100.0,\n            splitLine: {\n              fixRadius: 0,\n              splitNumber: 10,\n              width: _self.gaugeWidth * _self.pixelRatio,\n              //仪表盘背景的宽度\n              color: '#FFFFFF',\n              childNumber: 5,\n              childWidth: _self.gaugeWidth * 0.4 * _self.pixelRatio //仪表盘背景的宽度\n            },\n\n            pointer: {\n              width: _self.gaugeWidth * 0.8 * _self.pixelRatio,\n              //指针宽度\n              color: 'auto'\n            }\n          }\n        },\n        background: '#FFFFFF',\n        pixelRatio: _self.pixelRatio,\n        categories: chartData.categories,\n        series: chartData.series,\n        animation: false,\n        width: _self.cWidth * _self.pixelRatio * 1 / 2,\n        height: _self.cHeight * _self.pixelRatio,\n        dataLabel: true\n      });\n    },\n    //curve\n    //////////////////////////////////////\n    getandshow: function getandshow(event) {\n      var _this2 = this;\n      var that = this;\n      __f__(\"log\", event, \" at pages/first/index.vue:638\"); //可同时获得按钮信息\n      // console.log(this.input_val);\n      // 提交到后端\n      // $.ajaxSettings.async = false; //修改为同步请求！！！\n      var param = {\n        \"username\": that.username,\n        \"kind\": \"4\",\n        //kind=0\n        \"temp_index\": that.temp_index,\n        \"charts_len\": that.charts_len\n        //\"data\": JSON.stringify(this.input_val) //数组转json，必须经过此操作！\n      };\n      //http requests\n      uni.request({\n        url: that.direction + \"/test/\",\n        data: param,\n        header: {\n          'content-type': 'application/x-www-form-urlencoded'\n        },\n        method: 'GET',\n        //请求方式  或GET，必须为大写\n        success: function success(res) {\n          __f__(\"log\", '返回', res.data, \" at pages/first/index.vue:656\");\n          __f__(\"log\", \"get back.\", \" at pages/first/index.vue:657\");\n          // that.res_data1 = res.data['data'];\n          // that.res_time = res.data['time'];\n\n          that.all_count = res.data[\"all_count\"];\n          for (var i = 0; i < that.charts_len; i++) {\n            Data.Line1.series[0].data[i] = parseFloat(res.data[i]['data'][0]);\n            Data.Line2.series[0].data[i] = parseFloat(res.data[i]['data'][1]);\n            Data.Line3.series[0].data[i] = parseFloat(res.data[i]['data'][2]);\n            Data.Line4.series[0].data[i] = parseFloat(res.data[i]['data'][3]);\n            Data.Line5.series[0].data[i] = parseFloat(res.data[i]['data'][4]);\n            Data.Line1.categories[i] = res.data[i]['time']; //data['datastreams'][4]['datapoints'].slice(-charts_len)[i]['at'].slice(5,19);\n            Data.Line2.categories[i] = res.data[i]['time']; //data['datastreams'][4]['datapoints'].slice(-charts_len)[i]['at'].slice(5,19);\n            Data.Line3.categories[i] = res.data[i]['time']; //data['datastreams'][4]['datapoints'].slice(-charts_len)[i]['at'].slice(5,19);\n            Data.Line4.categories[i] = res.data[i]['time']; //data['datastreams'][4]['datapoints'].slice(-charts_len)[i]['at'].slice(5,19);\n            Data.Line5.categories[i] = res.data[i]['time']; //data['datastreams'][4]['datapoints'].slice(-charts_len)[i]['at'].slice(5,19);\n            //console.log(my_data[1][i]);\n          }\n\n          _this2.changeData();\n        }\n      });\n    },\n    showLineA: function showLineA(canvasId, chartData) {\n      var pixelRatio = 0.9;\n      canvaLineA = new _wxcharts.default({\n        canvasId: canvasId,\n        type: 'line',\n        fontSize: 10,\n        legend: true,\n        background: '#FFFFFF',\n        pixelRatio: pixelRatio,\n        //_self.pixelRatio,\n        categories: chartData.categories,\n        series: chartData.series,\n        animation: false,\n        enableScroll: false,\n        //true,//开启图表拖拽功能\n        xAxis: {\n          disableGrid: true,\n          itemCount: this.charts_len //可不填写，配合enableScroll图表拖拽功能使用，x轴单屏显示数据的数量，默认为5个\n          //scrollBackgroundColor:'#F7F7FF',//可不填写，配合enableScroll图表拖拽功能使用，X轴滚动条背景颜色,默认为 #EFEBEF\n          //scrollColor:'#DEE7F7',//可不填写，配合enableScroll图表拖拽功能使用，X轴滚动条颜色,默认为 #A6A6A6\n        },\n\n        yAxis: {\n          type: 'value',\n          axisLabel: {\n            margin: uni.upx2px(400),\n            show: true,\n            interval: 'auto'\n          }\n          //disabled:true\n        },\n\n        grid: {\n          left: 450\n        },\n        width: _self.cWidth * pixelRatio,\n        //_self.pixelRatio,\n        height: _self.cHeight * pixelRatio,\n        //_self.pixelRatio,\n        dataLabel: false,\n        //显示数值与否\n        dataPointShape: true,\n        extra: {\n          lineStyle: 'straight'\n        }\n      });\n      // alert(_self.cWidth);\n      // alert(_self.cHeight);\n      // alert(_self.pixelRatio);\n    },\n    changeData: function changeData() {\n      //这里只做了柱状图数据动态更新，其他图表同理。\n      // canvaLineA.updateData({\n      // \tseries: Data.Line1.series,\n      // \tcategories: Data.Line1.categories\n      // });\n      this.showLineA(\"canvasLineA\", Data.Line1);\n      this.showLineA(\"canvasLineB\", Data.Line2);\n      this.showLineA(\"canvasLineC\", Data.Line3);\n      this.showLineA(\"canvasLineD\", Data.Line4);\n      this.showLineA(\"canvasLineE\", Data.Line5);\n    },\n    //翻页按键\n    //按键\n    click_last: function click_last(event) {\n      this.temp_index -= 1;\n      if (this.temp_index < 0) {\n        this.temp_index = 0;\n        // alert(\"已到头\")\n        uni.showToast({\n          title: \"已到头\",\n          icon: \"none\"\n        });\n      }\n      this.getandshow();\n    },\n    //按键\n    click_next: function click_next(event) {\n      if (this.temp_index >= parseInt(this.all_count / this.charts_len) - 1) {\n        // alert(\"已到头\")\n        uni.showToast({\n          title: \"已到头\",\n          icon: \"none\"\n        });\n      } else {\n        this.temp_index += 1;\n      }\n      this.getandshow();\n    },\n    //按键\n    click_jump: function click_jump(event) {\n      this.temp_index = parseInt(this.input_val[0]) - 1; //显示和传输差1\n      __f__(\"log\", this.temp_index, \" at pages/first/index.vue:768\");\n      if (this.temp_index < 0) {\n        this.temp_index = 0;\n      }\n      if (this.temp_index >= parseInt(this.all_count / this.charts_len) - 1) {\n        this.temp_index = parseInt(this.all_count / this.charts_len) - 1;\n      }\n      __f__(\"log\", this.temp_index, \" at pages/first/index.vue:775\");\n      this.getandshow();\n    }\n  }\n};\nexports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"], __webpack_require__(/*! @dcloudio/uni-mp-weixin/dist/mp.js */ 19)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18\n");

/***/ }),
/* 19 */
/*!*********************************************************!*\
  !*** ./node_modules/@dcloudio/uni-mp-weixin/dist/mp.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ 1);
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Behavior = Behavior;
exports.Component = Component;
exports.Page = Page;
exports.nextTick = exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ 2));
var _slicedToArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ 21));
var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 27));
var _PROP_DEFAULT_VALUES;
function parseData(data, vueComponentOptions) {
  if (!data) {
    return;
  }
  vueComponentOptions.mpOptions.data = data;
}
function parseComponents(vueComponentOptions) {
  vueComponentOptions.components = global.__wxVueOptions.components;
}
var _toString = Object.prototype.toString;
var hasOwnProperty = Object.prototype.hasOwnProperty;
function isFn(fn) {
  return typeof fn === 'function';
}
function isPlainObject(obj) {
  return _toString.call(obj) === '[object Object]';
}
function hasOwn(obj, key) {
  return hasOwnProperty.call(obj, key);
}
function noop() {}

/**
 * Create a cached version of a pure function.
 */
function cached(fn) {
  var cache = Object.create(null);
  return function cachedFn(str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
}

/**
 * Camelize a hyphen-delimited string.
 */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) {
    return c ? c.toUpperCase() : '';
  });
});
var SOURCE_KEY = '__data__';
var COMPONENT_LIFECYCLE = {
  created: 'onServiceCreated',
  attached: 'onServiceAttached',
  ready: 'mounted',
  moved: 'moved',
  detached: 'destroyed'
};
var COMPONENT_LIFECYCLE_KEYS = Object.keys(COMPONENT_LIFECYCLE);
var PAGE_LIFETIMES = {
  show: 'onPageShow',
  hide: 'onPageHide',
  resize: 'onPageResize'
};
var PAGE_LIFETIMES_KEYS = Object.keys(PAGE_LIFETIMES);
var PAGE_LIFECYCLE = ['onLoad', 'onShow', 'onReady', 'onHide', 'onUnload', 'onPullDownRefresh', 'onReachBottom', 'onShareAppMessage', 'onPageScroll', 'onResize', 'onTabItemTap'];
function parsePageMethods(mpComponentOptions, vueComponentOptions) {
  var methods = Object.create(null);
  Object.keys(mpComponentOptions).forEach(function (key) {
    var value = mpComponentOptions[key];
    if (isFn(value) && PAGE_LIFECYCLE.indexOf(key) === -1) {
      methods[key] = value;
    }
  });
  vueComponentOptions.methods = methods;
}
function parsePageLifecycle(mpComponentOptions, vueComponentOptions) {
  Object.keys(mpComponentOptions).forEach(function (key) {
    if (PAGE_LIFECYCLE.indexOf(key) !== -1) {
      vueComponentOptions[key] = mpComponentOptions[key];
    }
  });
}
function parsePage(mpComponentOptions) {
  var vueComponentOptions = {
    mixins: [],
    mpOptions: {}
  };
  parseComponents(vueComponentOptions);
  parseData(mpComponentOptions.data, vueComponentOptions);
  parsePageMethods(mpComponentOptions, vueComponentOptions);
  parsePageLifecycle(mpComponentOptions, vueComponentOptions);
  return vueComponentOptions;
}
function parseProperties(properties, vueComponentOptions) {
  if (!properties) {
    return;
  }
  vueComponentOptions.mpOptions.properties = properties;
}
function parseOptions(options, vueComponentOptions) {
  if (!options) {
    return;
  }
  vueComponentOptions.mpOptions.options = options;
}
function parseMethods(methods, vueComponentOptions) {
  if (!methods) {
    return;
  }
  if (methods.$emit) {
    console.warn('Method "$emit" conflicts with an existing Vue instance method');
    delete methods.$emit;
  }
  vueComponentOptions.methods = methods;
}
function parseLifecycle(mpComponentOptions, vueComponentOptions) {
  COMPONENT_LIFECYCLE_KEYS.forEach(function (name) {
    if (hasOwn(mpComponentOptions, name)) {
      (vueComponentOptions[COMPONENT_LIFECYCLE[name]] || (vueComponentOptions[COMPONENT_LIFECYCLE[name]] = [])).push(mpComponentOptions[name]);
    }
  });
}
var mpBehaviors = {
  'wx://form-field': {},
  'wx://component-export': {}
};
function callDefinitionFilter(mpComponentOptions) {
  var behaviors = mpComponentOptions.behaviors,
    definitionFilter = mpComponentOptions.definitionFilter;
  var behaviorDefinitionFilters = [];
  if (Array.isArray(behaviors)) {
    behaviors.forEach(function (behavior) {
      behavior = typeof behavior === 'string' ? mpBehaviors[behavior] : behavior;
      if (behavior.definitionFilter) {
        behaviorDefinitionFilters.push(behavior.definitionFilter);
        behavior.definitionFilter.call(null, mpComponentOptions, []);
      }
    });
  }
  if (isFn(definitionFilter)) {
    return function (defFields) {
      definitionFilter(defFields, behaviorDefinitionFilters);
    };
  }
}
function parseDefinitionFilter(mpComponentOptions, vueComponentOptions) {
  callDefinitionFilter(mpComponentOptions);
}
function parseBehavior(behavior) {
  var data = behavior.data,
    methods = behavior.methods,
    behaviors = behavior.behaviors,
    properties = behavior.properties;
  var vueComponentOptions = {
    watch: {},
    mpOptions: {
      mpObservers: []
    }
  };
  parseData(data, vueComponentOptions);
  parseMethods(methods, vueComponentOptions);
  parseBehaviors(behaviors, vueComponentOptions);
  parseProperties(properties, vueComponentOptions);
  parseLifecycle(behavior, vueComponentOptions);
  parseDefinitionFilter(behavior);
  return vueComponentOptions;
}
var BEHAVIORS = {
  'wx://form-field': {
    beforeCreate: function beforeCreate() {
      var mpOptions = this.$options.mpOptions;
      if (!mpOptions.properties) {
        mpOptions.properties = Object.create(null);
      }
      var props = mpOptions.properties;
      // TODO form submit,reset
      if (!hasOwn(props, 'name')) {
        props.name = {
          type: String
        };
      }
      if (!hasOwn(props, 'value')) {
        props.value = {
          type: String // 默认类型调整为 String,否则默认值为 null,导致一些自定义 input 显示不正确
        };
      }
    }
  }
};

function parseBehaviors(behaviors, vueComponentOptions) {
  if (!behaviors) {
    return;
  }
  behaviors.forEach(function (behavior) {
    if (typeof behavior === 'string') {
      BEHAVIORS[behavior] && vueComponentOptions.mixins.push(BEHAVIORS[behavior]);
    } else {
      vueComponentOptions.mixins.push(parseBehavior(behavior));
    }
  });
}
function parseSinglePath(path) {
  return path.split('.');
}
function parseMultiPaths(paths) {
  return paths.split(',').map(function (path) {
    return parseSinglePath(path);
  });
}
function parseObservers(observers, vueComponentOptions) {
  if (!observers) {
    return;
  }
  var mpObservers = vueComponentOptions.mpOptions.mpObservers;
  Object.keys(observers).forEach(function (path) {
    mpObservers.push({
      paths: parseMultiPaths(path),
      observer: observers[path]
    });
  });
}
function relative(from, to) {
  if (to.indexOf('/') === 0) {
    from = '';
  }
  var fromArr = from.split('/');
  var toArr = to.split('/');
  fromArr.pop();
  while (toArr.length) {
    var part = toArr.shift();
    if (part !== '' && part !== '.') {
      if (part !== '..') {
        fromArr.push(part);
      } else {
        fromArr.pop();
      }
    }
  }
  return fromArr.join('/');
}
function parseRelations(relations, vueComponentOptions) {
  if (!relations) {
    return;
  }
  Object.keys(relations).forEach(function (name) {
    var relation = relations[name];
    relation.name = name;
    relation.target = relation.target ? String(relation.target) : relative(global.__wxRoute, name);
  });
  vueComponentOptions.mpOptions.relations = relations;
}
function parseExternalClasses(externalClasses, vueComponentOptions) {
  if (!externalClasses) {
    return;
  }
  if (!Array.isArray(externalClasses)) {
    externalClasses = [externalClasses];
  }
  vueComponentOptions.mpOptions.externalClasses = externalClasses;
  if (!vueComponentOptions.mpOptions.properties) {
    vueComponentOptions.mpOptions.properties = Object.create(null);
  }
  externalClasses.forEach(function (externalClass) {
    vueComponentOptions.mpOptions.properties[camelize(externalClass)] = {
      type: String,
      value: ''
    };
  });
}
function parseLifetimes(lifetimes, vueComponentOptions) {
  if (!lifetimes) {
    return;
  }
  parseLifecycle(lifetimes, vueComponentOptions);
}
function parsePageLifetimes(pageLifetimes, vueComponentOptions) {
  if (!pageLifetimes) {
    return;
  }
  PAGE_LIFETIMES_KEYS.forEach(function (key) {
    var lifetimeFn = pageLifetimes[key];
    isFn(lifetimeFn) && (vueComponentOptions[PAGE_LIFETIMES[key]] = lifetimeFn);
  });
}
function parseComponent(mpComponentOptions) {
  var data = mpComponentOptions.data,
    options = mpComponentOptions.options,
    methods = mpComponentOptions.methods,
    behaviors = mpComponentOptions.behaviors,
    lifetimes = mpComponentOptions.lifetimes,
    observers = mpComponentOptions.observers,
    relations = mpComponentOptions.relations,
    properties = mpComponentOptions.properties,
    pageLifetimes = mpComponentOptions.pageLifetimes,
    externalClasses = mpComponentOptions.externalClasses;
  var vueComponentOptions = {
    mixins: [],
    props: {},
    watch: {},
    mpOptions: {
      mpObservers: []
    }
  };
  parseComponents(vueComponentOptions);
  parseData(data, vueComponentOptions);
  parseOptions(options, vueComponentOptions);
  parseMethods(methods, vueComponentOptions);
  parseBehaviors(behaviors, vueComponentOptions);
  parseLifetimes(lifetimes, vueComponentOptions);
  parseObservers(observers, vueComponentOptions);
  parseRelations(relations, vueComponentOptions);
  parseProperties(properties, vueComponentOptions);
  parsePageLifetimes(pageLifetimes, vueComponentOptions);
  parseExternalClasses(externalClasses, vueComponentOptions);
  parseLifecycle(mpComponentOptions, vueComponentOptions);
  parseDefinitionFilter(mpComponentOptions);
  return vueComponentOptions;
}
function initRelationHandlers(type, handler, target, ctx) {
  if (!handler) {
    return;
  }
  var name = "_$".concat(type, "Handlers");
  (ctx[name] || (ctx[name] = [])).push(function () {
    handler.call(ctx, target);
  });
}
function initLinkedHandlers(relation, target, ctx) {
  var type = 'linked';
  var name = relation.name;
  var relationNodes = ctx._$relationNodes || (ctx._$relationNodes = Object.create(null));
  (relationNodes[name] || (relationNodes[name] = [])).push(target);
  initRelationHandlers(type, relation[type], target, ctx);
}
function initUnlinkedHandlers(relation, target, ctx) {
  var type = 'unlinked';
  initRelationHandlers(type, relation[type], target, ctx);
}
function findParentRelation(parentVm, target, type) {
  var relations = parentVm && parentVm.$options.mpOptions && parentVm.$options.mpOptions.relations;
  if (!relations) {
    return [];
  }
  var name = Object.keys(relations).find(function (name) {
    var relation = relations[name];
    return relation.target === target && relation.type === type;
  });
  if (!name) {
    return [];
  }
  return [relations[name], parentVm];
}
function initParentRelation(vm, childRelation, match) {
  var _match = match(vm, vm.$options.mpOptions.path),
    _match2 = (0, _slicedToArray2.default)(_match, 2),
    parentRelation = _match2[0],
    parentVm = _match2[1];
  if (!parentRelation) {
    return;
  }
  initLinkedHandlers(parentRelation, vm, parentVm);
  initLinkedHandlers(childRelation, parentVm, vm);
  initUnlinkedHandlers(parentRelation, vm, parentVm);
  initUnlinkedHandlers(childRelation, parentVm, vm);
}
function initRelation(relation, vm) {
  var type = relation.type;
  if (type === 'parent') {
    initParentRelation(vm, relation, function matchParent(vm, target) {
      return findParentRelation(vm.$parent, target, 'child');
    });
  } else if (type === 'ancestor') {
    initParentRelation(vm, relation, function matchAncestor(vm, target) {
      var $parent = vm.$parent;
      while ($parent) {
        var ret = findParentRelation($parent, target, 'descendant');
        if (ret.length) {
          return ret;
        }
        $parent = $parent.$parent;
      }
      return [];
    });
  }
}
function initRelations(vm) {
  var _ref = vm.$options.mpOptions || {},
    relations = _ref.relations;
  if (!relations) {
    return;
  }
  Object.keys(relations).forEach(function (name) {
    initRelation(relations[name], vm);
  });
}
function handleRelations(vm, type) {
  // TODO 需要移除 relationNodes
  var handlers = vm["_$".concat(type, "Handlers")];
  if (!handlers) {
    return;
  }
  handlers.forEach(function (handler) {
    return handler();
  });
}
var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};
function proxy(target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter() {
    return this[sourceKey][key];
  };
  sharedPropertyDefinition.set = function proxySetter(val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target, key, sharedPropertyDefinition);
}
function setDataByExprPath(exprPath, value, data) {
  var keys = exprPath.replace(/\[(\d+?)\]/g, '.$1').split('.');
  keys.reduce(function (obj, key, idx) {
    if (idx === keys.length - 1) {
      obj[key] = value;
    } else {
      if (typeof obj[key] === 'undefined') {
        obj[key] = {};
      }
      return obj[key];
    }
  }, data);
  return keys.length === 1;
}
function setData(data, callback) {
  var _this = this;
  if (!isPlainObject(data)) {
    return;
  }
  Object.keys(data).forEach(function (key) {
    if (setDataByExprPath(key, data[key], _this.data)) {
      !hasOwn(_this, key) && proxy(_this, SOURCE_KEY, key);
    }
  });
  this.$forceUpdate();
  isFn(callback) && this.$nextTick(callback);
}

/**
 * https://github.com/swan-team/swan-js/blob/61e2a63f7aa576b5daafbe77fdfa7c65b977060c/src/utils/index.js
 */

var _toString$1 = Object.prototype.toString;
/**
 * 深度assign的函数
 * @param {Object} targetObject 要被拷贝的目标对象
 * @param {Object} originObject 拷贝的源对象
 * @return {Object} merge后的对象
 */
var deepAssign = function deepAssign() {
  var targetObject = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var originObject = arguments.length > 1 ? arguments[1] : undefined;
  var originType = _toString$1.call(originObject);
  if (originType === '[object Array]') {
    targetObject = originObject.slice(0);
    return targetObject;
  } else if (originType === '[object Object]') {
    for (var key in originObject) {
      targetObject[key] = deepAssign(targetObject[key], originObject[key]);
    }
    return targetObject;
  } else if (originType === '[object Date]') {
    return new Date(originObject.getTime());
  } else if (originType === '[object RegExp]') {
    var target = String(originObject);
    var lastIndex = target.lastIndexOf('/');
    return new RegExp(target.slice(1, lastIndex), target.slice(lastIndex + 1));
  }
  return originObject;
};

/**
 * 深度拷贝逻辑，不同于lodash等库，但是与微信一致
 * @param {*} [originObj] 原对象
 * @return {Object|Array} 拷贝结果
 */
var deepClone = function deepClone(originObj) {
  return deepAssign(_toString$1.call(originObj) === '[object Array]' ? [] : {}, originObj);
};
var PROP_DEFAULT_VALUES = (_PROP_DEFAULT_VALUES = {}, (0, _defineProperty2.default)(_PROP_DEFAULT_VALUES, String, ''), (0, _defineProperty2.default)(_PROP_DEFAULT_VALUES, Number, 0), (0, _defineProperty2.default)(_PROP_DEFAULT_VALUES, Boolean, false), (0, _defineProperty2.default)(_PROP_DEFAULT_VALUES, Object, null), (0, _defineProperty2.default)(_PROP_DEFAULT_VALUES, Array, []), (0, _defineProperty2.default)(_PROP_DEFAULT_VALUES, null, null), _PROP_DEFAULT_VALUES);
function getDefaultVal(propType) {
  return PROP_DEFAULT_VALUES[propType];
}
function getPropertyVal(options) {
  if (isPlainObject(options)) {
    if (hasOwn(options, 'value')) {
      return options.value;
    }
    return getDefaultVal(options.type);
  }
  return getDefaultVal(options);
}
function getType(propOptions) {
  return isPlainObject(propOptions) ? propOptions.type : propOptions;
}
function validateProp(key, propsOptions, propsData, vm) {
  var value = propsData[key];
  if (value !== undefined) {
    var propOptions = propsOptions[key];
    var type = getType(propOptions);
    value = formatVal(value, type);
    var observer = propOptions && propOptions.observer;
    if (observer) {
      // 初始化时,异步触发 observer,否则 observer 中无法访问 methods 或其他
      setTimeout(function () {
        observe(observer, vm, value);
      }, 4);
    }
    return value;
  }
  return getPropertyVal(propsOptions[key]);
}
function formatVal(val, type) {
  if (type === Boolean) {
    return !!val;
  } else if (type === String) {
    return String(val);
  }
  return val;
}
function observe(observer, vm, newVal, oldVal) {
  try {
    if (typeof observer === 'function') {
      observer.call(vm, newVal, oldVal);
    } else if (typeof observer === 'string' && typeof vm[observer] === 'function') {
      vm[observer](newVal, oldVal);
    }
  } catch (err) {
    console.error("execute observer ".concat(observer, " callback fail! err: ").concat(err));
  }
}
function initProperties(vm, instanceData) {
  var properties = vm.$options.mpOptions.properties;
  if (!properties) {
    return;
  }
  var propsData = deepClone(vm.$options.propsData) || {};
  var _loop = function _loop(key) {
    var observer = isPlainObject(properties[key]) ? properties[key].observer : false;
    var value = validateProp(key, properties, propsData, vm);
    Object.defineProperty(instanceData, key, {
      enumerable: true,
      configurable: true,
      get: function get() {
        return value;
      },
      set: function set(newVal) {
        var oldVal = value;
        /* eslint-disable no-self-compare */
        if (newVal === value || newVal !== newVal && value !== value) {
          return;
        }
        // TODO 临时方案,clone array
        value = Array.isArray(newVal) ? newVal.slice(0) : newVal;
        if (observer) {
          observe(observer, vm, newVal, oldVal);
        }
        // 触发渲染
        vm.$forceUpdate();
      }
    });
  };
  for (var key in properties) {
    _loop(key);
  }
}
function updateProperties(vm) {
  var properties = vm.$options.mpOptions && vm.$options.mpOptions.properties;
  var propsData = vm.$options.propsData;
  if (propsData && properties) {
    Object.keys(properties).forEach(function (key) {
      if (hasOwn(propsData, key)) {
        vm[key] = formatVal(propsData[key], getType(properties[key]));
      }
    });
  }
}
function initState(vm) {
  var instanceData = JSON.parse(JSON.stringify(vm.$options.mpOptions.data || {}));
  vm[SOURCE_KEY] = instanceData;
  var propertyDefinition = {
    get: function get() {
      return vm[SOURCE_KEY];
    },
    set: function set(value) {
      vm[SOURCE_KEY] = value;
    }
  };
  Object.defineProperties(vm, {
    data: propertyDefinition,
    properties: propertyDefinition
  });
  vm.setData = setData;
  initProperties(vm, instanceData);
  Object.keys(instanceData).forEach(function (key) {
    proxy(vm, SOURCE_KEY, key);
  });
}
function initMethods(vm) {
  var oldEmit = vm.$emit;
  vm.triggerEvent = function (eventName, detail, options) {
    var target = {
      dataset: vm.$el.dataset
    };
    var event = {
      target: target,
      currentTarget: target,
      detail: detail,
      preventDefault: noop,
      stopPropagation: noop
    };
    oldEmit.call(vm, eventName, event);
  };
  // 主要是Vant 自己封装了 $emit,放到 methods 中会触发 Vue 的警告,索性,框架直接重写该方法
  vm.$emit = function () {
    vm.triggerEvent.apply(vm, arguments);
  };
  vm.getRelationNodes = function (relationKey) {
    // 需要过滤已被销毁的vm
    /* eslint-disable  no-mixed-operators */
    return (vm._$relationNodes && vm._$relationNodes[relationKey] || []).filter(function (vm) {
      return !vm._isDestroyed;
    });
  };
  vm._$updateProperties = updateProperties;
}
function handleObservers(vm) {
  var watch = vm.$options.watch;
  if (!watch) {
    return;
  }
  Object.keys(watch).forEach(function (name) {
    var observer = watch[name];
    if (observer.mounted) {
      var val = vm[name];
      var handler = observer.handler;
      if (typeof handler === 'string') {
        handler = vm[handler];
      }
      handler && handler.call(vm, val, val);
    }
  });
}
var polyfill = {
  beforeCreate: function beforeCreate() {
    // 取消 development 时的 Proxy,避免小程序组件模板中使用尚未定义的属性告警
    this._renderProxy = this;
    this._$self = this;
    this._$noop = noop;
  },
  created: function created() {
    // properties 中可能会访问 methods,故需要在 created 中初始化
    initState(this);
    initMethods(this);
    initRelations(this);
  },
  mounted: function mounted() {
    handleObservers(this);
  },
  destroyed: function destroyed() {
    handleRelations(this, 'unlinked');
  }
};
global.__wxRoute = '';
global.__wxComponents = Object.create(null);
global.__wxVueOptions = Object.create(null);
function Page(options) {
  var pageOptions = parsePage(options);
  pageOptions.mixins.unshift(polyfill);
  pageOptions.mpOptions.path = global.__wxRoute;
  global.__wxComponents[global.__wxRoute] = pageOptions;
}
function initRelationsHandler(vueComponentOptions) {
  // linked 需要在当前组件 attached 之后再执行
  if (!vueComponentOptions.onServiceAttached) {
    vueComponentOptions.onServiceAttached = [];
  }
  vueComponentOptions.onServiceAttached.push(function onServiceAttached() {
    handleRelations(this, 'linked');
  });
}
function Component(options) {
  var componentOptions = parseComponent(options);
  componentOptions.mixins.unshift(polyfill);
  componentOptions.mpOptions.path = global.__wxRoute;
  initRelationsHandler(componentOptions);
  global.__wxComponents[global.__wxRoute] = componentOptions;
}
function Behavior(options) {
  return options;
}
var nextTick = _vue.default.nextTick;
exports.nextTick = nextTick;
var index = uni.__$wx__;
var _default = index;
exports.default = _default;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 20)))

/***/ }),
/* 20 */
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 21 */
/*!**************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/slicedToArray.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayWithHoles = __webpack_require__(/*! ./arrayWithHoles.js */ 22);
var iterableToArrayLimit = __webpack_require__(/*! ./iterableToArrayLimit.js */ 23);
var unsupportedIterableToArray = __webpack_require__(/*! ./unsupportedIterableToArray.js */ 24);
var nonIterableRest = __webpack_require__(/*! ./nonIterableRest.js */ 26);
function _slicedToArray(arr, i) {
  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
}
module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),
/* 22 */
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayWithHoles.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),
/* 23 */
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _iterableToArrayLimit(arr, i) {
  var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
  if (null != _i) {
    var _s,
      _e,
      _x,
      _r,
      _arr = [],
      _n = !0,
      _d = !1;
    try {
      if (_x = (_i = _i.call(arr)).next, 0 === i) {
        if (Object(_i) !== _i) return;
        _n = !1;
      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0) {
        ;
      }
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),
/* 24 */
/*!***************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeToArray = __webpack_require__(/*! ./arrayLikeToArray.js */ 25);
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
}
module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),
/* 25 */
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayLikeToArray.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),
/* 26 */
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/nonIterableRest.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),
/* 27 */
/*!**********************!*\
  !*** external "Vue" ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = Vue;

/***/ }),
/* 28 */
/*!********************************************************************!*\
  !*** C:/Users/W/Desktop/remotecontrol/static/u-charts/u-charts.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {/*\r\n * uCharts v1.7.0.8\r\n * uni-app平台高性能跨全端图表，支持H5、APP、小程序（微信/支付宝/百度/头条）\r\n * Copyright (c) 2019 QIUN秋云 https://www.ucharts.cn All rights reserved.\r\n * Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )\r\n * \r\n * uCharts官方网站\r\n * https://www.uCharts.cn\r\n * \r\n * 开源地址:\r\n * https://gitee.com/uCharts/uCharts\r\n * \r\n * uni-app插件市场地址：\r\n * http://ext.dcloud.net.cn/plugin?id=271\r\n * \r\n * \r\n */\n\n\n\nvar _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ 1);\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ 4));\nvar config = {\n  yAxisWidth: 15,\n  yAxisSplit: 5,\n  xAxisHeight: 15,\n  xAxisLineHeight: 15,\n  legendHeight: 15,\n  yAxisTitleWidth: 15,\n  padding: 12,\n  pixelRatio: 1,\n  //适配H5高分屏\n  rotate: false,\n  //横屏模式\n  columePadding: 3,\n  fontSize: 13,\n  //dataPointShape: ['diamond', 'circle', 'triangle', 'rect'],\n  dataPointShape: ['circle', 'circle', 'circle', 'circle'],\n  //仿F2图例样式改为圆点\n  colors: ['#1890ff', '#2fc25b', '#facc14', '#f04864', '#8543e0', '#90ed7d'],\n  pieChartLinePadding: 15,\n  pieChartTextPadding: 5,\n  xAxisTextPadding: 3,\n  titleColor: '#333333',\n  titleFontSize: 20,\n  subtitleColor: '#999999',\n  subtitleFontSize: 15,\n  toolTipPadding: 3,\n  toolTipBackground: '#000000',\n  toolTipOpacity: 0.7,\n  toolTipLineHeight: 20,\n  radarGridCount: 3,\n  radarLabelTextMargin: 15,\n  gaugeLabelTextMargin: 15\n};\n\n// Object.assign polyfill\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\nfunction assign(target, varArgs) {\n  if (target == null) {\n    // TypeError if undefined or null\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n  var to = Object(target);\n  for (var index = 1; index < arguments.length; index++) {\n    var nextSource = arguments[index];\n    if (nextSource != null) {\n      // Skip over if undefined or null\n      for (var nextKey in nextSource) {\n        // Avoid bugs when hasOwnProperty is shadowed\n        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n          to[nextKey] = nextSource[nextKey];\n        }\n      }\n    }\n  }\n  return to;\n}\nvar util = {\n  toFixed: function toFixed(num, limit) {\n    limit = limit || 2;\n    if (this.isFloat(num)) {\n      num = num.toFixed(limit);\n    }\n    return num;\n  },\n  isFloat: function isFloat(num) {\n    return num % 1 !== 0;\n  },\n  approximatelyEqual: function approximatelyEqual(num1, num2) {\n    return Math.abs(num1 - num2) < 1e-10;\n  },\n  isSameSign: function isSameSign(num1, num2) {\n    return Math.abs(num1) === num1 && Math.abs(num2) === num2 || Math.abs(num1) !== num1 && Math.abs(num2) !== num2;\n  },\n  isSameXCoordinateArea: function isSameXCoordinateArea(p1, p2) {\n    return this.isSameSign(p1.x, p2.x);\n  },\n  isCollision: function isCollision(obj1, obj2) {\n    obj1.end = {};\n    obj1.end.x = obj1.start.x + obj1.width;\n    obj1.end.y = obj1.start.y - obj1.height;\n    obj2.end = {};\n    obj2.end.x = obj2.start.x + obj2.width;\n    obj2.end.y = obj2.start.y - obj2.height;\n    var flag = obj2.start.x > obj1.end.x || obj2.end.x < obj1.start.x || obj2.end.y > obj1.start.y || obj2.start.y < obj1.end.y;\n    return !flag;\n  }\n};\n\n// hex 转 rgba\nfunction hexToRgb(hexValue, opc) {\n  var rgx = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  var hex = hexValue.replace(rgx, function (m, r, g, b) {\n    return r + r + g + g + b + b;\n  });\n  var rgb = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  var r = parseInt(rgb[1], 16);\n  var g = parseInt(rgb[2], 16);\n  var b = parseInt(rgb[3], 16);\n  return 'rgba(' + r + ',' + g + ',' + b + ',' + opc + ')';\n}\nfunction findRange(num, type, limit) {\n  if (isNaN(num)) {\n    throw new Error('[wxCharts] unvalid series data!');\n  }\n  limit = limit || 10;\n  type = type ? type : 'upper';\n  var multiple = 1;\n  while (limit < 1) {\n    limit *= 10;\n    multiple *= 10;\n  }\n  if (type === 'upper') {\n    num = Math.ceil(num * multiple);\n  } else {\n    num = Math.floor(num * multiple);\n  }\n  while (num % limit !== 0) {\n    if (type === 'upper') {\n      num++;\n    } else {\n      num--;\n    }\n  }\n  return num / multiple;\n}\nfunction calCandleMA(dayArr, nameArr, colorArr, kdata) {\n  var seriesTemp = [];\n  for (var k = 0; k < dayArr.length; k++) {\n    var seriesItem = {\n      data: [],\n      name: nameArr[k],\n      color: colorArr[k]\n    };\n    for (var i = 0, len = kdata.length; i < len; i++) {\n      if (i < dayArr[k]) {\n        seriesItem.data.push(null);\n        continue;\n      }\n      var sum = 0;\n      for (var j = 0; j < dayArr[k]; j++) {\n        sum += kdata[i - j][1];\n      }\n      seriesItem.data.push(+(sum / dayArr[k]).toFixed(3));\n    }\n    seriesTemp.push(seriesItem);\n  }\n  return seriesTemp;\n}\nfunction calValidDistance(distance, chartData, config, opts) {\n  var dataChartAreaWidth = opts.width - config.padding - chartData.xAxisPoints[0];\n  var dataChartWidth = chartData.eachSpacing * opts.categories.length;\n  var validDistance = distance;\n  if (distance >= 0) {\n    validDistance = 0;\n  } else if (Math.abs(distance) >= dataChartWidth - dataChartAreaWidth) {\n    validDistance = dataChartAreaWidth - dataChartWidth;\n  }\n  return validDistance;\n}\nfunction isInAngleRange(angle, startAngle, endAngle) {\n  function adjust(angle) {\n    while (angle < 0) {\n      angle += 2 * Math.PI;\n    }\n    while (angle > 2 * Math.PI) {\n      angle -= 2 * Math.PI;\n    }\n    return angle;\n  }\n  angle = adjust(angle);\n  startAngle = adjust(startAngle);\n  endAngle = adjust(endAngle);\n  if (startAngle > endAngle) {\n    endAngle += 2 * Math.PI;\n    if (angle < startAngle) {\n      angle += 2 * Math.PI;\n    }\n  }\n  return angle >= startAngle && angle <= endAngle;\n}\nfunction calRotateTranslate(x, y, h) {\n  var xv = x;\n  var yv = h - y;\n  var transX = xv + (h - yv - xv) / Math.sqrt(2);\n  transX *= -1;\n  var transY = (h - yv) * (Math.sqrt(2) - 1) - (h - yv - xv) / Math.sqrt(2);\n  return {\n    transX: transX,\n    transY: transY\n  };\n}\nfunction createCurveControlPoints(points, i) {\n  function isNotMiddlePoint(points, i) {\n    if (points[i - 1] && points[i + 1]) {\n      return points[i].y >= Math.max(points[i - 1].y, points[i + 1].y) || points[i].y <= Math.min(points[i - 1].y, points[i + 1].y);\n    } else {\n      return false;\n    }\n  }\n  var a = 0.2;\n  var b = 0.2;\n  var pAx = null;\n  var pAy = null;\n  var pBx = null;\n  var pBy = null;\n  if (i < 1) {\n    pAx = points[0].x + (points[1].x - points[0].x) * a;\n    pAy = points[0].y + (points[1].y - points[0].y) * a;\n  } else {\n    pAx = points[i].x + (points[i + 1].x - points[i - 1].x) * a;\n    pAy = points[i].y + (points[i + 1].y - points[i - 1].y) * a;\n  }\n  if (i > points.length - 3) {\n    var last = points.length - 1;\n    pBx = points[last].x - (points[last].x - points[last - 1].x) * b;\n    pBy = points[last].y - (points[last].y - points[last - 1].y) * b;\n  } else {\n    pBx = points[i + 1].x - (points[i + 2].x - points[i].x) * b;\n    pBy = points[i + 1].y - (points[i + 2].y - points[i].y) * b;\n  }\n\n  // fix issue https://github.com/xiaolin3303/wx-charts/issues/79\n  if (isNotMiddlePoint(points, i + 1)) {\n    pBy = points[i + 1].y;\n  }\n  if (isNotMiddlePoint(points, i)) {\n    pAy = points[i].y;\n  }\n  return {\n    ctrA: {\n      x: pAx,\n      y: pAy\n    },\n    ctrB: {\n      x: pBx,\n      y: pBy\n    }\n  };\n}\nfunction convertCoordinateOrigin(x, y, center) {\n  return {\n    x: center.x + x,\n    y: center.y - y\n  };\n}\nfunction avoidCollision(obj, target) {\n  if (target) {\n    // is collision test\n    while (util.isCollision(obj, target)) {\n      if (obj.start.x > 0) {\n        obj.start.y--;\n      } else if (obj.start.x < 0) {\n        obj.start.y++;\n      } else {\n        if (obj.start.y > 0) {\n          obj.start.y++;\n        } else {\n          obj.start.y--;\n        }\n      }\n    }\n  }\n  return obj;\n}\nfunction fillSeriesColor(series, config) {\n  var index = 0;\n  return series.map(function (item) {\n    if (!item.color) {\n      item.color = config.colors[index];\n      index = (index + 1) % config.colors.length;\n    }\n    return item;\n  });\n}\nfunction fillSeriesType(series, opts) {\n  return series.map(function (item) {\n    if (!item.type) {\n      item.type = opts.type;\n    }\n    return item;\n  });\n}\nfunction getDataRange(minData, maxData) {\n  var limit = 0;\n  var range = maxData - minData;\n  if (range >= 10000) {\n    limit = 1000;\n  } else if (range >= 1000) {\n    limit = 100;\n  } else if (range >= 100) {\n    limit = 10;\n  } else if (range >= 10) {\n    limit = 5;\n  } else if (range >= 1) {\n    limit = 1;\n  } else if (range >= 0.1) {\n    limit = 0.1;\n  } else {\n    limit = 0.01;\n  }\n  return {\n    minRange: findRange(minData, 'lower', limit),\n    maxRange: findRange(maxData, 'upper', limit)\n  };\n}\nfunction measureText(text) {\n  var fontSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : config.fontSize;\n\n  // wx canvas 未实现measureText方法, 此处自行实现\n  // 适配修改初始字体10px为其他大小的方法\n  text = String(text);\n  var text = text.split('');\n  var width = 0;\n  text.forEach(function (item) {\n    if (/[a-zA-Z]/.test(item)) {\n      width += 7;\n    } else if (/[0-9]/.test(item)) {\n      width += 5.5;\n    } else if (/\\./.test(item)) {\n      width += 2.7;\n    } else if (/-/.test(item)) {\n      width += 3.25;\n    } else if (/[\\u4e00-\\u9fa5]/.test(item)) {\n      width += 10;\n    } else if (/\\(|\\)/.test(item)) {\n      width += 3.73;\n    } else if (/\\s/.test(item)) {\n      width += 2.5;\n    } else if (/%/.test(item)) {\n      width += 8;\n    } else {\n      width += 10;\n    }\n  });\n  return width * fontSize / 10;\n}\nfunction dataCombine(series) {\n  return series.reduce(function (a, b) {\n    return (a.data ? a.data : a).concat(b.data);\n  }, []);\n}\nfunction dataCombineStack(series) {\n  var sum = new Array(series[0].data.length);\n  for (var j = 0; j < sum.length; j++) {\n    sum[j] = 0;\n  }\n  for (var i = 0; i < series.length; i++) {\n    for (var j = 0; j < sum.length; j++) {\n      sum[j] += series[i].data[j];\n    }\n  }\n  return series.reduce(function (a, b) {\n    return (a.data ? a.data : a).concat(b.data).concat(sum);\n  }, []);\n}\nfunction getTouches(touches, opts, e) {\n  var x, y;\n  if (touches.clientX) {\n    if (opts.rotate) {\n      //适配横屏\n      y = opts.height - touches.clientX * opts.pixelRatio;\n      x = (touches.pageY - e.mp.currentTarget.offsetTop - opts.height / opts.pixelRatio / 2 * (opts.pixelRatio - 1)) * opts.pixelRatio;\n    } else {\n      x = touches.clientX * opts.pixelRatio;\n      y = (touches.pageY - e.mp.currentTarget.offsetTop - opts.height / opts.pixelRatio / 2 * (opts.pixelRatio - 1)) * opts.pixelRatio;\n    }\n  } else {\n    if (opts.rotate) {\n      //适配横屏\n      y = opts.height - touches.x * opts.pixelRatio;\n      x = touches.y * opts.pixelRatio;\n    } else {\n      x = touches.x * opts.pixelRatio;\n      y = touches.y * opts.pixelRatio;\n    }\n  }\n  return {\n    x: x,\n    y: y\n  };\n}\nfunction getSeriesDataItem(series, index) {\n  var data = [];\n  series.forEach(function (item) {\n    if (item.data[index] !== null && typeof item.data[index] !== 'undefined') {\n      var seriesItem = {};\n      seriesItem.color = item.color;\n      seriesItem.type = item.type;\n      seriesItem.style = item.style;\n      seriesItem.shape = item.shape;\n      seriesItem.disableLegend = item.disableLegend;\n      seriesItem.name = item.name;\n      seriesItem.data = item.format ? item.format(item.data[index]) : item.data[index];\n      data.push(seriesItem);\n    }\n  });\n  return data;\n}\nfunction getMaxTextListLength(list) {\n  var lengthList = list.map(function (item) {\n    return measureText(item);\n  });\n  return Math.max.apply(null, lengthList);\n}\nfunction getRadarCoordinateSeries(length) {\n  var eachAngle = 2 * Math.PI / length;\n  var CoordinateSeries = [];\n  for (var i = 0; i < length; i++) {\n    CoordinateSeries.push(eachAngle * i);\n  }\n  return CoordinateSeries.map(function (item) {\n    return -1 * item + Math.PI / 2;\n  });\n}\nfunction getToolTipData(seriesData, calPoints, index, categories) {\n  var option = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  var textList = seriesData.map(function (item) {\n    return {\n      text: option.format ? option.format(item, categories[index]) : item.name + ': ' + item.data,\n      color: item.color\n    };\n  });\n  var validCalPoints = [];\n  var offset = {\n    x: 0,\n    y: 0\n  };\n  calPoints.forEach(function (points) {\n    if (typeof points[index] !== 'undefined' && points[index] !== null) {\n      validCalPoints.push(points[index]);\n    }\n  });\n  validCalPoints.forEach(function (item) {\n    offset.x = Math.round(item.x);\n    offset.y += item.y;\n  });\n  offset.y /= validCalPoints.length;\n  return {\n    textList: textList,\n    offset: offset\n  };\n}\nfunction getMixToolTipData(seriesData, calPoints, index, categories) {\n  var option = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  var textList = seriesData.map(function (item) {\n    return {\n      text: option.format ? option.format(item, categories[index]) : item.name + ': ' + item.data,\n      color: item.color,\n      disableLegend: item.disableLegend ? true : false\n    };\n  });\n  textList = textList.filter(function (item) {\n    if (item.disableLegend !== true) {\n      return item;\n    }\n  });\n  var validCalPoints = [];\n  var offset = {\n    x: 0,\n    y: 0\n  };\n  calPoints.forEach(function (points) {\n    if (typeof points[index] !== 'undefined' && points[index] !== null) {\n      validCalPoints.push(points[index]);\n    }\n  });\n  validCalPoints.forEach(function (item) {\n    offset.x = Math.round(item.x);\n    offset.y += item.y;\n  });\n  offset.y /= validCalPoints.length;\n  return {\n    textList: textList,\n    offset: offset\n  };\n}\nfunction getCandleToolTipData(series, seriesData, calPoints, index, categories, extra) {\n  var option = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n  var upColor = extra.color.upFill;\n  var downColor = extra.color.downFill;\n  //颜色顺序为开盘，收盘，最低，最高\n  var color = [upColor, upColor, downColor, upColor];\n  var textList = [];\n  var text0 = {\n    text: categories[index],\n    color: null\n  };\n  textList.push(text0);\n  seriesData.map(function (item) {\n    //console.log(color)\n    if (index == 0 && item.data[1] - item.data[0] < 0) {\n      color[1] = downColor;\n    } else {\n      if (item.data[0] < series[index - 1][1]) {\n        color[0] = downColor;\n      }\n      if (item.data[1] < item.data[0]) {\n        color[1] = downColor;\n      }\n      if (item.data[2] > series[index - 1][1]) {\n        color[2] = upColor;\n      }\n      if (item.data[3] < series[index - 1][1]) {\n        color[3] = downColor;\n      }\n    }\n    var text1 = {\n      text: '开盘：' + item.data[0],\n      color: color[0]\n    };\n    var text2 = {\n      text: '收盘：' + item.data[1],\n      color: color[1]\n    };\n    var text3 = {\n      text: '最低：' + item.data[2],\n      color: color[2]\n    };\n    var text4 = {\n      text: '最高：' + item.data[3],\n      color: color[3]\n    };\n    textList.push(text1, text2, text3, text4);\n  });\n  var validCalPoints = [];\n  var offset = {\n    x: 0,\n    y: 0\n  };\n  calPoints.forEach(function (points) {\n    if (typeof points[index] !== 'undefined' && points[index] !== null) {\n      validCalPoints.push(points[index]);\n    }\n  });\n  offset.x = Math.round(validCalPoints[0][0].x);\n  return {\n    textList: textList,\n    offset: offset\n  };\n}\nfunction findCurrentIndex(currentPoints, xAxisPoints, opts, config) {\n  var offset = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  var currentIndex = -1;\n  if (isInExactChartArea(currentPoints, opts, config)) {\n    xAxisPoints.forEach(function (item, index) {\n      if (currentPoints.x + offset > item) {\n        currentIndex = index;\n      }\n    });\n  }\n  return currentIndex;\n}\nfunction isInExactChartArea(currentPoints, opts, config) {\n  return currentPoints.x < opts.width - config.padding && currentPoints.x > config.padding + config.yAxisWidth + config.yAxisTitleWidth && currentPoints.y > config.padding && currentPoints.y < opts.height - config.legendHeight - config.xAxisHeight - config.padding;\n}\nfunction findRadarChartCurrentIndex(currentPoints, radarData, count) {\n  var eachAngleArea = 2 * Math.PI / count;\n  var currentIndex = -1;\n  if (isInExactPieChartArea(currentPoints, radarData.center, radarData.radius)) {\n    var fixAngle = function fixAngle(angle) {\n      if (angle < 0) {\n        angle += 2 * Math.PI;\n      }\n      if (angle > 2 * Math.PI) {\n        angle -= 2 * Math.PI;\n      }\n      return angle;\n    };\n    var angle = Math.atan2(radarData.center.y - currentPoints.y, currentPoints.x - radarData.center.x);\n    angle = -1 * angle;\n    if (angle < 0) {\n      angle += 2 * Math.PI;\n    }\n    var angleList = radarData.angleList.map(function (item) {\n      item = fixAngle(-1 * item);\n      return item;\n    });\n    angleList.forEach(function (item, index) {\n      var rangeStart = fixAngle(item - eachAngleArea / 2);\n      var rangeEnd = fixAngle(item + eachAngleArea / 2);\n      if (rangeEnd < rangeStart) {\n        rangeEnd += 2 * Math.PI;\n      }\n      if (angle >= rangeStart && angle <= rangeEnd || angle + 2 * Math.PI >= rangeStart && angle + 2 * Math.PI <= rangeEnd) {\n        currentIndex = index;\n      }\n    });\n  }\n  return currentIndex;\n}\nfunction findPieChartCurrentIndex(currentPoints, pieData) {\n  var currentIndex = -1;\n  if (isInExactPieChartArea(currentPoints, pieData.center, pieData.radius)) {\n    var angle = Math.atan2(pieData.center.y - currentPoints.y, currentPoints.x - pieData.center.x);\n    angle = -angle;\n    for (var i = 0, len = pieData.series.length; i < len; i++) {\n      var item = pieData.series[i];\n      if (isInAngleRange(angle, item._start_, item._start_ + item._proportion_ * 2 * Math.PI)) {\n        currentIndex = i;\n        break;\n      }\n    }\n  }\n  return currentIndex;\n}\nfunction isInExactPieChartArea(currentPoints, center, radius) {\n  return Math.pow(currentPoints.x - center.x, 2) + Math.pow(currentPoints.y - center.y, 2) <= Math.pow(radius, 2);\n}\nfunction splitPoints(points) {\n  var newPoints = [];\n  var items = [];\n  points.forEach(function (item, index) {\n    if (item !== null) {\n      items.push(item);\n    } else {\n      if (items.length) {\n        newPoints.push(items);\n      }\n      items = [];\n    }\n  });\n  if (items.length) {\n    newPoints.push(items);\n  }\n  return newPoints;\n}\nfunction calLegendData(series, opts, config) {\n  if (opts.legend === false) {\n    return {\n      legendList: [],\n      legendHeight: 0\n    };\n  }\n  //适配H5高分屏\n  var padding = 5 * opts.pixelRatio;\n  var marginTop = 8 * opts.pixelRatio;\n  var shapeWidth = 15 * opts.pixelRatio;\n  var legendList = [];\n  var widthCount = 0;\n  var currentRow = [];\n  series.forEach(function (item) {\n    var itemWidth = 3 * padding + shapeWidth + measureText(item.name || 'undefined');\n    if (widthCount + itemWidth > opts.width) {\n      legendList.push(currentRow);\n      widthCount = itemWidth;\n      currentRow = [item];\n    } else {\n      widthCount += itemWidth;\n      currentRow.push(item);\n    }\n  });\n  if (currentRow.length) {\n    legendList.push(currentRow);\n  }\n  return {\n    legendList: legendList,\n    legendHeight: legendList.length * (config.fontSize + marginTop) + padding\n  };\n}\nfunction calCategoriesData(categories, opts, config) {\n  var result = {\n    angle: 0,\n    xAxisHeight: config.xAxisHeight\n  };\n  var _getXAxisPoints = getXAxisPoints(categories, opts, config),\n    eachSpacing = _getXAxisPoints.eachSpacing;\n\n  // get max length of categories text\n\n  var categoriesTextLenth = categories.map(function (item) {\n    return measureText(item);\n  });\n  var maxTextLength = Math.max.apply(this, categoriesTextLenth);\n  if (opts.xAxis.rotateLabel == true && maxTextLength + 2 * config.xAxisTextPadding > eachSpacing) {\n    result.angle = 45 * Math.PI / 180;\n    result.xAxisHeight = 2 * config.xAxisTextPadding + maxTextLength * Math.sin(result.angle);\n  }\n  return result;\n}\nfunction getRadarDataPoints(angleList, center, radius, series, opts) {\n  var process = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  var radarOption = opts.extra.radar || {};\n  radarOption.max = radarOption.max || 0;\n  var maxData = Math.max(radarOption.max, Math.max.apply(null, dataCombine(series)));\n  var data = [];\n  series.forEach(function (each) {\n    var listItem = {};\n    listItem.color = each.color;\n    listItem.data = [];\n    each.data.forEach(function (item, index) {\n      var tmp = {};\n      tmp.angle = angleList[index];\n      tmp.proportion = item / maxData;\n      tmp.position = convertCoordinateOrigin(radius * tmp.proportion * process * Math.cos(tmp.angle), radius * tmp.proportion * process * Math.sin(tmp.angle), center);\n      listItem.data.push(tmp);\n    });\n    data.push(listItem);\n  });\n  return data;\n}\nfunction getPieDataPoints(series) {\n  var process = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var count = 0;\n  var _start_ = 0;\n  series.forEach(function (item) {\n    item.data = item.data === null ? 0 : item.data;\n    count += item.data;\n  });\n  series.forEach(function (item) {\n    item.data = item.data === null ? 0 : item.data;\n    if (count === 0) {\n      item._proportion_ = 1 / series.length;\n    } else {\n      item._proportion_ = item.data / count * process;\n    }\n  });\n  series.forEach(function (item) {\n    item._start_ = _start_;\n    _start_ += 2 * item._proportion_ * Math.PI;\n  });\n  return series;\n}\nfunction getArcbarDataPoints(series, arcbarOption) {\n  var process = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  if (process == 1) {\n    process = 0.999999;\n  }\n  series.forEach(function (item) {\n    item.data = item.data === null ? 0 : item.data;\n    var totalAngle;\n    if (arcbarOption.type == 'default') {\n      totalAngle = arcbarOption.startAngle - arcbarOption.endAngle + 1;\n    } else {\n      totalAngle = 2;\n    }\n    item._proportion_ = totalAngle * item.data * process + arcbarOption.startAngle;\n    if (item._proportion_ >= 2) {\n      item._proportion_ = item._proportion_ % 2;\n    }\n  });\n  return series;\n}\nfunction getGaugeAxisPoints(categories, startAngle, endAngle) {\n  var totalAngle = startAngle - endAngle + 1;\n  var tempStartAngle = startAngle;\n  for (var i = 0; i < categories.length; i++) {\n    categories[i].value = categories[i].value === null ? 0 : categories[i].value;\n    categories[i]._startAngle_ = tempStartAngle;\n    categories[i]._endAngle_ = totalAngle * categories[i].value + startAngle;\n    if (categories[i]._endAngle_ >= 2) {\n      categories[i]._endAngle_ = categories[i]._endAngle_ % 2;\n    }\n    tempStartAngle = categories[i]._endAngle_;\n  }\n  return categories;\n}\nfunction getGaugeDataPoints(series, categories, gaugeOption) {\n  var process = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  series.forEach(function (item) {\n    item.data = item.data === null ? 0 : item.data;\n    if (gaugeOption.pointer.color == 'auto') {\n      for (var i = 0; i < categories.length; i++) {\n        if (item.data <= categories[i].value) {\n          item.color = categories[i].color;\n          break;\n        }\n      }\n    } else {\n      item.color = gaugeOption.pointer.color;\n    }\n    var totalAngle = gaugeOption.startAngle - gaugeOption.endAngle + 1;\n    item._endAngle_ = totalAngle * item.data + gaugeOption.startAngle;\n    item._oldAngle_ = gaugeOption.oldAngle;\n    if (gaugeOption.oldAngle < gaugeOption.endAngle) {\n      item._oldAngle_ += 2;\n    }\n    if (item.data >= gaugeOption.oldData) {\n      item._proportion_ = (item._endAngle_ - item._oldAngle_) * process + gaugeOption.oldAngle;\n    } else {\n      item._proportion_ = item._oldAngle_ - (item._oldAngle_ - item._endAngle_) * process;\n    }\n    if (item._proportion_ >= 2) {\n      item._proportion_ = item._proportion_ % 2;\n    }\n  });\n  return series;\n}\nfunction getPieTextMaxLength(series) {\n  series = getPieDataPoints(series);\n  var maxLength = 0;\n  series.forEach(function (item) {\n    var text = item.format ? item.format(+item._proportion_.toFixed(2)) : util.toFixed(item._proportion_ * 100) + '%';\n    maxLength = Math.max(maxLength, measureText(text));\n  });\n  return maxLength;\n}\nfunction fixColumeData(points, eachSpacing, columnLen, index, config, opts) {\n  return points.map(function (item) {\n    if (item === null) {\n      return null;\n    }\n    item.width = (eachSpacing - 2 * config.columePadding) / columnLen;\n    if (opts.extra.column && opts.extra.column.width && +opts.extra.column.width > 0) {\n      // customer column width\n      item.width = Math.min(item.width, +opts.extra.column.width);\n    } else {\n      // default width should less tran 25px\n      // don't ask me why, I don't know\n      item.width = Math.min(item.width, 25);\n    }\n    item.x += (index + 0.5 - columnLen / 2) * item.width;\n    return item;\n  });\n}\nfunction fixColumeMeterData(points, eachSpacing, columnLen, index, config, opts, border) {\n  return points.map(function (item) {\n    if (item === null) {\n      return null;\n    }\n    item.width = eachSpacing - 2 * config.columePadding;\n    if (opts.extra.column && opts.extra.column.width && +opts.extra.column.width > 0) {\n      item.width = Math.min(item.width, +opts.extra.column.width);\n    } else {\n      item.width = Math.min(item.width, 25);\n    }\n    if (index > 0) {\n      item.width -= 2 * border;\n    }\n    return item;\n  });\n}\nfunction fixColumeStackData(points, eachSpacing, columnLen, index, config, opts, series) {\n  return points.map(function (item, indexn) {\n    if (item === null) {\n      return null;\n    }\n    item.width = eachSpacing - 2 * config.columePadding;\n    if (opts.extra.column && opts.extra.column.width && +opts.extra.column.width > 0) {\n      item.width = Math.min(item.width, +opts.extra.column.width);\n    } else {\n      item.width = Math.min(item.width, 25);\n    }\n    return item;\n  });\n}\nfunction getXAxisPoints(categories, opts, config) {\n  var yAxisTotalWidth = config.yAxisWidth + config.yAxisTitleWidth;\n  var spacingValid = opts.width - 2 * config.padding - yAxisTotalWidth;\n  var dataCount = opts.enableScroll ? Math.min(opts.xAxis.itemCount, categories.length) : categories.length;\n  var eachSpacing = spacingValid / dataCount;\n  var xAxisPoints = [];\n  var startX = config.padding + yAxisTotalWidth;\n  var endX = opts.width - config.padding;\n  categories.forEach(function (item, index) {\n    xAxisPoints.push(startX + index * eachSpacing);\n  });\n  if (opts.enableScroll === true) {\n    xAxisPoints.push(startX + categories.length * eachSpacing);\n  } else {\n    xAxisPoints.push(endX);\n  }\n  return {\n    xAxisPoints: xAxisPoints,\n    startX: startX,\n    endX: endX,\n    eachSpacing: eachSpacing\n  };\n}\nfunction getCandleDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config) {\n  var process = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1;\n  var points = [];\n  var validHeight = opts.height - 2 * config.padding - config.xAxisHeight - config.legendHeight;\n  data.forEach(function (item, index) {\n    if (item === null) {\n      points.push(null);\n    } else {\n      var cPoints = [];\n      item.forEach(function (items, indexs) {\n        var point = {};\n        point.x = xAxisPoints[index] + Math.round(eachSpacing / 2);\n        var value = items.value || items;\n        var height = validHeight * (value - minRange) / (maxRange - minRange);\n        height *= process;\n        point.y = opts.height - config.xAxisHeight - config.legendHeight - Math.round(height) - config.padding;\n        cPoints.push(point);\n      });\n      points.push(cPoints);\n    }\n  });\n  return points;\n}\nfunction getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config) {\n  var process = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1;\n  var points = [];\n  var validHeight = opts.height - 2 * config.padding - config.xAxisHeight - config.legendHeight;\n  data.forEach(function (item, index) {\n    if (item === null) {\n      points.push(null);\n    } else {\n      var point = {};\n      point.color = item.color;\n      point.x = xAxisPoints[index] + Math.round(eachSpacing / 2);\n      var value = item;\n      if ((0, _typeof2.default)(item) === 'object' && item !== null) {\n        value = item.value;\n      }\n      var height = validHeight * (value - minRange) / (maxRange - minRange);\n      height *= process;\n      point.y = opts.height - config.xAxisHeight - config.legendHeight - Math.round(height) - config.padding;\n      points.push(point);\n    }\n  });\n  return points;\n}\nfunction getStackDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, seriesIndex, stackSeries) {\n  var process = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 1;\n  var points = [];\n  var validHeight = opts.height - 2 * config.padding - config.xAxisHeight - config.legendHeight;\n  data.forEach(function (item, index) {\n    if (item === null) {\n      points.push(null);\n    } else {\n      var point = {};\n      point.color = item.color;\n      point.x = xAxisPoints[index] + Math.round(eachSpacing / 2);\n      if (seriesIndex > 0) {\n        var value = 0;\n        for (var i = 0; i <= seriesIndex; i++) {\n          value += stackSeries[i].data[index];\n        }\n        var value0 = value - item;\n        var height = validHeight * (value - minRange) / (maxRange - minRange);\n        var height0 = validHeight * (value0 - minRange) / (maxRange - minRange);\n      } else {\n        var value = item;\n        var height = validHeight * (value - minRange) / (maxRange - minRange);\n        var height0 = 0;\n      }\n      var heightc = height0;\n      height *= process;\n      heightc *= process;\n      point.y = opts.height - config.xAxisHeight - config.legendHeight - Math.round(height) - config.padding;\n      point.y0 = opts.height - config.xAxisHeight - config.legendHeight - Math.round(heightc) - config.padding;\n      points.push(point);\n    }\n  });\n  return points;\n}\nfunction getYAxisTextList(series, opts, config, stack) {\n  var data;\n  if (stack == 'stack') {\n    //data = dataCombine(series);\n    data = dataCombineStack(series);\n  } else {\n    data = dataCombine(series);\n  }\n  var sorted = [];\n  // remove null from data\n  data = data.filter(function (item) {\n    //return item !== null;\n    if ((0, _typeof2.default)(item) === 'object' && item !== null) {\n      //判断是否为数组\n      if (item.constructor == Array) {\n        return item !== null;\n      } else {\n        return item.value !== null;\n      }\n    } else {\n      return item !== null;\n    }\n  });\n  //var minData = Math.min.apply(this, data);\n  //var maxData = Math.max.apply(this, data);\n  data.map(function (item) {\n    if ((0, _typeof2.default)(item) === 'object') {\n      if (item.constructor == Array) {\n        item.map(function (subitem) {\n          sorted.push(subitem);\n        });\n      } else {\n        sorted.push(item.value);\n      }\n    } else {\n      sorted.push(item);\n    }\n    //typeof item === 'object' ? sorted.push(item.value) : sorted.push(item)\n  });\n\n  var minData = 0;\n  var maxData = 0;\n  if (sorted.length > 0) {\n    minData = Math.min.apply(this, sorted);\n    maxData = Math.max.apply(this, sorted);\n  }\n  if (typeof opts.yAxis.min === 'number') {\n    minData = Math.min(opts.yAxis.min, minData);\n  }\n  if (typeof opts.yAxis.max === 'number') {\n    maxData = Math.max(opts.yAxis.max, maxData);\n  }\n\n  // fix issue https://github.com/xiaolin3303/wx-charts/issues/9\n  if (minData === maxData) {\n    var rangeSpan = maxData || 10;\n    //minData -= rangeSpan;\n    maxData += rangeSpan;\n  }\n  var dataRange = getDataRange(minData, maxData);\n  var minRange = dataRange.minRange;\n  var maxRange = dataRange.maxRange;\n  var range = [];\n  var eachRange = (maxRange - minRange) / config.yAxisSplit;\n  for (var i = 0; i <= config.yAxisSplit; i++) {\n    range.push(minRange + eachRange * i);\n  }\n  return range.reverse();\n}\nfunction calYAxisData(series, opts, config) {\n  //堆叠图重算Y轴\n  var columnstyle = assign({}, opts.extra.column || {\n    \"type\": \"\"\n  });\n  var ranges = getYAxisTextList(series, opts, config, columnstyle.type);\n  var yAxisWidth = config.yAxisWidth;\n  var rangesFormat = ranges.map(function (item) {\n    item = util.toFixed(item, 2);\n    item = opts.yAxis.format ? opts.yAxis.format(Number(item)) : item;\n    yAxisWidth = Math.max(yAxisWidth, measureText(item) + 5);\n    return item;\n  });\n  if (opts.yAxis.disabled === true) {\n    yAxisWidth = 0;\n  }\n  return {\n    rangesFormat: rangesFormat,\n    ranges: ranges,\n    yAxisWidth: yAxisWidth\n  };\n}\nfunction calTooltipYAxisData(point, series, opts, config, eachSpacing) {\n  var ranges = getYAxisTextList(series, opts, config);\n  var spacingValid = opts.height - 2 * config.padding - config.xAxisHeight - config.legendHeight;\n  var maxVal = ranges[0];\n  var minVal = ranges[ranges.length - 1];\n  var minAxis = config.padding;\n  var maxAxis = config.padding + spacingValid;\n  var item = maxVal - (maxVal - minVal) * (point - minAxis) / (maxAxis - minAxis);\n  item = opts.yAxis.format ? opts.yAxis.format(Number(item)) : item;\n  return item;\n}\nfunction contextRotate(context, opts) {\n  if (opts.rotateLock !== true) {\n    context.translate(opts.height, 0);\n    context.rotate(90 * Math.PI / 180);\n  } else if (opts._rotate_ !== true) {\n    context.translate(opts.height, 0);\n    context.rotate(90 * Math.PI / 180);\n    opts._rotate_ = true;\n  }\n}\nfunction drawPointShape(points, color, shape, context, opts) {\n  context.beginPath();\n  context.setStrokeStyle(\"#ffffff\");\n  context.setLineWidth(1 * opts.pixelRatio);\n  context.setFillStyle(color);\n  if (shape === 'diamond') {\n    points.forEach(function (item, index) {\n      if (item !== null) {\n        context.moveTo(item.x, item.y - 4.5);\n        context.lineTo(item.x - 4.5, item.y);\n        context.lineTo(item.x, item.y + 4.5);\n        context.lineTo(item.x + 4.5, item.y);\n        context.lineTo(item.x, item.y - 4.5);\n      }\n    });\n  } else if (shape === 'circle') {\n    points.forEach(function (item, index) {\n      if (item !== null) {\n        context.moveTo(item.x + 3.5 * opts.pixelRatio, item.y);\n        context.arc(item.x, item.y, 4 * opts.pixelRatio, 0, 2 * Math.PI, false);\n      }\n    });\n  } else if (shape === 'rect') {\n    points.forEach(function (item, index) {\n      if (item !== null) {\n        context.moveTo(item.x - 3.5, item.y - 3.5);\n        context.rect(item.x - 3.5, item.y - 3.5, 7, 7);\n      }\n    });\n  } else if (shape === 'triangle') {\n    points.forEach(function (item, index) {\n      if (item !== null) {\n        context.moveTo(item.x, item.y - 4.5);\n        context.lineTo(item.x - 4.5, item.y + 4.5);\n        context.lineTo(item.x + 4.5, item.y + 4.5);\n        context.lineTo(item.x, item.y - 4.5);\n      }\n    });\n  }\n  context.closePath();\n  context.fill();\n  context.stroke();\n}\nfunction drawRingTitle(opts, config, context) {\n  var titlefontSize = opts.title.fontSize || config.titleFontSize;\n  var subtitlefontSize = opts.subtitle.fontSize || config.subtitleFontSize;\n  var title = opts.title.name || '';\n  var subtitle = opts.subtitle.name || '';\n  var titleFontColor = opts.title.color || config.titleColor;\n  var subtitleFontColor = opts.subtitle.color || config.subtitleColor;\n  var titleHeight = title ? titlefontSize : 0;\n  var subtitleHeight = subtitle ? subtitlefontSize : 0;\n  var margin = 5;\n  if (subtitle) {\n    var textWidth = measureText(subtitle, subtitlefontSize);\n    var startX = (opts.width - textWidth) / 2 + (opts.subtitle.offsetX || 0);\n    var startY = (opts.height - config.legendHeight + subtitlefontSize) / 2 + (opts.subtitle.offsetY || 0);\n    if (title) {\n      startY -= (titleHeight + margin) / 2;\n    }\n    context.beginPath();\n    context.setFontSize(subtitlefontSize);\n    context.setFillStyle(subtitleFontColor);\n    context.fillText(subtitle, startX, startY);\n    context.closePath();\n    context.stroke();\n  }\n  if (title) {\n    var _textWidth = measureText(title, titlefontSize);\n    var _startX = (opts.width - _textWidth) / 2 + (opts.title.offsetX || 0);\n    var _startY = (opts.height - config.legendHeight + titlefontSize) / 2 + (opts.title.offsetY || 0);\n    if (subtitle) {\n      _startY += (subtitleHeight + margin) / 2;\n    }\n    context.beginPath();\n    context.setFontSize(titlefontSize);\n    context.setFillStyle(titleFontColor);\n    context.fillText(title, _startX, _startY);\n    context.closePath();\n    context.stroke();\n  }\n}\nfunction drawPointText(points, series, config, context) {\n  // 绘制数据文案\n  var data = series.data;\n  points.forEach(function (item, index) {\n    if (item !== null) {\n      //var formatVal = series.format ? series.format(data[index]) : data[index];\n      context.beginPath();\n      context.setFontSize(config.fontSize);\n      context.setFillStyle('#666666');\n      var value = data[index];\n      if ((0, _typeof2.default)(data[index]) === 'object' && data[index] !== null) {\n        value = data[index].value;\n      }\n      var formatVal = series.format ? series.format(value) : value;\n      context.fillText(formatVal, item.x - measureText(formatVal) / 2, item.y - 2);\n      context.closePath();\n      context.stroke();\n    }\n  });\n}\nfunction drawGaugeLabel(gaugeOption, radius, centerPosition, opts, config, context) {\n  radius -= gaugeOption.width / 2 + config.gaugeLabelTextMargin;\n  var totalAngle = gaugeOption.startAngle - gaugeOption.endAngle + 1;\n  var splitAngle = totalAngle / gaugeOption.splitLine.splitNumber;\n  var totalNumber = gaugeOption.endNumber - gaugeOption.startNumber;\n  var splitNumber = totalNumber / gaugeOption.splitLine.splitNumber;\n  var nowAngle = gaugeOption.startAngle;\n  var nowNumber = gaugeOption.startNumber;\n  for (var i = 0; i < gaugeOption.splitLine.splitNumber + 1; i++) {\n    var pos = {\n      x: radius * Math.cos(nowAngle * Math.PI),\n      y: radius * Math.sin(nowAngle * Math.PI)\n    };\n    pos.x += centerPosition.x - measureText(nowNumber) / 2;\n    pos.y += centerPosition.y;\n    var startX = pos.x;\n    var startY = pos.y;\n    context.beginPath();\n    context.setFontSize(config.fontSize);\n    context.setFillStyle(gaugeOption.labelColor || '#666666');\n    context.fillText(nowNumber, startX, startY + config.fontSize / 2);\n    context.closePath();\n    context.stroke();\n    nowAngle += splitAngle;\n    if (nowAngle >= 2) {\n      nowAngle = nowAngle % 2;\n    }\n    nowNumber += splitNumber;\n  }\n}\nfunction drawRadarLabel(angleList, radius, centerPosition, opts, config, context) {\n  var radarOption = opts.extra.radar || {};\n  radius += config.radarLabelTextMargin;\n  angleList.forEach(function (angle, index) {\n    var pos = {\n      x: radius * Math.cos(angle),\n      y: radius * Math.sin(angle)\n    };\n    var posRelativeCanvas = convertCoordinateOrigin(pos.x, pos.y, centerPosition);\n    var startX = posRelativeCanvas.x;\n    var startY = posRelativeCanvas.y;\n    if (util.approximatelyEqual(pos.x, 0)) {\n      startX -= measureText(opts.categories[index] || '') / 2;\n    } else if (pos.x < 0) {\n      startX -= measureText(opts.categories[index] || '');\n    }\n    context.beginPath();\n    context.setFontSize(config.fontSize);\n    context.setFillStyle(radarOption.labelColor || '#666666');\n    context.fillText(opts.categories[index] || '', startX, startY + config.fontSize / 2);\n    context.closePath();\n    context.stroke();\n  });\n}\nfunction drawPieText(series, opts, config, context, radius, center) {\n  var lineRadius = radius + config.pieChartLinePadding;\n  var textObjectCollection = [];\n  var lastTextObject = null;\n  var seriesConvert = series.map(function (item) {\n    var arc = 2 * Math.PI - (item._start_ + 2 * Math.PI * item._proportion_ / 2);\n    var text = item.format ? item.format(+item._proportion_.toFixed(2)) : util.toFixed(item._proportion_ * 100) + '%';\n    var color = item.color;\n    return {\n      arc: arc,\n      text: text,\n      color: color\n    };\n  });\n  seriesConvert.forEach(function (item) {\n    // line end\n    var orginX1 = Math.cos(item.arc) * lineRadius;\n    var orginY1 = Math.sin(item.arc) * lineRadius;\n\n    // line start\n    var orginX2 = Math.cos(item.arc) * radius;\n    var orginY2 = Math.sin(item.arc) * radius;\n\n    // text start\n    var orginX3 = orginX1 >= 0 ? orginX1 + config.pieChartTextPadding : orginX1 - config.pieChartTextPadding;\n    var orginY3 = orginY1;\n    var textWidth = measureText(item.text);\n    var startY = orginY3;\n    if (lastTextObject && util.isSameXCoordinateArea(lastTextObject.start, {\n      x: orginX3\n    })) {\n      if (orginX3 > 0) {\n        startY = Math.min(orginY3, lastTextObject.start.y);\n      } else if (orginX1 < 0) {\n        startY = Math.max(orginY3, lastTextObject.start.y);\n      } else {\n        if (orginY3 > 0) {\n          startY = Math.max(orginY3, lastTextObject.start.y);\n        } else {\n          startY = Math.min(orginY3, lastTextObject.start.y);\n        }\n      }\n    }\n    if (orginX3 < 0) {\n      orginX3 -= textWidth;\n    }\n    var textObject = {\n      lineStart: {\n        x: orginX2,\n        y: orginY2\n      },\n      lineEnd: {\n        x: orginX1,\n        y: orginY1\n      },\n      start: {\n        x: orginX3,\n        y: startY\n      },\n      width: textWidth,\n      height: config.fontSize,\n      text: item.text,\n      color: item.color\n    };\n    lastTextObject = avoidCollision(textObject, lastTextObject);\n    textObjectCollection.push(lastTextObject);\n  });\n  textObjectCollection.forEach(function (item) {\n    var lineStartPoistion = convertCoordinateOrigin(item.lineStart.x, item.lineStart.y, center);\n    var lineEndPoistion = convertCoordinateOrigin(item.lineEnd.x, item.lineEnd.y, center);\n    var textPosition = convertCoordinateOrigin(item.start.x, item.start.y, center);\n    context.setLineWidth(1 * opts.pixelRatio);\n    context.setFontSize(config.fontSize);\n    context.beginPath();\n    context.setStrokeStyle(item.color);\n    context.setFillStyle(item.color);\n    context.moveTo(lineStartPoistion.x, lineStartPoistion.y);\n    var curveStartX = item.start.x < 0 ? textPosition.x + item.width : textPosition.x;\n    var textStartX = item.start.x < 0 ? textPosition.x - 5 : textPosition.x + 5;\n    context.quadraticCurveTo(lineEndPoistion.x, lineEndPoistion.y, curveStartX, textPosition.y);\n    context.moveTo(lineStartPoistion.x, lineStartPoistion.y);\n    context.stroke();\n    context.closePath();\n    context.beginPath();\n    context.moveTo(textPosition.x + item.width, textPosition.y);\n    context.arc(curveStartX, textPosition.y, 2, 0, 2 * Math.PI);\n    context.closePath();\n    context.fill();\n    context.beginPath();\n    context.setFontSize(config.fontSize);\n    context.setFillStyle('#666666');\n    context.fillText(item.text, textStartX, textPosition.y + 3);\n    context.closePath();\n    context.stroke();\n    context.closePath();\n  });\n}\nfunction drawToolTipSplitLine(offsetX, opts, config, context) {\n  var toolTipOption = opts.extra.tooltip || {};\n  toolTipOption.gridType = toolTipOption.gridType == undefined ? 'solid' : toolTipOption.gridType;\n  toolTipOption.dashLength = toolTipOption.dashLength == undefined ? 4 : toolTipOption.dashLength;\n  var startY = config.padding;\n  var endY = opts.height - config.padding - config.xAxisHeight - config.legendHeight;\n  if (toolTipOption.gridType == 'dash') {\n    context.setLineDash([toolTipOption.dashLength, toolTipOption.dashLength]);\n  }\n  context.beginPath();\n  context.setStrokeStyle(toolTipOption.gridColor || '#cccccc');\n  context.setLineWidth(1 * opts.pixelRatio);\n  context.moveTo(offsetX, startY);\n  context.lineTo(offsetX, endY);\n  context.closePath();\n  context.stroke();\n  context.setLineDash([]);\n  if (toolTipOption.xAxisLabel) {\n    var lableText = opts.categories[opts.tooltip.index];\n    context.setFontSize(config.fontSize);\n    var textWidth = context.measureText(lableText).width;\n    var textX = offsetX - config.toolTipPadding - 0.5 * textWidth;\n    var textY = endY;\n    context.beginPath();\n    context.setFillStyle(hexToRgb(toolTipOption.labelBgColor || config.toolTipBackground, toolTipOption.labelBgOpacity || config.toolTipOpacity));\n    context.setStrokeStyle(toolTipOption.labelBgColor || config.toolTipBackground);\n    context.setLineWidth(1 * opts.pixelRatio);\n    context.rect(textX, textY, textWidth + 2 * config.toolTipPadding, config.fontSize + 2 * config.toolTipPadding);\n    context.closePath();\n    context.stroke();\n    context.fill();\n    context.beginPath();\n    context.setFontSize(config.fontSize);\n    context.setFillStyle(toolTipOption.labelFontColor || config.fontColor);\n    context.fillText(lableText, textX + 2 * config.toolTipPadding, textY + config.toolTipPadding + config.fontSize);\n    context.closePath();\n    context.stroke();\n  }\n}\nfunction drawToolTipHorizentalLine(opts, config, context, eachSpacing, xAxisPoints) {\n  var toolTipOption = opts.extra.tooltip || {};\n  toolTipOption.gridType = toolTipOption.gridType == undefined ? 'solid' : toolTipOption.gridType;\n  toolTipOption.dashLength = toolTipOption.dashLength == undefined ? 4 : toolTipOption.dashLength;\n  var startX = config.padding + config.yAxisWidth + config.yAxisTitleWidth;\n  var endX = opts.width - config.padding;\n  if (toolTipOption.gridType == 'dash') {\n    context.setLineDash([toolTipOption.dashLength, toolTipOption.dashLength]);\n  }\n  context.beginPath();\n  context.setStrokeStyle(toolTipOption.gridColor || '#cccccc');\n  context.setLineWidth(1 * opts.pixelRatio);\n  context.moveTo(startX, opts.tooltip.offset.y);\n  context.lineTo(endX, opts.tooltip.offset.y);\n  context.closePath();\n  context.stroke();\n  context.setLineDash([]);\n  if (toolTipOption.yAxisLabel) {\n    var lableText = calTooltipYAxisData(opts.tooltip.offset.y, opts.series, opts, config, eachSpacing);\n    context.setFontSize(config.fontSize);\n    var textWidth = context.measureText(lableText).width;\n    var textX = startX - 2 * config.toolTipPadding - textWidth;\n    var textY = opts.tooltip.offset.y;\n    context.beginPath();\n    context.setFillStyle(hexToRgb(toolTipOption.labelBgColor || config.toolTipBackground, toolTipOption.labelBgOpacity || config.toolTipOpacity));\n    context.setStrokeStyle(toolTipOption.labelBgColor || config.toolTipBackground);\n    context.setLineWidth(1 * opts.pixelRatio);\n    context.rect(textX, textY - 0.5 * config.fontSize - config.toolTipPadding, textWidth + 2 * config.toolTipPadding, config.fontSize + 2 * config.toolTipPadding);\n    context.closePath();\n    context.stroke();\n    context.fill();\n    context.beginPath();\n    context.setFontSize(config.fontSize);\n    context.setFillStyle(toolTipOption.labelFontColor || config.fontColor);\n    context.fillText(lableText, textX + config.toolTipPadding, textY + 0.5 * config.fontSize);\n    context.closePath();\n    context.stroke();\n  }\n}\nfunction drawToolTipSplitArea(offsetX, opts, config, context, eachSpacing) {\n  var toolTipOption = opts.extra.tooltip || {\n    activeBgColor: '#000000',\n    activeBgOpacity: 0.08\n  };\n  toolTipOption.activeBgColor = toolTipOption.activeBgColor ? toolTipOption.activeBgColor : '#000000';\n  toolTipOption.activeBgOpacity = toolTipOption.activeBgOpacity ? toolTipOption.activeBgOpacity : 0.08;\n  var startY = config.padding;\n  var endY = opts.height - config.padding - config.xAxisHeight - config.legendHeight;\n  context.beginPath();\n  context.setFillStyle(hexToRgb(toolTipOption.activeBgColor, toolTipOption.activeBgOpacity));\n  context.rect(offsetX - eachSpacing / 2, startY, eachSpacing, endY - startY);\n  context.closePath();\n  context.fill();\n}\nfunction drawToolTip(textList, offset, opts, config, context, eachSpacing, xAxisPoints) {\n  var toolTipOption = opts.extra.tooltip || {\n    bgColor: '#000000',\n    bgOpacity: 0.7,\n    fontColor: '#FFFFFF'\n  };\n  toolTipOption.bgColor = toolTipOption.bgColor ? toolTipOption.bgColor : '#000000';\n  toolTipOption.bgOpacity = toolTipOption.bgOpacity ? toolTipOption.bgOpacity : 0.7;\n  toolTipOption.fontColor = toolTipOption.fontColor ? toolTipOption.fontColor : '#FFFFFF';\n  var legendWidth = 4 * opts.pixelRatio;\n  var legendMarginRight = 5 * opts.pixelRatio;\n  var arrowWidth = 8 * opts.pixelRatio;\n  var isOverRightBorder = false;\n  if (opts.type == 'line' || opts.type == 'area' || opts.type == 'candle' || opts.type == 'mix') {\n    drawToolTipSplitLine(opts.tooltip.offset.x, opts, config, context);\n  }\n  offset = assign({\n    x: 0,\n    y: 0\n  }, offset);\n  offset.y -= 8 * opts.pixelRatio;\n  var textWidth = textList.map(function (item) {\n    return measureText(item.text);\n  });\n  var toolTipWidth = legendWidth + legendMarginRight + 4 * config.toolTipPadding + Math.max.apply(null, textWidth);\n  var toolTipHeight = 2 * config.toolTipPadding + textList.length * config.toolTipLineHeight;\n\n  // if beyond the right border\n  if (offset.x - Math.abs(opts._scrollDistance_) + arrowWidth + toolTipWidth > opts.width) {\n    isOverRightBorder = true;\n  }\n\n  // draw background rect\n  context.beginPath();\n  context.setFillStyle(hexToRgb(toolTipOption.bgColor || config.toolTipBackground, toolTipOption.bgOpacity || config.toolTipOpacity));\n  if (isOverRightBorder) {\n    context.moveTo(offset.x, offset.y + 10 * opts.pixelRatio);\n    context.lineTo(offset.x - arrowWidth, offset.y + 10 * opts.pixelRatio - 5 * opts.pixelRatio);\n    context.lineTo(offset.x - arrowWidth, offset.y);\n    context.lineTo(offset.x - arrowWidth - Math.round(toolTipWidth), offset.y);\n    context.lineTo(offset.x - arrowWidth - Math.round(toolTipWidth), offset.y + toolTipHeight);\n    context.lineTo(offset.x - arrowWidth, offset.y + toolTipHeight);\n    context.lineTo(offset.x - arrowWidth, offset.y + 10 * opts.pixelRatio + 5 * opts.pixelRatio);\n    context.lineTo(offset.x, offset.y + 10 * opts.pixelRatio);\n  } else {\n    context.moveTo(offset.x, offset.y + 10 * opts.pixelRatio);\n    context.lineTo(offset.x + arrowWidth, offset.y + 10 * opts.pixelRatio - 5 * opts.pixelRatio);\n    context.lineTo(offset.x + arrowWidth, offset.y);\n    context.lineTo(offset.x + arrowWidth + Math.round(toolTipWidth), offset.y);\n    context.lineTo(offset.x + arrowWidth + Math.round(toolTipWidth), offset.y + toolTipHeight);\n    context.lineTo(offset.x + arrowWidth, offset.y + toolTipHeight);\n    context.lineTo(offset.x + arrowWidth, offset.y + 10 * opts.pixelRatio + 5 * opts.pixelRatio);\n    context.lineTo(offset.x, offset.y + 10 * opts.pixelRatio);\n  }\n  context.closePath();\n  context.fill();\n\n  // draw legend\n  textList.forEach(function (item, index) {\n    if (item.color !== null) {\n      context.beginPath();\n      context.setFillStyle(item.color);\n      var startX = offset.x + arrowWidth + 2 * config.toolTipPadding;\n      var startY = offset.y + (config.toolTipLineHeight - config.fontSize) / 2 + config.toolTipLineHeight * index + config.toolTipPadding + 1;\n      if (isOverRightBorder) {\n        startX = offset.x - toolTipWidth - arrowWidth + 2 * config.toolTipPadding;\n      }\n      context.fillRect(startX, startY, legendWidth, config.fontSize);\n      context.closePath();\n    }\n  });\n\n  // draw text list\n\n  textList.forEach(function (item, index) {\n    var startX = offset.x + arrowWidth + 2 * config.toolTipPadding + legendWidth + legendMarginRight;\n    if (isOverRightBorder) {\n      startX = offset.x - toolTipWidth - arrowWidth + 2 * config.toolTipPadding + +legendWidth + legendMarginRight;\n    }\n    var startY = offset.y + (config.toolTipLineHeight - config.fontSize) / 2 + config.toolTipLineHeight * index + config.toolTipPadding;\n    context.beginPath();\n    context.setFontSize(config.fontSize);\n    context.setFillStyle(toolTipOption.fontColor);\n    context.fillText(item.text, startX, startY + config.fontSize);\n    context.closePath();\n    context.stroke();\n  });\n}\nfunction drawYAxisTitle(title, opts, config, context) {\n  var startX = config.xAxisHeight + (opts.height - config.xAxisHeight - measureText(title)) / 2;\n  context.save();\n  context.beginPath();\n  context.setFontSize(config.fontSize);\n  context.setFillStyle(opts.yAxis.titleFontColor || '#333333');\n  context.translate(0, opts.height);\n  context.rotate(-90 * Math.PI / 180);\n  context.fillText(title, startX, config.padding + 0.5 * config.fontSize);\n  context.closePath();\n  context.stroke();\n  context.restore();\n}\nfunction drawColumnDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var columnOption = opts.extra.column || {\n    type: {},\n    meter: {}\n  };\n  columnOption.type = columnOption.type == undefined ? 'group' : columnOption.type;\n  columnOption.meter = columnOption.meter || {};\n  columnOption.meter.border = columnOption.meter.border == undefined ? 4 : columnOption.meter.border;\n  columnOption.meter.fillColor = columnOption.meter.fillColor == undefined ? '#FFFFFF' : columnOption.meter.fillColor;\n  var _calYAxisData = calYAxisData(series, opts, config),\n    ranges = _calYAxisData.ranges;\n  var _getXAxisPoints = getXAxisPoints(opts.categories, opts, config),\n    xAxisPoints = _getXAxisPoints.xAxisPoints,\n    eachSpacing = _getXAxisPoints.eachSpacing;\n  var minRange = ranges.pop();\n  var maxRange = ranges.shift();\n  var calPoints = [];\n  context.save();\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n  if (opts.tooltip && opts.tooltip.textList && opts.tooltip.textList.length && process === 1) {\n    drawToolTipSplitArea(opts.tooltip.offset.x, opts, config, context, eachSpacing);\n  }\n  series.forEach(function (eachSeries, seriesIndex) {\n    var data = eachSeries.data;\n    switch (columnOption.type) {\n      case 'group':\n        var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n        var tooltipPoints = getStackDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, seriesIndex, series, process);\n        calPoints.push(tooltipPoints);\n        points = fixColumeData(points, eachSpacing, series.length, seriesIndex, config, opts);\n        points.forEach(function (item, index) {\n          if (item !== null) {\n            context.beginPath();\n            context.setFillStyle(item.color || eachSeries.color);\n            var startX = item.x - item.width / 2 + 1;\n            var height = opts.height - item.y - config.padding - config.xAxisHeight - config.legendHeight;\n            context.moveTo(startX, item.y);\n            context.fillRect(startX, item.y, item.width - 2, height);\n            context.closePath();\n            context.fill();\n          }\n        });\n        break;\n      case 'stack':\n        // 绘制堆叠数据图\n        var points = getStackDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, seriesIndex, series, process);\n        calPoints.push(points);\n        points = fixColumeStackData(points, eachSpacing, series.length, seriesIndex, config, opts, series);\n        points.forEach(function (item, index) {\n          if (item !== null) {\n            context.beginPath();\n            context.setFillStyle(item.color || eachSeries.color);\n            var startX = item.x - item.width / 2 + 1;\n            var height = opts.height - item.y - config.padding - config.xAxisHeight - config.legendHeight;\n            var height0 = opts.height - item.y0 - config.padding - config.xAxisHeight - config.legendHeight;\n            if (seriesIndex > 0) {\n              height -= height0;\n            }\n            context.moveTo(startX, item.y);\n            context.fillRect(startX, item.y, item.width - 2, height);\n            context.closePath();\n            context.fill();\n          }\n        });\n        break;\n      case 'meter':\n        // 绘制温度计数据图\n        var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n        calPoints.push(points);\n        points = fixColumeMeterData(points, eachSpacing, series.length, seriesIndex, config, opts, columnOption.meter.border);\n        if (seriesIndex == 0) {\n          points.forEach(function (item, index) {\n            if (item !== null) {\n              //画背景颜色\n              context.beginPath();\n              context.setFillStyle(columnOption.meter.fillColor);\n              var startX = item.x - item.width / 2 + 1;\n              var height = opts.height - item.y - config.padding - config.xAxisHeight - config.legendHeight;\n              context.moveTo(startX, item.y);\n              context.fillRect(startX, item.y, item.width - 2, height);\n              context.closePath();\n              context.fill();\n              //画边框线\n              context.beginPath();\n              context.setStrokeStyle(eachSeries.color);\n              context.setLineWidth(columnOption.meter.border * opts.pixelRatio);\n              context.moveTo(startX + columnOption.meter.border * 0.5, item.y + height);\n              context.lineTo(startX + columnOption.meter.border * 0.5, item.y + columnOption.meter.border * 0.5);\n              context.lineTo(startX + item.width - columnOption.meter.border, item.y + columnOption.meter.border * 0.5);\n              context.lineTo(startX + item.width - columnOption.meter.border, item.y + height);\n              context.stroke();\n            }\n          });\n        } else {\n          points.forEach(function (item, index) {\n            if (item !== null) {\n              context.beginPath();\n              context.setFillStyle(item.color || eachSeries.color);\n              var startX = item.x - item.width / 2 + 1;\n              var height = opts.height - item.y - config.padding - config.xAxisHeight - config.legendHeight;\n              context.moveTo(startX, item.y);\n              context.rect(startX, item.y, item.width - 2, height);\n              context.closePath();\n              context.fill();\n            }\n          });\n        }\n        break;\n    }\n  });\n  if (opts.dataLabel !== false && process === 1) {\n    series.forEach(function (eachSeries, seriesIndex) {\n      var data = eachSeries.data;\n      switch (columnOption.type) {\n        case 'group':\n          var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n          points = fixColumeData(points, eachSpacing, series.length, seriesIndex, config, opts);\n          drawPointText(points, eachSeries, config, context);\n          break;\n        case 'stack':\n          var points = getStackDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, seriesIndex, series, process);\n          drawPointText(points, eachSeries, config, context);\n          break;\n        case 'meter':\n          var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n          drawPointText(points, eachSeries, config, context);\n          break;\n      }\n    });\n  }\n  context.restore();\n  return {\n    xAxisPoints: xAxisPoints,\n    calPoints: calPoints,\n    eachSpacing: eachSpacing\n  };\n}\nfunction drawCandleDataPoints(series, seriesMA, opts, config, context) {\n  var process = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  var candleOption = opts.extra.candle || {\n    color: {},\n    average: {}\n  };\n  candleOption.color.upLine = candleOption.color.upLine ? candleOption.color.upLine : '#f04864';\n  candleOption.color.upFill = candleOption.color.upFill ? candleOption.color.upFill : '#f04864';\n  candleOption.color.downLine = candleOption.color.downLine ? candleOption.color.downLine : '#2fc25b';\n  candleOption.color.downFill = candleOption.color.downFill ? candleOption.color.downFill : '#2fc25b';\n  candleOption.average.show = candleOption.average.show === true ? true : false;\n  candleOption.average.name = candleOption.average.name ? candleOption.average.name : [];\n  candleOption.average.day = candleOption.average.day ? candleOption.average.day : [];\n  candleOption.average.color = candleOption.average.color ? candleOption.average.color : ['#1890ff', '#2fc25b', '#facc14', '#f04864', '#8543e0', '#90ed7d'];\n  opts.extra.candle = candleOption;\n  var _calYAxisData5 = calYAxisData(series, opts, config),\n    ranges = _calYAxisData5.ranges;\n  var _getXAxisPoints5 = getXAxisPoints(opts.categories, opts, config),\n    xAxisPoints = _getXAxisPoints5.xAxisPoints,\n    eachSpacing = _getXAxisPoints5.eachSpacing;\n  var minRange = ranges.pop();\n  var maxRange = ranges.shift();\n  var calPoints = [];\n  context.save();\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n  //画均线\n  if (candleOption.average.show) {\n    seriesMA.forEach(function (eachSeries, seriesIndex) {\n      var data = eachSeries.data;\n      var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n      //calPoints.push(points);\n      var splitPointList = splitPoints(points);\n      splitPointList.forEach(function (points, index) {\n        context.beginPath();\n        context.setStrokeStyle(eachSeries.color);\n        context.setLineWidth(1);\n        if (points.length === 1) {\n          context.moveTo(points[0].x, points[0].y);\n          context.arc(points[0].x, points[0].y, 1, 0, 2 * Math.PI);\n        } else {\n          context.moveTo(points[0].x, points[0].y);\n          points.forEach(function (item, index) {\n            if (index > 0) {\n              var ctrlPoint = createCurveControlPoints(points, index - 1);\n              context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, item.x, item.y);\n            }\n          });\n          context.moveTo(points[0].x, points[0].y);\n        }\n        context.closePath();\n        context.stroke();\n      });\n    });\n  }\n  //画K线\n  series.forEach(function (eachSeries, seriesIndex) {\n    var data = eachSeries.data;\n    var points = getCandleDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n    calPoints.push(points);\n    var splitPointList = splitPoints(points);\n    splitPointList = splitPointList[0];\n    splitPointList.forEach(function (points, index) {\n      context.beginPath();\n      //如果上涨\n      if (data[index][1] - data[index][0] > 0) {\n        context.setStrokeStyle(candleOption.color.upLine);\n        context.setFillStyle(candleOption.color.upFill);\n        context.setLineWidth(1 * opts.pixelRatio);\n        context.moveTo(points[3].x, points[3].y); //顶点\n        context.lineTo(points[1].x, points[1].y); //收盘中间点\n        context.lineTo(points[1].x - eachSpacing / 4, points[1].y); //收盘左侧点\n        context.lineTo(points[0].x - eachSpacing / 4, points[0].y); //开盘左侧点\n        context.lineTo(points[0].x, points[0].y); //开盘中间点\n        context.lineTo(points[2].x, points[2].y); //底点\n        context.lineTo(points[0].x, points[0].y); //开盘中间点\n        context.lineTo(points[0].x + eachSpacing / 4, points[0].y); //开盘右侧点\n        context.lineTo(points[1].x + eachSpacing / 4, points[1].y); //收盘右侧点\n        context.lineTo(points[1].x, points[1].y); //收盘中间点\n        context.moveTo(points[3].x, points[3].y); //顶点\n      } else {\n        context.setStrokeStyle(candleOption.color.downLine);\n        context.setFillStyle(candleOption.color.downFill);\n        context.setLineWidth(1 * opts.pixelRatio);\n        context.moveTo(points[3].x, points[3].y); //顶点\n        context.lineTo(points[0].x, points[0].y); //开盘中间点\n        context.lineTo(points[0].x - eachSpacing / 4, points[0].y); //开盘左侧点\n        context.lineTo(points[1].x - eachSpacing / 4, points[1].y); //收盘左侧点\n        context.lineTo(points[1].x, points[1].y); //收盘中间点\n        context.lineTo(points[2].x, points[2].y); //底点\n        context.lineTo(points[1].x, points[1].y); //收盘中间点\n        context.lineTo(points[1].x + eachSpacing / 4, points[1].y); //收盘右侧点\n        context.lineTo(points[0].x + eachSpacing / 4, points[0].y); //开盘右侧点\n        context.lineTo(points[0].x, points[0].y); //开盘中间点\n        context.moveTo(points[3].x, points[3].y); //顶点\n      }\n\n      context.closePath();\n      context.fill();\n      context.stroke();\n    });\n  });\n  context.restore();\n  return {\n    xAxisPoints: xAxisPoints,\n    calPoints: calPoints,\n    eachSpacing: eachSpacing\n  };\n}\nfunction drawAreaDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var areaOption = opts.extra.area || {\n    type: 'straight',\n    opacity: 0.5,\n    addLine: false,\n    width: 2\n  };\n  areaOption.type = areaOption.type ? areaOption.type : 'straight';\n  areaOption.opacity = areaOption.opacity ? areaOption.opacity : 0.2;\n  areaOption.addLine = areaOption.addLine == true ? true : false;\n  areaOption.width = areaOption.width ? areaOption.width : 2;\n  var _calYAxisData2 = calYAxisData(series, opts, config),\n    ranges = _calYAxisData2.ranges;\n  var _getXAxisPoints2 = getXAxisPoints(opts.categories, opts, config),\n    xAxisPoints = _getXAxisPoints2.xAxisPoints,\n    eachSpacing = _getXAxisPoints2.eachSpacing;\n  var minRange = ranges.pop();\n  var maxRange = ranges.shift();\n  var endY = opts.height - config.padding - config.xAxisHeight - config.legendHeight;\n  var calPoints = [];\n  context.save();\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n  if (opts.tooltip && opts.tooltip.textList && opts.tooltip.textList.length && process === 1) {\n    drawToolTipSplitLine(opts.tooltip.offset.x, opts, config, context);\n  }\n  series.forEach(function (eachSeries, seriesIndex) {\n    var data = eachSeries.data;\n    var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n    calPoints.push(points);\n    var splitPointList = splitPoints(points);\n    splitPointList.forEach(function (points) {\n      // 绘制区域数据\n      context.beginPath();\n      context.setStrokeStyle(hexToRgb(eachSeries.color, areaOption.opacity));\n      context.setFillStyle(hexToRgb(eachSeries.color, areaOption.opacity));\n      context.setLineWidth(areaOption.width * opts.pixelRatio);\n      if (points.length > 1) {\n        var firstPoint = points[0];\n        var lastPoint = points[points.length - 1];\n        context.moveTo(firstPoint.x, firstPoint.y);\n        if (areaOption.type === 'curve') {\n          points.forEach(function (item, index) {\n            if (index > 0) {\n              var ctrlPoint = createCurveControlPoints(points, index - 1);\n              context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, item.x, item.y);\n            }\n          });\n        } else {\n          points.forEach(function (item, index) {\n            if (index > 0) {\n              context.lineTo(item.x, item.y);\n            }\n          });\n        }\n        context.lineTo(lastPoint.x, endY);\n        context.lineTo(firstPoint.x, endY);\n        context.lineTo(firstPoint.x, firstPoint.y);\n      } else {\n        var item = points[0];\n        context.moveTo(item.x - eachSpacing / 2, item.y);\n        context.lineTo(item.x + eachSpacing / 2, item.y);\n        context.lineTo(item.x + eachSpacing / 2, endY);\n        context.lineTo(item.x - eachSpacing / 2, endY);\n        context.moveTo(item.x - eachSpacing / 2, item.y);\n      }\n      context.closePath();\n      context.fill();\n\n      //画连线\n      if (areaOption.addLine) {\n        context.beginPath();\n        context.setStrokeStyle(eachSeries.color);\n        context.setLineWidth(areaOption.width * opts.pixelRatio);\n        if (points.length === 1) {\n          context.moveTo(points[0].x, points[0].y);\n          context.arc(points[0].x, points[0].y, 1, 0, 2 * Math.PI);\n        } else {\n          context.moveTo(points[0].x, points[0].y);\n          if (areaOption.type === 'curve') {\n            points.forEach(function (item, index) {\n              if (index > 0) {\n                var ctrlPoint = createCurveControlPoints(points, index - 1);\n                context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, item.x, item.y);\n              }\n            });\n          } else {\n            points.forEach(function (item, index) {\n              if (index > 0) {\n                context.lineTo(item.x, item.y);\n              }\n            });\n          }\n          context.moveTo(points[0].x, points[0].y);\n        }\n        context.closePath();\n        context.stroke();\n      }\n    });\n\n    //画点\n    if (opts.dataPointShape !== false) {\n      var shape = config.dataPointShape[seriesIndex % config.dataPointShape.length];\n      drawPointShape(points, eachSeries.color, shape, context, opts);\n    }\n  });\n  if (opts.dataLabel !== false && process === 1) {\n    series.forEach(function (eachSeries, seriesIndex) {\n      var data = eachSeries.data;\n      var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n      drawPointText(points, eachSeries, config, context);\n    });\n  }\n  context.restore();\n  return {\n    xAxisPoints: xAxisPoints,\n    calPoints: calPoints,\n    eachSpacing: eachSpacing\n  };\n}\nfunction drawLineDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var lineOption = opts.extra.line || {\n    type: 'straight',\n    width: 2\n  };\n  lineOption.type = lineOption.type ? lineOption.type : 'straight';\n  lineOption.width = lineOption.width ? lineOption.width : 2;\n  var _calYAxisData3 = calYAxisData(series, opts, config),\n    ranges = _calYAxisData3.ranges;\n  var _getXAxisPoints3 = getXAxisPoints(opts.categories, opts, config),\n    xAxisPoints = _getXAxisPoints3.xAxisPoints,\n    eachSpacing = _getXAxisPoints3.eachSpacing;\n  var minRange = ranges.pop();\n  var maxRange = ranges.shift();\n  var calPoints = [];\n  context.save();\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n  if (opts.tooltip && opts.tooltip.textList && opts.tooltip.textList.length && process === 1) {\n    drawToolTipSplitLine(opts.tooltip.offset.x, opts, config, context);\n  }\n  series.forEach(function (eachSeries, seriesIndex) {\n    var data = eachSeries.data;\n    var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n    calPoints.push(points);\n    var splitPointList = splitPoints(points);\n    splitPointList.forEach(function (points, index) {\n      context.beginPath();\n      context.setStrokeStyle(eachSeries.color);\n      context.setLineWidth(lineOption.width * opts.pixelRatio);\n      if (points.length === 1) {\n        context.moveTo(points[0].x, points[0].y);\n        context.arc(points[0].x, points[0].y, 1, 0, 2 * Math.PI);\n      } else {\n        context.moveTo(points[0].x, points[0].y);\n        if (lineOption.type === 'curve') {\n          points.forEach(function (item, index) {\n            if (index > 0) {\n              var ctrlPoint = createCurveControlPoints(points, index - 1);\n              context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, item.x, item.y);\n            }\n          });\n        } else {\n          points.forEach(function (item, index) {\n            if (index > 0) {\n              context.lineTo(item.x, item.y);\n            }\n          });\n        }\n        context.moveTo(points[0].x, points[0].y);\n      }\n      context.closePath();\n      context.stroke();\n    });\n    if (opts.dataPointShape !== false) {\n      var shape = config.dataPointShape[seriesIndex % config.dataPointShape.length];\n      drawPointShape(points, eachSeries.color, shape, context, opts);\n    }\n  });\n  if (opts.dataLabel !== false && process === 1) {\n    series.forEach(function (eachSeries, seriesIndex) {\n      var data = eachSeries.data;\n      var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n      drawPointText(points, eachSeries, config, context);\n    });\n  }\n  context.restore();\n  return {\n    xAxisPoints: xAxisPoints,\n    calPoints: calPoints,\n    eachSpacing: eachSpacing\n  };\n}\nfunction drawMixDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var _calYAxisData6 = calYAxisData(series, opts, config),\n    ranges = _calYAxisData6.ranges;\n  var _getXAxisPoints6 = getXAxisPoints(opts.categories, opts, config),\n    xAxisPoints = _getXAxisPoints6.xAxisPoints,\n    eachSpacing = _getXAxisPoints6.eachSpacing;\n  var minRange = ranges.pop();\n  var maxRange = ranges.shift();\n  var endY = opts.height - config.padding - config.xAxisHeight - config.legendHeight;\n  var calPoints = [];\n  var columnIndex = 0;\n  var columnLength = 0;\n  series.forEach(function (eachSeries, seriesIndex) {\n    if (eachSeries.type == 'column') {\n      columnLength += 1;\n    }\n  });\n  context.save();\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n  if (opts.tooltip && opts.tooltip.textList && opts.tooltip.textList.length && process === 1) {\n    drawToolTipSplitLine(opts.tooltip.offset.x, opts, config, context);\n  }\n  series.forEach(function (eachSeries, seriesIndex) {\n    var data = eachSeries.data;\n    var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n    calPoints.push(points);\n\n    // 绘制柱状数据图\n    if (eachSeries.type == 'column') {\n      points = fixColumeData(points, eachSpacing, columnLength, columnIndex, config, opts);\n      points.forEach(function (item, index) {\n        if (item !== null) {\n          context.beginPath();\n          context.setFillStyle(item.color || eachSeries.color);\n          var startX = item.x - item.width / 2 + 1;\n          var height = opts.height - item.y - config.padding - config.xAxisHeight - config.legendHeight;\n          context.moveTo(startX, item.y);\n          context.rect(startX, item.y, item.width - 2, height);\n          context.closePath();\n          context.fill();\n        }\n      });\n      columnIndex += 1;\n    }\n\n    //绘制区域图数据\n\n    if (eachSeries.type == 'area') {\n      var splitPointList = splitPoints(points);\n      splitPointList.forEach(function (points) {\n        // 绘制区域数据\n        context.beginPath();\n        context.setStrokeStyle(eachSeries.color);\n        context.setFillStyle(eachSeries.color);\n        context.setGlobalAlpha(0.2);\n        context.setLineWidth(2 * opts.pixelRatio);\n        if (points.length > 1) {\n          var firstPoint = points[0];\n          var lastPoint = points[points.length - 1];\n          context.moveTo(firstPoint.x, firstPoint.y);\n          if (eachSeries.style === 'curve') {\n            points.forEach(function (item, index) {\n              if (index > 0) {\n                var ctrlPoint = createCurveControlPoints(points, index - 1);\n                context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, item.x, item.y);\n              }\n            });\n          } else {\n            points.forEach(function (item, index) {\n              if (index > 0) {\n                context.lineTo(item.x, item.y);\n              }\n            });\n          }\n          context.lineTo(lastPoint.x, endY);\n          context.lineTo(firstPoint.x, endY);\n          context.lineTo(firstPoint.x, firstPoint.y);\n        } else {\n          var item = points[0];\n          context.moveTo(item.x - eachSpacing / 2, item.y);\n          context.lineTo(item.x + eachSpacing / 2, item.y);\n          context.lineTo(item.x + eachSpacing / 2, endY);\n          context.lineTo(item.x - eachSpacing / 2, endY);\n          context.moveTo(item.x - eachSpacing / 2, item.y);\n        }\n        context.closePath();\n        context.fill();\n        context.setGlobalAlpha(1);\n      });\n    }\n\n    // 绘制折线数据图\n    if (eachSeries.type == 'line') {\n      var splitPointList = splitPoints(points);\n      splitPointList.forEach(function (points, index) {\n        context.beginPath();\n        context.setStrokeStyle(eachSeries.color);\n        context.setLineWidth(2 * opts.pixelRatio);\n        if (points.length === 1) {\n          context.moveTo(points[0].x, points[0].y);\n          context.arc(points[0].x, points[0].y, 1, 0, 2 * Math.PI);\n        } else {\n          context.moveTo(points[0].x, points[0].y);\n          if (eachSeries.style == 'curve') {\n            points.forEach(function (item, index) {\n              if (index > 0) {\n                var ctrlPoint = createCurveControlPoints(points, index - 1);\n                context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, item.x, item.y);\n              }\n            });\n          } else {\n            points.forEach(function (item, index) {\n              if (index > 0) {\n                context.lineTo(item.x, item.y);\n              }\n            });\n          }\n          context.moveTo(points[0].x, points[0].y);\n        }\n        context.closePath();\n        context.stroke();\n      });\n    }\n\n    // 绘制点数据图\n    if (eachSeries.type == 'point') {\n      var splitPointList = splitPoints(points);\n      splitPointList.forEach(function (points, index) {\n        context.beginPath();\n        context.setStrokeStyle(eachSeries.color);\n        context.setLineWidth(2 * opts.pixelRatio);\n        context.moveTo(points[0].x, points[0].y);\n        context.arc(points[0].x, points[0].y, 1, 0, 2 * Math.PI);\n        context.closePath();\n        context.stroke();\n      });\n    }\n    if (opts.dataPointShape !== false && eachSeries.type !== 'column') {\n      var shape = config.dataPointShape[seriesIndex % config.dataPointShape.length];\n      drawPointShape(points, eachSeries.color, shape, context, opts);\n    }\n  });\n  if (opts.dataLabel !== false && process === 1) {\n    var columnIndex = 0;\n    series.forEach(function (eachSeries, seriesIndex) {\n      var data = eachSeries.data;\n      var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n      if (eachSeries.type !== 'column') {\n        drawPointText(points, eachSeries, config, context);\n      } else {\n        points = fixColumeData(points, eachSpacing, columnLength, columnIndex, config, opts);\n        drawPointText(points, eachSeries, config, context);\n        columnIndex += 1;\n      }\n    });\n  }\n  context.restore();\n  return {\n    xAxisPoints: xAxisPoints,\n    calPoints: calPoints,\n    eachSpacing: eachSpacing\n  };\n}\nfunction drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints) {\n  var toolTipOption = opts.extra.tooltip || {};\n  if (toolTipOption.horizentalLine && opts.tooltip && process === 1 && (opts.type == 'line' || opts.type == 'area' || opts.type == 'column' || opts.type == 'candle' || opts.type == 'mix')) {\n    drawToolTipHorizentalLine(opts, config, context, eachSpacing, xAxisPoints);\n  }\n  context.save();\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n  if (opts.tooltip && opts.tooltip.textList && opts.tooltip.textList.length && process === 1) {\n    drawToolTip(opts.tooltip.textList, opts.tooltip.offset, opts, config, context, eachSpacing, xAxisPoints);\n  }\n  context.restore();\n}\nfunction drawXAxis(categories, opts, config, context) {\n  var _getXAxisPoints4 = getXAxisPoints(categories, opts, config),\n    xAxisPoints = _getXAxisPoints4.xAxisPoints,\n    startX = _getXAxisPoints4.startX,\n    endX = _getXAxisPoints4.endX,\n    eachSpacing = _getXAxisPoints4.eachSpacing;\n  var startY = opts.height - config.padding - config.xAxisHeight - config.legendHeight;\n  var endY = config.padding;\n\n  //绘制滚动条\n  if (opts.enableScroll && opts.xAxis.scrollShow) {\n    var scrollY = opts.height - config.padding - config.legendHeight + 6 * opts.pixelRatio;\n    var scrollScreenWidth = endX - startX;\n    var scrollTotalWidth = eachSpacing * (xAxisPoints.length - 1);\n    var scrollWidth = scrollScreenWidth * scrollScreenWidth / scrollTotalWidth;\n    var scrollLeft = 0;\n    if (opts._scrollDistance_) {\n      scrollLeft = -opts._scrollDistance_ * scrollScreenWidth / scrollTotalWidth;\n    }\n    context.beginPath();\n    context.setLineCap('round');\n    context.setLineWidth(6 * opts.pixelRatio);\n    context.setStrokeStyle(opts.xAxis.scrollBackgroundColor || \"#EFEBEF\");\n    context.moveTo(startX, scrollY);\n    context.lineTo(endX, scrollY);\n    context.stroke();\n    context.closePath();\n    context.beginPath();\n    context.setLineCap('round');\n    context.setLineWidth(6 * opts.pixelRatio);\n    context.setStrokeStyle(opts.xAxis.scrollColor || \"#A6A6A6\");\n    context.moveTo(startX + scrollLeft, scrollY);\n    context.lineTo(startX + scrollLeft + scrollWidth, scrollY);\n    context.stroke();\n    context.setLineCap('butt');\n    context.closePath();\n  }\n  context.save();\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n  context.beginPath();\n  context.setStrokeStyle(opts.xAxis.gridColor || \"#cccccc\");\n  context.setLineCap('butt');\n  context.setLineWidth(1 * opts.pixelRatio);\n  if (opts.xAxis.gridType == 'dash') {\n    context.setLineDash([opts.xAxis.dashLength, opts.xAxis.dashLength]);\n  }\n  if (opts.xAxis.disableGrid !== true) {\n    if (opts.xAxis.type === 'calibration') {\n      xAxisPoints.forEach(function (item, index) {\n        if (index > 0) {\n          context.moveTo(item - eachSpacing / 2, startY);\n          context.lineTo(item - eachSpacing / 2, startY + 4 * opts.pixelRatio);\n        }\n      });\n    } else {\n      xAxisPoints.forEach(function (item, index) {\n        context.moveTo(item, startY);\n        context.lineTo(item, endY);\n      });\n    }\n  }\n  context.closePath();\n  context.stroke();\n  context.setLineDash([]);\n\n  //不绘制X轴\n  if (opts.xAxis.disabled !== true) {\n    // 对X轴列表做抽稀处理\n    var validWidth = opts.width - 2 * config.padding - config.yAxisWidth - config.yAxisTitleWidth;\n    //默认全部显示X轴标签\n    var maxXAxisListLength = categories.length;\n    //如果不旋转X轴文案\n    if (config._xAxisTextAngle_ === 0) {\n      //如果设置了X轴单屏数量\n      if (opts.xAxis.labelCount) {\n        //如果设置X轴密度\n        if (opts.xAxis.itemCount) {\n          maxXAxisListLength = Math.ceil(categories.length / opts.xAxis.itemCount * opts.xAxis.labelCount);\n        } else {\n          maxXAxisListLength = opts.xAxis.labelCount;\n        }\n        maxXAxisListLength -= 1;\n      }\n    } else {\n      //旋转标签文案\n      maxXAxisListLength = Math.min(categories.length, Math.ceil(validWidth / config.fontSize / 1.5));\n    }\n    var ratio = Math.ceil(categories.length / maxXAxisListLength);\n    var newCategories = [];\n    var cgLength = categories.length;\n    for (var i = 0; i < cgLength; i++) {\n      if (i % ratio !== 0) {\n        newCategories.push(\"\");\n      } else {\n        newCategories.push(categories[i]);\n      }\n    }\n    newCategories[cgLength - 1] = categories[cgLength - 1];\n    /*\r\n    categories = categories.map(function (item, index) {\r\n    \treturn index % ratio !== 0 ? '' : item;\r\n    });*/\n\n    if (config._xAxisTextAngle_ === 0) {\n      newCategories.forEach(function (item, index) {\n        var offset = eachSpacing / 2 - measureText(item) / 2;\n        context.beginPath();\n        context.setFontSize(config.fontSize);\n        context.setFillStyle(opts.xAxis.fontColor || '#666666');\n        context.fillText(item, xAxisPoints[index] + offset, startY + config.fontSize + 5);\n        context.closePath();\n        context.stroke();\n      });\n    } else {\n      newCategories.forEach(function (item, index) {\n        context.save();\n        context.beginPath();\n        context.setFontSize(config.fontSize);\n        context.setFillStyle(opts.xAxis.fontColor || '#666666');\n        var textWidth = measureText(item);\n        var offset = eachSpacing / 2 - textWidth;\n        var _calRotateTranslate = calRotateTranslate(xAxisPoints[index] + eachSpacing / 2, startY + config.fontSize / 2 + 5, opts.height),\n          transX = _calRotateTranslate.transX,\n          transY = _calRotateTranslate.transY;\n        context.rotate(-1 * config._xAxisTextAngle_);\n        context.translate(transX, transY);\n        context.fillText(item, xAxisPoints[index] + offset, startY + config.fontSize + 5);\n        context.closePath();\n        context.stroke();\n        context.restore();\n      });\n    }\n  }\n  context.restore();\n}\nfunction drawYAxisGrid(categories, opts, config, context) {\n  if (opts.yAxis.disableGrid === true) {\n    return;\n  }\n  var spacingValid = opts.height - 2 * config.padding - config.xAxisHeight - config.legendHeight;\n  var eachSpacing = Math.floor(spacingValid / config.yAxisSplit);\n  var yAxisTotalWidth = config.yAxisWidth + config.yAxisTitleWidth;\n  var startX = config.padding + yAxisTotalWidth;\n  var _getXAxisPoints4 = getXAxisPoints(categories, opts, config),\n    xAxisPoints = _getXAxisPoints4.xAxisPoints,\n    xAxiseachSpacing = _getXAxisPoints4.eachSpacing;\n  var TotalWidth = xAxiseachSpacing * (xAxisPoints.length - 1);\n  var endX = startX + TotalWidth;\n  var points = [];\n  for (var i = 0; i < config.yAxisSplit; i++) {\n    points.push(config.padding + eachSpacing * i);\n  }\n  points.push(config.padding + eachSpacing * config.yAxisSplit + 2);\n  context.save();\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n  if (opts.yAxis.gridType == 'dash') {\n    context.setLineDash([opts.yAxis.dashLength, opts.yAxis.dashLength]);\n  }\n  context.beginPath();\n  context.setStrokeStyle(opts.yAxis.gridColor || \"#cccccc\");\n  context.setLineWidth(1 * opts.pixelRatio);\n  points.forEach(function (item, index) {\n    context.moveTo(startX, item);\n    context.lineTo(endX, item);\n  });\n  context.closePath();\n  context.stroke();\n  context.setLineDash([]);\n  context.restore();\n}\nfunction drawYAxis(series, opts, config, context) {\n  if (opts.yAxis.disabled === true) {\n    return;\n  }\n  var _calYAxisData4 = calYAxisData(series, opts, config),\n    rangesFormat = _calYAxisData4.rangesFormat;\n  var yAxisTotalWidth = config.yAxisWidth + config.yAxisTitleWidth;\n  var spacingValid = opts.height - 2 * config.padding - config.xAxisHeight - config.legendHeight;\n  var eachSpacing = Math.floor(spacingValid / config.yAxisSplit);\n  var startX = config.padding + yAxisTotalWidth;\n  var endX = opts.width - config.padding;\n  var endY = opts.height - config.padding - config.xAxisHeight - config.legendHeight + config.xAxisTextPadding;\n\n  // set YAxis background\n  context.beginPath();\n  context.setFillStyle(opts.background || '#ffffff');\n  if (opts._scrollDistance_ < 0) {\n    context.fillRect(0, 0, startX, endY + config.xAxisHeight);\n  }\n  context.fillRect(endX, 0, opts.width, endY + config.xAxisHeight);\n  context.closePath();\n  context.stroke();\n  var points = [];\n  for (var i = 0; i <= config.yAxisSplit; i++) {\n    points.push(config.padding + eachSpacing * i);\n  }\n  rangesFormat.forEach(function (item, index) {\n    var pos = points[index] ? points[index] : endY;\n    context.beginPath();\n    context.setFontSize(config.fontSize);\n    context.setFillStyle(opts.yAxis.fontColor || '#666666');\n    context.fillText(item, config.padding + config.yAxisTitleWidth, pos + config.fontSize / 2);\n    context.closePath();\n    context.stroke();\n  });\n  if (opts.yAxis.title) {\n    drawYAxisTitle(opts.yAxis.title, opts, config, context);\n  }\n}\nfunction drawLegend(series, opts, config, context) {\n  if (opts.legend === false) {\n    return;\n  }\n  // each legend shape width 15px\n  // the spacing between shape and text in each legend is the `padding`\n  // each legend spacing is the `padding`\n  // legend margin top `config.padding`\n\n  var _calLegendData = calLegendData(series, opts, config),\n    legendList = _calLegendData.legendList;\n  var padding = 5 * opts.pixelRatio;\n  var marginTop = 10 * opts.pixelRatio;\n  var shapeWidth = 15 * opts.pixelRatio;\n  legendList.forEach(function (itemList, listIndex) {\n    var width = 0;\n    itemList.forEach(function (item) {\n      item.name = item.name || 'undefined';\n      width += 3 * padding + measureText(item.name) + shapeWidth;\n    });\n    var startX = (opts.width - width) / 2 + padding;\n    var startY = opts.height - config.padding - config.legendHeight + listIndex * (config.fontSize + marginTop) + padding + marginTop;\n    context.setFontSize(config.fontSize);\n    itemList.forEach(function (item) {\n      switch (opts.type) {\n        case 'line':\n          context.beginPath();\n          context.setLineWidth(1 * opts.pixelRatio);\n          context.setStrokeStyle(item.color);\n          context.setFillStyle(item.color);\n          context.moveTo(startX + 7.5 * opts.pixelRatio, startY + 5 * opts.pixelRatio);\n          context.arc(startX + 7.5 * opts.pixelRatio, startY + 5 * opts.pixelRatio, 6 * opts.pixelRatio, 0, 2 * Math.PI);\n          context.closePath();\n          context.fill();\n          context.stroke();\n          break;\n        case 'pie':\n          context.beginPath();\n          context.setLineWidth(1 * opts.pixelRatio);\n          context.setStrokeStyle(item.color);\n          context.setFillStyle(item.color);\n          context.moveTo(startX + 7.5 * opts.pixelRatio, startY + 5 * opts.pixelRatio);\n          context.arc(startX + 7.5 * opts.pixelRatio, startY + 5 * opts.pixelRatio, 6 * opts.pixelRatio, 0, 2 * Math.PI);\n          context.closePath();\n          context.fill();\n          context.stroke();\n          break;\n        case 'ring':\n          context.beginPath();\n          context.setLineWidth(1 * opts.pixelRatio);\n          context.setStrokeStyle(item.color);\n          context.setFillStyle(item.color);\n          context.moveTo(startX + 7.5 * opts.pixelRatio, startY + 5 * opts.pixelRatio);\n          context.arc(startX + 7.5 * opts.pixelRatio, startY + 5 * opts.pixelRatio, 6 * opts.pixelRatio, 0, 2 * Math.PI);\n          context.closePath();\n          context.fill();\n          context.stroke();\n          break;\n        //圆弧进度图不显示图例\n        case 'gauge':\n          break;\n        case 'arcbar':\n          break;\n        default:\n          context.beginPath();\n          context.setLineWidth(1 * opts.pixelRatio);\n          context.setStrokeStyle(item.color);\n          context.setFillStyle(item.color);\n          context.moveTo(startX, startY);\n          context.fillRect(startX, startY, 15 * opts.pixelRatio, 10 * opts.pixelRatio);\n          context.closePath();\n          context.fill();\n          context.stroke();\n      }\n      startX += padding + shapeWidth;\n      context.beginPath();\n      context.setFontSize(config.fontSize);\n      context.setFillStyle(opts.extra.legendTextColor || '#333333');\n      context.fillText(item.name, startX, startY + 6 * opts.pixelRatio + 3 * opts.pixelRatio);\n      context.closePath();\n      context.stroke();\n      startX += measureText(item.name) + 2 * padding;\n    });\n  });\n}\nfunction drawPieDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var pieOption = opts.extra.pie || {};\n  series = getPieDataPoints(series, process);\n  var centerPosition = {\n    x: opts.width / 2,\n    y: (opts.height - config.legendHeight) / 2\n  };\n  var radius = Math.min(centerPosition.x - config.pieChartLinePadding - config.pieChartTextPadding - config._pieTextMaxLength_, centerPosition.y - config.pieChartLinePadding - config.pieChartTextPadding);\n  if (opts.dataLabel) {\n    radius -= 10;\n  } else {\n    radius -= 2 * config.padding;\n  }\n  var activeRadius = radius + config.pieChartLinePadding / 2;\n  series = series.map(function (eachSeries) {\n    eachSeries._start_ += (pieOption.offsetAngle || 0) * Math.PI / 180;\n    return eachSeries;\n  });\n  series.forEach(function (eachSeries, seriesIndex) {\n    if (opts.tooltip) {\n      if (opts.tooltip.index == seriesIndex) {\n        context.beginPath();\n        context.setFillStyle(hexToRgb(eachSeries.color, opts.extra.pie.activeOpacity || 0.5));\n        context.moveTo(centerPosition.x, centerPosition.y);\n        context.arc(centerPosition.x, centerPosition.y, activeRadius, eachSeries._start_, eachSeries._start_ + 2 * eachSeries._proportion_ * Math.PI);\n        context.closePath();\n        context.fill();\n      }\n    }\n    context.beginPath();\n    context.setLineWidth(2 * opts.pixelRatio);\n    context.lineJoin = \"round\";\n    context.setStrokeStyle('#ffffff');\n    context.setFillStyle(eachSeries.color);\n    context.moveTo(centerPosition.x, centerPosition.y);\n    context.arc(centerPosition.x, centerPosition.y, radius, eachSeries._start_, eachSeries._start_ + 2 * eachSeries._proportion_ * Math.PI);\n    context.closePath();\n    context.fill();\n    if (opts.disablePieStroke !== true) {\n      context.stroke();\n    }\n  });\n  if (opts.type === 'ring') {\n    var innerPieWidth = radius * 0.6;\n    if (typeof opts.extra.pie.ringWidth === 'number' && opts.extra.pie.ringWidth > 0) {\n      innerPieWidth = Math.max(0, radius - opts.extra.pie.ringWidth);\n    }\n    context.beginPath();\n    context.setFillStyle(opts.background || '#ffffff');\n    context.moveTo(centerPosition.x, centerPosition.y);\n    context.arc(centerPosition.x, centerPosition.y, innerPieWidth, 0, 2 * Math.PI);\n    context.closePath();\n    context.fill();\n  }\n  if (opts.dataLabel !== false && process === 1) {\n    // fix https://github.com/xiaolin3303/wx-charts/issues/132\n    var valid = false;\n    for (var i = 0, len = series.length; i < len; i++) {\n      if (series[i].data > 0) {\n        valid = true;\n        break;\n      }\n    }\n    if (valid) {\n      drawPieText(series, opts, config, context, radius, centerPosition);\n    }\n  }\n  if (process === 1 && opts.type === 'ring') {\n    drawRingTitle(opts, config, context);\n  }\n  return {\n    center: centerPosition,\n    radius: radius,\n    series: series\n  };\n}\nfunction drawArcbarDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var arcbarOption = opts.extra.arcbar || {};\n  arcbarOption.startAngle = arcbarOption.startAngle ? arcbarOption.startAngle : 0.75;\n  arcbarOption.endAngle = arcbarOption.endAngle ? arcbarOption.endAngle : 0.25;\n  arcbarOption.type = arcbarOption.type ? arcbarOption.type : 'default';\n  series = getArcbarDataPoints(series, arcbarOption, process);\n  var centerPosition = {\n    x: opts.width / 2,\n    y: opts.height / 2\n  };\n  var radius = Math.min(centerPosition.x, centerPosition.y);\n  if (typeof arcbarOption.width === 'number' && arcbarOption.width > 0) {\n    arcbarOption.width = arcbarOption.width;\n  } else {\n    arcbarOption.width = 12 * opts.pixelRatio;\n  }\n  radius -= config.padding + arcbarOption.width / 2;\n\n  //背景颜色\n  context.setLineWidth(arcbarOption.width); // 设置圆环的宽度\n  context.setStrokeStyle(arcbarOption.backgroundColor || '#E9E9E9'); // 设置圆环的颜色\n  context.setLineCap('round'); // 设置圆环端点的形状\n  context.beginPath(); //开始一个新的路径\n  if (arcbarOption.type == 'default') {\n    context.arc(centerPosition.x, centerPosition.y, radius, arcbarOption.startAngle * Math.PI, arcbarOption.endAngle * Math.PI, false);\n  } else {\n    context.arc(centerPosition.x, centerPosition.y, radius, 0, 2 * Math.PI, false);\n  }\n  context.stroke(); //对当前路径进行描边\n\n  series.forEach(function (eachSeries) {\n    context.setLineWidth(arcbarOption.width);\n    context.setStrokeStyle(eachSeries.color);\n    context.setLineCap('round');\n    context.beginPath();\n    context.arc(centerPosition.x, centerPosition.y, radius, arcbarOption.startAngle * Math.PI, eachSeries._proportion_ * Math.PI, false);\n    context.stroke();\n  });\n  drawRingTitle(opts, config, context);\n  return {\n    center: centerPosition,\n    radius: radius,\n    series: series\n  };\n}\nfunction drawGaugeDataPoints(categories, series, opts, config, context) {\n  var process = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  var gaugeOption = opts.extra.gauge || {};\n  gaugeOption.startAngle = gaugeOption.startAngle ? gaugeOption.startAngle : 0.75;\n  if (gaugeOption.oldAngle == undefined) {\n    gaugeOption.oldAngle = gaugeOption.startAngle;\n  }\n  if (gaugeOption.oldData == undefined) {\n    gaugeOption.oldData = 0;\n  }\n  gaugeOption.endAngle = gaugeOption.endAngle ? gaugeOption.endAngle : 0.25;\n  categories = getGaugeAxisPoints(categories, gaugeOption.startAngle, gaugeOption.endAngle);\n  var centerPosition = {\n    x: opts.width / 2,\n    y: opts.height / 2\n  };\n  var radius = Math.min(centerPosition.x, centerPosition.y);\n  if (typeof gaugeOption.width === 'number' && gaugeOption.width > 0) {\n    gaugeOption.width = gaugeOption.width;\n  } else {\n    gaugeOption.width = 15 * opts.pixelRatio;\n  }\n  radius -= config.padding + gaugeOption.width / 2;\n  var innerRadius = radius - gaugeOption.width;\n\n  //画背景\n  context.setLineWidth(gaugeOption.width);\n  context.setLineCap('butt');\n  categories.forEach(function (eachCategories) {\n    context.beginPath();\n    context.setStrokeStyle(eachCategories.color);\n    context.arc(centerPosition.x, centerPosition.y, radius, eachCategories._startAngle_ * Math.PI, eachCategories._endAngle_ * Math.PI, false);\n    context.stroke();\n  });\n  context.save();\n\n  //画刻度线\n  var totalAngle = gaugeOption.startAngle - gaugeOption.endAngle + 1;\n  gaugeOption.splitLine.fixRadius = gaugeOption.splitLine.fixRadius ? gaugeOption.splitLine.fixRadius : 0;\n  gaugeOption.splitLine.splitNumber = gaugeOption.splitLine.splitNumber ? gaugeOption.splitLine.splitNumber : 10;\n  gaugeOption.splitLine.width = gaugeOption.splitLine.width ? gaugeOption.splitLine.width : 15 * opts.pixelRatio;\n  gaugeOption.splitLine.color = gaugeOption.splitLine.color ? gaugeOption.splitLine.color : '#FFFFFF';\n  gaugeOption.splitLine.childNumber = gaugeOption.splitLine.childNumber ? gaugeOption.splitLine.childNumber : 5;\n  gaugeOption.splitLine.childWidth = gaugeOption.splitLine.childWidth ? gaugeOption.splitLine.childWidth : 5 * opts.pixelRatio;\n  var splitAngle = totalAngle / gaugeOption.splitLine.splitNumber;\n  var childAngle = totalAngle / gaugeOption.splitLine.splitNumber / gaugeOption.splitLine.childNumber;\n  var startX = -radius - gaugeOption.width * 0.5 - gaugeOption.splitLine.fixRadius;\n  var endX = -radius - gaugeOption.width * 0.5 - gaugeOption.splitLine.fixRadius + gaugeOption.splitLine.width;\n  var childendX = -radius - gaugeOption.width * 0.5 - gaugeOption.splitLine.fixRadius + gaugeOption.splitLine.childWidth;\n  context.translate(centerPosition.x, centerPosition.y);\n  context.rotate((gaugeOption.startAngle - 1) * Math.PI);\n  for (var i = 0; i < gaugeOption.splitLine.splitNumber + 1; i++) {\n    context.beginPath();\n    context.setStrokeStyle(gaugeOption.splitLine.color);\n    context.setLineWidth(2 * opts.pixelRatio);\n    context.moveTo(startX, 0);\n    context.lineTo(endX, 0);\n    context.stroke();\n    context.rotate(splitAngle * Math.PI);\n  }\n  context.restore();\n  context.save();\n  context.translate(centerPosition.x, centerPosition.y);\n  context.rotate((gaugeOption.startAngle - 1) * Math.PI);\n  for (var _i = 0; _i < gaugeOption.splitLine.splitNumber * gaugeOption.splitLine.childNumber + 1; _i++) {\n    context.beginPath();\n    context.setStrokeStyle(gaugeOption.splitLine.color);\n    context.setLineWidth(1 * opts.pixelRatio);\n    context.moveTo(startX, 0);\n    context.lineTo(childendX, 0);\n    context.stroke();\n    context.rotate(childAngle * Math.PI);\n  }\n  context.restore();\n\n  //画指针\n  gaugeOption.pointer.width = gaugeOption.pointer.width ? gaugeOption.pointer.width : 15 * opts.pixelRatio;\n  if (gaugeOption.pointer.color == undefined || gaugeOption.pointer.color == 'auto') {\n    gaugeOption.pointer.color == 'auto';\n  } else {\n    gaugeOption.pointer.color == gaugeOption.pointer.color;\n  }\n  series = getGaugeDataPoints(series, categories, gaugeOption, process);\n  series.forEach(function (eachSeries) {\n    context.save();\n    context.translate(centerPosition.x, centerPosition.y);\n    context.rotate((eachSeries._proportion_ - 1) * Math.PI);\n    context.beginPath();\n    context.setFillStyle(eachSeries.color);\n    context.moveTo(gaugeOption.pointer.width, 0);\n    context.lineTo(0, -gaugeOption.pointer.width / 2);\n    context.lineTo(-innerRadius, 0);\n    context.lineTo(0, gaugeOption.pointer.width / 2);\n    context.lineTo(gaugeOption.pointer.width, 0);\n    context.closePath();\n    context.fill();\n    context.beginPath();\n    context.setFillStyle('#FFFFFF');\n    context.arc(0, 0, gaugeOption.pointer.width / 6, 0, 2 * Math.PI, false);\n    context.fill();\n    context.restore();\n  });\n  if (opts.dataLabel !== false) {\n    drawGaugeLabel(gaugeOption, radius, centerPosition, opts, config, context);\n  }\n  drawRingTitle(opts, config, context);\n  if (process === 1 && opts.type === 'gauge') {\n    gaugeOption.oldAngle = series[0]._proportion_;\n    gaugeOption.oldData = series[0].data;\n  }\n  return {\n    center: centerPosition,\n    radius: radius,\n    innerRadius: innerRadius,\n    categories: categories,\n    totalAngle: totalAngle\n  };\n}\nfunction drawRadarDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var radarOption = opts.extra.radar || {};\n  var coordinateAngle = getRadarCoordinateSeries(opts.categories.length);\n  var centerPosition = {\n    x: opts.width / 2,\n    y: (opts.height - config.legendHeight) / 2\n  };\n  var radius = Math.min(centerPosition.x - (getMaxTextListLength(opts.categories) + config.radarLabelTextMargin), centerPosition.y - config.radarLabelTextMargin);\n  radius -= config.padding;\n\n  // draw grid\n  context.beginPath();\n  context.setLineWidth(1 * opts.pixelRatio);\n  context.setStrokeStyle(radarOption.gridColor || \"#cccccc\");\n  coordinateAngle.forEach(function (angle) {\n    var pos = convertCoordinateOrigin(radius * Math.cos(angle), radius * Math.sin(angle), centerPosition);\n    context.moveTo(centerPosition.x, centerPosition.y);\n    context.lineTo(pos.x, pos.y);\n  });\n  context.stroke();\n  context.closePath();\n\n  // draw split line grid\n\n  var _loop = function _loop(i) {\n    var startPos = {};\n    context.beginPath();\n    context.setLineWidth(1 * opts.pixelRatio);\n    context.setStrokeStyle(radarOption.gridColor || \"#cccccc\");\n    coordinateAngle.forEach(function (angle, index) {\n      var pos = convertCoordinateOrigin(radius / config.radarGridCount * i * Math.cos(angle), radius / config.radarGridCount * i * Math.sin(angle), centerPosition);\n      if (index === 0) {\n        startPos = pos;\n        context.moveTo(pos.x, pos.y);\n      } else {\n        context.lineTo(pos.x, pos.y);\n      }\n    });\n    context.lineTo(startPos.x, startPos.y);\n    context.stroke();\n    context.closePath();\n  };\n  for (var i = 1; i <= config.radarGridCount; i++) {\n    _loop(i);\n  }\n  var radarDataPoints = getRadarDataPoints(coordinateAngle, centerPosition, radius, series, opts, process);\n  radarDataPoints.forEach(function (eachSeries, seriesIndex) {\n    // 绘制区域数据\n    context.beginPath();\n    context.setFillStyle(eachSeries.color);\n    context.setGlobalAlpha(0.3);\n    eachSeries.data.forEach(function (item, index) {\n      if (index === 0) {\n        context.moveTo(item.position.x, item.position.y);\n      } else {\n        context.lineTo(item.position.x, item.position.y);\n      }\n    });\n    context.closePath();\n    context.fill();\n    context.setGlobalAlpha(1);\n    if (opts.dataPointShape !== false) {\n      var shape = config.dataPointShape[seriesIndex % config.dataPointShape.length];\n      var points = eachSeries.data.map(function (item) {\n        return item.position;\n      });\n      drawPointShape(points, eachSeries.color, shape, context, opts);\n    }\n  });\n  // draw label text\n  drawRadarLabel(coordinateAngle, radius, centerPosition, opts, config, context);\n  return {\n    center: centerPosition,\n    radius: radius,\n    angleList: coordinateAngle\n  };\n}\nfunction drawCanvas(opts, context) {\n  context.draw();\n}\nvar Timing = {\n  easeIn: function easeIn(pos) {\n    return Math.pow(pos, 3);\n  },\n  easeOut: function easeOut(pos) {\n    return Math.pow(pos - 1, 3) + 1;\n  },\n  easeInOut: function easeInOut(pos) {\n    if ((pos /= 0.5) < 1) {\n      return 0.5 * Math.pow(pos, 3);\n    } else {\n      return 0.5 * (Math.pow(pos - 2, 3) + 2);\n    }\n  },\n  linear: function linear(pos) {\n    return pos;\n  }\n};\nfunction Animation(opts) {\n  this.isStop = false;\n  opts.duration = typeof opts.duration === 'undefined' ? 1000 : opts.duration;\n  opts.timing = opts.timing || 'linear';\n  var delay = 17;\n  var createAnimationFrame = function createAnimationFrame() {\n    if (typeof requestAnimationFrame !== 'undefined') {\n      return requestAnimationFrame;\n    } else if (typeof setTimeout !== 'undefined') {\n      return function (step, delay) {\n        setTimeout(function () {\n          var timeStamp = +new Date();\n          step(timeStamp);\n        }, delay);\n      };\n    } else {\n      return function (step) {\n        step(null);\n      };\n    }\n  };\n  var animationFrame = createAnimationFrame();\n  var startTimeStamp = null;\n  var _step = function step(timestamp) {\n    if (timestamp === null || this.isStop === true) {\n      opts.onProcess && opts.onProcess(1);\n      opts.onAnimationFinish && opts.onAnimationFinish();\n      return;\n    }\n    if (startTimeStamp === null) {\n      startTimeStamp = timestamp;\n    }\n    if (timestamp - startTimeStamp < opts.duration) {\n      var process = (timestamp - startTimeStamp) / opts.duration;\n      var timingFunction = Timing[opts.timing];\n      process = timingFunction(process);\n      opts.onProcess && opts.onProcess(process);\n      animationFrame(_step, delay);\n    } else {\n      opts.onProcess && opts.onProcess(1);\n      opts.onAnimationFinish && opts.onAnimationFinish();\n    }\n  };\n  _step = _step.bind(this);\n  animationFrame(_step, delay);\n}\n\n// stop animation immediately\n// and tigger onAnimationFinish\nAnimation.prototype.stop = function () {\n  this.isStop = true;\n};\nfunction drawCharts(type, opts, config, context) {\n  var _this = this;\n  var series = opts.series;\n  var categories = opts.categories;\n  series = fillSeriesColor(series, config);\n  series = fillSeriesType(series, opts);\n  var seriesMA = null;\n  if (type == 'candle') {\n    var average = assign({}, opts.extra.candle.average);\n    if (average.show) {\n      seriesMA = calCandleMA(average.day, average.name, average.color, series[0].data);\n    }\n  }\n  var _calLegendData = calLegendData(series, opts, config),\n    legendHeight = _calLegendData.legendHeight;\n  config.legendHeight = legendHeight;\n  var _calYAxisData = calYAxisData(series, opts, config),\n    yAxisWidth = _calYAxisData.yAxisWidth;\n  config.yAxisWidth = yAxisWidth;\n  if (categories && categories.length) {\n    var _calCategoriesData = calCategoriesData(categories, opts, config),\n      xAxisHeight = _calCategoriesData.xAxisHeight,\n      angle = _calCategoriesData.angle;\n    config.xAxisHeight = xAxisHeight;\n    config._xAxisTextAngle_ = angle;\n  }\n  if (type === 'pie' || type === 'ring') {\n    config._pieTextMaxLength_ = opts.dataLabel === false ? 0 : getPieTextMaxLength(series);\n  }\n  var duration = opts.animation ? 1000 : 0;\n  this.animationInstance && this.animationInstance.stop();\n\n  //先清空画布,不然百度和支付宝ToolTip有重影\n  context.clearRect(0, 0, opts.width, opts.height);\n  switch (type) {\n    case 'line':\n      this.animationInstance = new Animation({\n        timing: 'easeIn',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          drawYAxisGrid(categories, opts, config, context);\n          drawXAxis(categories, opts, config, context);\n          var _drawLineDataPoints = drawLineDataPoints(series, opts, config, context, process),\n            xAxisPoints = _drawLineDataPoints.xAxisPoints,\n            calPoints = _drawLineDataPoints.calPoints,\n            eachSpacing = _drawLineDataPoints.eachSpacing;\n          _this.chartData.xAxisPoints = xAxisPoints;\n          _this.chartData.calPoints = calPoints;\n          _this.chartData.eachSpacing = eachSpacing;\n          drawLegend(opts.series, opts, config, context);\n          drawYAxis(series, opts, config, context);\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        }\n      });\n      break;\n    case 'mix':\n      this.animationInstance = new Animation({\n        timing: 'easeIn',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          drawYAxisGrid(categories, opts, config, context);\n          drawXAxis(categories, opts, config, context);\n          var _drawMixDataPoints = drawMixDataPoints(series, opts, config, context, process),\n            xAxisPoints = _drawMixDataPoints.xAxisPoints,\n            calPoints = _drawMixDataPoints.calPoints,\n            eachSpacing = _drawMixDataPoints.eachSpacing;\n          _this.chartData.xAxisPoints = xAxisPoints;\n          _this.chartData.calPoints = calPoints;\n          _this.chartData.eachSpacing = eachSpacing;\n          drawLegend(opts.series, opts, config, context);\n          drawYAxis(series, opts, config, context);\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        }\n      });\n      break;\n    case 'column':\n      this.animationInstance = new Animation({\n        timing: 'easeIn',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          drawYAxisGrid(categories, opts, config, context);\n          drawXAxis(categories, opts, config, context);\n          var _drawColumnDataPoints = drawColumnDataPoints(series, opts, config, context, process),\n            xAxisPoints = _drawColumnDataPoints.xAxisPoints,\n            calPoints = _drawColumnDataPoints.calPoints,\n            eachSpacing = _drawColumnDataPoints.eachSpacing;\n          _this.chartData.xAxisPoints = xAxisPoints;\n          _this.chartData.calPoints = calPoints;\n          _this.chartData.eachSpacing = eachSpacing;\n          drawLegend(opts.series, opts, config, context);\n          drawYAxis(series, opts, config, context);\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        }\n      });\n      break;\n    case 'area':\n      this.animationInstance = new Animation({\n        timing: 'easeIn',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          drawYAxisGrid(categories, opts, config, context);\n          drawXAxis(categories, opts, config, context);\n          var _drawAreaDataPoints = drawAreaDataPoints(series, opts, config, context, process),\n            xAxisPoints = _drawAreaDataPoints.xAxisPoints,\n            calPoints = _drawAreaDataPoints.calPoints,\n            eachSpacing = _drawAreaDataPoints.eachSpacing;\n          _this.chartData.xAxisPoints = xAxisPoints;\n          _this.chartData.calPoints = calPoints;\n          _this.chartData.eachSpacing = eachSpacing;\n          drawLegend(opts.series, opts, config, context);\n          drawYAxis(series, opts, config, context);\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        }\n      });\n      break;\n    case 'ring':\n    case 'pie':\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          _this.chartData.pieData = drawPieDataPoints(series, opts, config, context, process);\n          drawLegend(opts.series, opts, config, context);\n          drawToolTipBridge(opts, config, context, process);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        }\n      });\n      break;\n    case 'radar':\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          _this.chartData.radarData = drawRadarDataPoints(series, opts, config, context, process);\n          drawLegend(opts.series, opts, config, context);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        }\n      });\n      break;\n    case 'arcbar':\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          _this.chartData.arcbarData = drawArcbarDataPoints(series, opts, config, context, process);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        }\n      });\n      break;\n    case 'gauge':\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          _this.chartData.gaugeData = drawGaugeDataPoints(categories, series, opts, config, context, process);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        }\n      });\n      break;\n    case 'candle':\n      this.animationInstance = new Animation({\n        timing: 'easeIn',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          if (opts.rotate) {\n            contextRotate(context, opts);\n          }\n          drawYAxisGrid(categories, opts, config, context);\n          drawXAxis(categories, opts, config, context);\n          var _drawCandleDataPoints = drawCandleDataPoints(series, seriesMA, opts, config, context, process),\n            xAxisPoints = _drawCandleDataPoints.xAxisPoints,\n            calPoints = _drawCandleDataPoints.calPoints,\n            eachSpacing = _drawCandleDataPoints.eachSpacing;\n          _this.chartData.xAxisPoints = xAxisPoints;\n          _this.chartData.calPoints = calPoints;\n          _this.chartData.eachSpacing = eachSpacing;\n          if (seriesMA) {\n            drawLegend(seriesMA, opts, config, context);\n          } else {\n            drawLegend(opts.series, opts, config, context);\n          }\n          drawYAxis(series, opts, config, context);\n          drawToolTipBridge(opts, config, context, process, eachSpacing, xAxisPoints);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        }\n      });\n      break;\n  }\n}\n\n// simple event implement\n\nfunction Event() {\n  this.events = {};\n}\nEvent.prototype.addEventListener = function (type, listener) {\n  this.events[type] = this.events[type] || [];\n  this.events[type].push(listener);\n};\nEvent.prototype.trigger = function () {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  var type = args[0];\n  var params = args.slice(1);\n  if (!!this.events[type]) {\n    this.events[type].forEach(function (listener) {\n      try {\n        listener.apply(null, params);\n      } catch (e) {\n        __f__(\"error\", e, \" at static/u-charts/u-charts.js:3364\");\n      }\n    });\n  }\n};\nvar Charts = function Charts(opts) {\n  opts.fontSize = opts.fontSize ? opts.fontSize * opts.pixelRatio : 13 * opts.pixelRatio;\n  opts.title = opts.title || {};\n  opts.subtitle = opts.subtitle || {};\n  opts.yAxis = opts.yAxis || {};\n  opts.yAxis.gridType = opts.yAxis.gridType ? opts.yAxis.gridType : 'solid';\n  opts.yAxis.dashLength = opts.yAxis.dashLength ? opts.yAxis.dashLength : 4 * opts.pixelRatio;\n  opts.xAxis = opts.xAxis || {};\n  opts.xAxis.rotateLabel = opts.xAxis.rotateLabel ? true : false;\n  opts.xAxis.type = opts.xAxis.type ? opts.xAxis.type : 'calibration';\n  opts.xAxis.gridType = opts.xAxis.gridType ? opts.xAxis.gridType : 'solid';\n  opts.xAxis.dashLength = opts.xAxis.dashLength ? opts.xAxis.dashLength : 4 * opts.pixelRatio;\n  opts.xAxis.itemCount = opts.xAxis.itemCount ? opts.xAxis.itemCount : 5;\n  opts.xAxis.scrollAlign = opts.xAxis.scrollAlign ? opts.xAxis.scrollAlign : 'left';\n  opts.extra = opts.extra || {};\n  opts.legend = opts.legend === false ? false : true;\n  opts.rotate = opts.rotate ? true : false;\n  opts.animation = opts.animation === false ? false : true;\n  var config$$1 = assign({}, config);\n  config$$1.yAxisTitleWidth = opts.yAxis.disabled !== true && opts.yAxis.title ? config$$1.yAxisTitleWidth : 0;\n  if (opts.type == 'pie' || opts.type == 'ring') {\n    config$$1.pieChartLinePadding = opts.dataLabel === false ? 0 : opts.extra.pie.lableWidth || config$$1.pieChartLinePadding * opts.pixelRatio;\n  }\n  config$$1.pieChartTextPadding = opts.dataLabel === false ? 0 : config$$1.pieChartTextPadding * opts.pixelRatio;\n  config$$1.yAxisSplit = opts.yAxis.splitNumber ? opts.yAxis.splitNumber : config.yAxisSplit;\n  //屏幕旋转\n  config$$1.rotate = opts.rotate;\n  if (opts.rotate) {\n    var tempWidth = opts.width;\n    var tempHeight = opts.height;\n    opts.width = tempHeight;\n    opts.height = tempWidth;\n  }\n\n  //适配H5高分屏\n  config$$1.yAxisWidth = config.yAxisWidth * opts.pixelRatio;\n  config$$1.xAxisHeight = config.xAxisHeight * opts.pixelRatio;\n  if (opts.enableScroll && opts.xAxis.scrollShow) {\n    config$$1.xAxisHeight += 6 * opts.pixelRatio;\n  }\n  config$$1.xAxisLineHeight = config.xAxisLineHeight * opts.pixelRatio;\n  config$$1.legendHeight = config.legendHeight * opts.pixelRatio;\n  //config$$1.yAxisTitleWidth=config.yAxisTitleWidth*opts.pixelRatio;\n  config$$1.padding = config.padding * opts.pixelRatio;\n  config$$1.fontSize = opts.fontSize;\n  config$$1.titleFontSize = config.titleFontSize * opts.pixelRatio;\n  config$$1.subtitleFontSize = config.subtitleFontSize * opts.pixelRatio;\n  config$$1.toolTipPadding = config.toolTipPadding * opts.pixelRatio;\n  config$$1.toolTipLineHeight = config.toolTipLineHeight * opts.pixelRatio;\n  config$$1.columePadding = config.columePadding * opts.pixelRatio;\n  //config$$1.xAxisTextPadding=config.xAxisTextPadding*opts.pixelRatio;\n\n  //向配置中传入当前pixelRatio及字体大小\n  config.pixelRatio = opts.pixelRatio;\n  config.fontSize = opts.fontSize;\n  config.rotate = opts.rotate;\n  this.opts = opts;\n  this.config = config$$1;\n  opts.$this = opts.$this ? opts.$this : this;\n  this.context = uni.createCanvasContext(opts.canvasId, opts.$this);\n  // store calcuated chart data\n  // such as chart point coordinate\n  this.chartData = {};\n  this.event = new Event();\n  this.scrollOption = {\n    currentOffset: 0,\n    startTouchX: 0,\n    distance: 0,\n    lastMoveTime: 0\n  };\n\n  //计算右对齐偏移距离\n  if (opts.enableScroll && opts.xAxis.scrollAlign == 'right') {\n    var _calYAxisData = calYAxisData(opts.series, opts, config$$1),\n      yAxisWidth = _calYAxisData.yAxisWidth;\n    config$$1.yAxisWidth = yAxisWidth;\n    var offsetLeft = 0;\n    var _getXAxisPoints0 = getXAxisPoints(opts.categories, opts, config$$1),\n      xAxisPoints = _getXAxisPoints0.xAxisPoints,\n      startX = _getXAxisPoints0.startX,\n      endX = _getXAxisPoints0.endX,\n      eachSpacing = _getXAxisPoints0.eachSpacing;\n    var totalWidth = eachSpacing * (xAxisPoints.length - 1);\n    var screenWidth = endX - startX;\n    offsetLeft = screenWidth - totalWidth;\n    this.scrollOption = {\n      currentOffset: offsetLeft,\n      startTouchX: offsetLeft,\n      distance: 0,\n      lastMoveTime: 0\n    };\n    opts._scrollDistance_ = offsetLeft;\n  }\n  drawCharts.call(this, opts.type, opts, config$$1, this.context);\n};\nCharts.prototype.updateData = function () {\n  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  this.opts.series = data.series || this.opts.series;\n  this.opts.categories = data.categories || this.opts.categories;\n  var scrollPosition = data.scrollPosition || 'current';\n  switch (scrollPosition) {\n    case 'current':\n      this.opts._scrollDistance_ = this.scrollOption.currentOffset;\n      break;\n    case 'left':\n      this.opts._scrollDistance_ = 0;\n      this.scrollOption = {\n        currentOffset: 0,\n        startTouchX: 0,\n        distance: 0,\n        lastMoveTime: 0\n      };\n      break;\n    case 'right':\n      var _calYAxisData = calYAxisData(this.opts.series, this.opts, this.config),\n        yAxisWidth = _calYAxisData.yAxisWidth;\n      this.config.yAxisWidth = yAxisWidth;\n      var offsetLeft = 0;\n      var _getXAxisPoints0 = getXAxisPoints(this.opts.categories, this.opts, this.config),\n        xAxisPoints = _getXAxisPoints0.xAxisPoints,\n        startX = _getXAxisPoints0.startX,\n        endX = _getXAxisPoints0.endX,\n        eachSpacing = _getXAxisPoints0.eachSpacing;\n      var totalWidth = eachSpacing * (xAxisPoints.length - 1);\n      var screenWidth = endX - startX;\n      offsetLeft = screenWidth - totalWidth;\n      this.scrollOption = {\n        currentOffset: offsetLeft,\n        startTouchX: offsetLeft,\n        distance: 0,\n        lastMoveTime: 0\n      };\n      this.opts._scrollDistance_ = offsetLeft;\n      break;\n  }\n  var animation = data.animation == undefined ? this.opts.animation : data.animation;\n  this.opts.animation = animation;\n  this.opts.title = assign({}, this.opts.title, data.title || {});\n  this.opts.subtitle = assign({}, this.opts.subtitle, data.subtitle || {});\n  drawCharts.call(this, this.opts.type, this.opts, this.config, this.context);\n};\nCharts.prototype.zoom = function () {\n  var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.opts.xAxis.itemCount;\n  if (this.opts.enableScroll !== true) {\n    __f__(\"log\", '请启用滚动条后使用！', \" at static/u-charts/u-charts.js:3520\");\n    return;\n  }\n  //当前屏幕中间点\n  var centerPoint = Math.round(Math.abs(this.scrollOption.currentOffset) / this.chartData.eachSpacing) + Math.round(this.opts.xAxis.itemCount / 2);\n  this.opts.animation = false;\n  this.opts.xAxis.itemCount = val.itemCount;\n  //重新计算x轴偏移距离\n  var _calYAxisData = calYAxisData(this.opts.series, this.opts, this.config),\n    yAxisWidth = _calYAxisData.yAxisWidth;\n  this.config.yAxisWidth = yAxisWidth;\n  var offsetLeft = 0;\n  var _getXAxisPoints0 = getXAxisPoints(this.opts.categories, this.opts, this.config),\n    xAxisPoints = _getXAxisPoints0.xAxisPoints,\n    startX = _getXAxisPoints0.startX,\n    endX = _getXAxisPoints0.endX,\n    eachSpacing = _getXAxisPoints0.eachSpacing;\n  var centerLeft = eachSpacing * centerPoint;\n  var screenWidth = endX - startX;\n  var MaxLeft = screenWidth - eachSpacing * (xAxisPoints.length - 1);\n  offsetLeft = screenWidth / 2 - centerLeft;\n  if (offsetLeft > 0) {\n    offsetLeft = 0;\n  }\n  if (offsetLeft < MaxLeft) {\n    offsetLeft = MaxLeft;\n  }\n  this.scrollOption = {\n    currentOffset: offsetLeft,\n    startTouchX: offsetLeft,\n    distance: 0,\n    lastMoveTime: 0\n  };\n  this.opts._scrollDistance_ = offsetLeft;\n  drawCharts.call(this, this.opts.type, this.opts, this.config, this.context);\n};\nCharts.prototype.stopAnimation = function () {\n  this.animationInstance && this.animationInstance.stop();\n};\nCharts.prototype.addEventListener = function (type, listener) {\n  this.event.addEventListener(type, listener);\n};\nCharts.prototype.getCurrentDataIndex = function (e) {\n  var touches = e.mp.changedTouches[0];\n  if (touches) {\n    var _touches$ = getTouches(touches, this.opts, e);\n    if (this.opts.type === 'pie' || this.opts.type === 'ring') {\n      return findPieChartCurrentIndex({\n        x: _touches$.x,\n        y: _touches$.y\n      }, this.chartData.pieData);\n    } else if (this.opts.type === 'radar') {\n      return findRadarChartCurrentIndex({\n        x: _touches$.x,\n        y: _touches$.y\n      }, this.chartData.radarData, this.opts.categories.length);\n    } else {\n      return findCurrentIndex({\n        x: _touches$.x,\n        y: _touches$.y\n      }, this.chartData.xAxisPoints, this.opts, this.config, Math.abs(this.scrollOption.currentOffset));\n    }\n  }\n  return -1;\n};\nCharts.prototype.showToolTip = function (e) {\n  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var touches = e.mp.changedTouches[0];\n  var _touches$ = getTouches(touches, this.opts, e);\n  if (this.opts.type === 'line' || this.opts.type === 'area' || this.opts.type === 'column') {\n    var index = this.getCurrentDataIndex(e);\n    var currentOffset = this.scrollOption.currentOffset;\n    var opts = assign({}, this.opts, {\n      _scrollDistance_: currentOffset,\n      animation: false\n    });\n    if (index > -1) {\n      var seriesData = getSeriesDataItem(this.opts.series, index);\n      if (seriesData.length !== 0) {\n        var _getToolTipData = getToolTipData(seriesData, this.chartData.calPoints, index, this.opts.categories, option),\n          textList = _getToolTipData.textList,\n          offset = _getToolTipData.offset;\n        offset.y = _touches$.y;\n        opts.tooltip = {\n          textList: textList,\n          offset: offset,\n          option: option,\n          index: index\n        };\n      }\n    }\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n  }\n  if (this.opts.type === 'mix') {\n    var index = this.getCurrentDataIndex(e);\n    var currentOffset = this.scrollOption.currentOffset;\n    var opts = assign({}, this.opts, {\n      _scrollDistance_: currentOffset,\n      animation: false\n    });\n    if (index > -1) {\n      var seriesData = getSeriesDataItem(this.opts.series, index);\n      if (seriesData.length !== 0) {\n        var _getMixToolTipData = getMixToolTipData(seriesData, this.chartData.calPoints, index, this.opts.categories, option),\n          textList = _getMixToolTipData.textList,\n          offset = _getMixToolTipData.offset;\n        offset.y = _touches$.y;\n        opts.tooltip = {\n          textList: textList,\n          offset: offset,\n          option: option,\n          index: index\n        };\n      }\n    }\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n  }\n  if (this.opts.type === 'candle') {\n    var index = this.getCurrentDataIndex(e);\n    var currentOffset = this.scrollOption.currentOffset;\n    var opts = assign({}, this.opts, {\n      _scrollDistance_: currentOffset,\n      animation: false\n    });\n    if (index > -1) {\n      var seriesData = getSeriesDataItem(this.opts.series, index);\n      if (seriesData.length !== 0) {\n        var _getToolTipData = getCandleToolTipData(this.opts.series[0].data, seriesData, this.chartData.calPoints, index, this.opts.categories, this.opts.extra.candle, option),\n          textList = _getToolTipData.textList,\n          offset = _getToolTipData.offset;\n        offset.y = _touches$.y;\n        opts.tooltip = {\n          textList: textList,\n          offset: offset,\n          option: option,\n          index: index\n        };\n      }\n    }\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n  }\n  if (this.opts.type === 'pie' || this.opts.type === 'ring') {\n    var index = this.getCurrentDataIndex(e);\n    var currentOffset = this.scrollOption.currentOffset;\n    var opts = assign({}, this.opts, {\n      _scrollDistance_: currentOffset,\n      animation: false\n    });\n    if (index > -1) {\n      var seriesData = this.opts.series[index];\n      var textList = [{\n        text: option.format ? option.format(seriesData) : seriesData.name + ': ' + seriesData.data,\n        color: seriesData.color\n      }];\n      var offset = {\n        x: _touches$.x,\n        y: _touches$.y\n      };\n      opts.tooltip = {\n        textList: textList,\n        offset: offset,\n        option: option,\n        index: index\n      };\n    }\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n  }\n};\nCharts.prototype.translate = function (distance) {\n  this.scrollOption = {\n    currentOffset: distance,\n    startTouchX: distance,\n    distance: 0,\n    lastMoveTime: 0\n  };\n  var opts = assign({}, this.opts, {\n    _scrollDistance_: distance,\n    animation: false\n  });\n  drawCharts.call(this, this.opts.type, opts, this.config, this.context);\n};\nCharts.prototype.scrollStart = function (e) {\n  var touches = e.mp.changedTouches[0];\n  var _touches$ = getTouches(touches, this.opts, e);\n  if (touches && this.opts.enableScroll === true) {\n    if (touches.x) {\n      this.scrollOption.startTouchX = _touches$.x;\n    } else {\n      this.scrollOption.startTouchX = _touches$.clientX;\n    }\n  }\n};\nCharts.prototype.scroll = function (e) {\n  if (this.scrollOption.lastMoveTime === 0) {\n    this.scrollOption.lastMoveTime = Date.now();\n  }\n  var Limit = this.opts.extra.touchMoveLimit || 20;\n  var currMoveTime = Date.now();\n  var duration = currMoveTime - this.scrollOption.lastMoveTime;\n  if (duration < Math.floor(1000 / Limit)) return;\n  this.scrollOption.lastMoveTime = currMoveTime;\n  var touches = e.mp.changedTouches[0];\n  var _touches$ = getTouches(touches, this.opts, e);\n  if (touches && this.opts.enableScroll === true) {\n    var _distance;\n    if (touches.x) {\n      _distance = _touches$.x - this.scrollOption.startTouchX;\n    } else {\n      _distance = _touches$.clientX - this.scrollOption.startTouchX;\n    }\n    var currentOffset = this.scrollOption.currentOffset;\n    var validDistance = calValidDistance(currentOffset + _distance, this.chartData, this.config, this.opts);\n    this.scrollOption.distance = _distance = validDistance - currentOffset;\n    var opts = assign({}, this.opts, {\n      _scrollDistance_: currentOffset + _distance,\n      animation: false\n    });\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n    return currentOffset + _distance;\n  }\n};\nCharts.prototype.scrollEnd = function (e) {\n  if (this.opts.enableScroll === true) {\n    var _scrollOption = this.scrollOption,\n      currentOffset = _scrollOption.currentOffset,\n      distance = _scrollOption.distance;\n    this.scrollOption.currentOffset = currentOffset + distance;\n    this.scrollOption.distance = 0;\n  }\n};\nvar _default = Charts;\nexports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vc3RhdGljL3UtY2hhcnRzL3UtY2hhcnRzLmpzIl0sIm5hbWVzIjpbImNvbmZpZyIsInlBeGlzV2lkdGgiLCJ5QXhpc1NwbGl0IiwieEF4aXNIZWlnaHQiLCJ4QXhpc0xpbmVIZWlnaHQiLCJsZWdlbmRIZWlnaHQiLCJ5QXhpc1RpdGxlV2lkdGgiLCJwYWRkaW5nIiwicGl4ZWxSYXRpbyIsInJvdGF0ZSIsImNvbHVtZVBhZGRpbmciLCJmb250U2l6ZSIsImRhdGFQb2ludFNoYXBlIiwiY29sb3JzIiwicGllQ2hhcnRMaW5lUGFkZGluZyIsInBpZUNoYXJ0VGV4dFBhZGRpbmciLCJ4QXhpc1RleHRQYWRkaW5nIiwidGl0bGVDb2xvciIsInRpdGxlRm9udFNpemUiLCJzdWJ0aXRsZUNvbG9yIiwic3VidGl0bGVGb250U2l6ZSIsInRvb2xUaXBQYWRkaW5nIiwidG9vbFRpcEJhY2tncm91bmQiLCJ0b29sVGlwT3BhY2l0eSIsInRvb2xUaXBMaW5lSGVpZ2h0IiwicmFkYXJHcmlkQ291bnQiLCJyYWRhckxhYmVsVGV4dE1hcmdpbiIsImdhdWdlTGFiZWxUZXh0TWFyZ2luIiwiYXNzaWduIiwidGFyZ2V0IiwidmFyQXJncyIsIlR5cGVFcnJvciIsInRvIiwiT2JqZWN0IiwiaW5kZXgiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJuZXh0U291cmNlIiwibmV4dEtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsInV0aWwiLCJ0b0ZpeGVkIiwibnVtIiwibGltaXQiLCJpc0Zsb2F0IiwiYXBwcm94aW1hdGVseUVxdWFsIiwibnVtMSIsIm51bTIiLCJNYXRoIiwiYWJzIiwiaXNTYW1lU2lnbiIsImlzU2FtZVhDb29yZGluYXRlQXJlYSIsInAxIiwicDIiLCJ4IiwiaXNDb2xsaXNpb24iLCJvYmoxIiwib2JqMiIsImVuZCIsInN0YXJ0Iiwid2lkdGgiLCJ5IiwiaGVpZ2h0IiwiZmxhZyIsImhleFRvUmdiIiwiaGV4VmFsdWUiLCJvcGMiLCJyZ3giLCJoZXgiLCJyZXBsYWNlIiwibSIsInIiLCJnIiwiYiIsInJnYiIsImV4ZWMiLCJwYXJzZUludCIsImZpbmRSYW5nZSIsInR5cGUiLCJpc05hTiIsIkVycm9yIiwibXVsdGlwbGUiLCJjZWlsIiwiZmxvb3IiLCJjYWxDYW5kbGVNQSIsImRheUFyciIsIm5hbWVBcnIiLCJjb2xvckFyciIsImtkYXRhIiwic2VyaWVzVGVtcCIsImsiLCJzZXJpZXNJdGVtIiwiZGF0YSIsIm5hbWUiLCJjb2xvciIsImkiLCJsZW4iLCJwdXNoIiwic3VtIiwiaiIsImNhbFZhbGlkRGlzdGFuY2UiLCJkaXN0YW5jZSIsImNoYXJ0RGF0YSIsIm9wdHMiLCJkYXRhQ2hhcnRBcmVhV2lkdGgiLCJ4QXhpc1BvaW50cyIsImRhdGFDaGFydFdpZHRoIiwiZWFjaFNwYWNpbmciLCJjYXRlZ29yaWVzIiwidmFsaWREaXN0YW5jZSIsImlzSW5BbmdsZVJhbmdlIiwiYW5nbGUiLCJzdGFydEFuZ2xlIiwiZW5kQW5nbGUiLCJhZGp1c3QiLCJQSSIsImNhbFJvdGF0ZVRyYW5zbGF0ZSIsImgiLCJ4diIsInl2IiwidHJhbnNYIiwic3FydCIsInRyYW5zWSIsImNyZWF0ZUN1cnZlQ29udHJvbFBvaW50cyIsInBvaW50cyIsImlzTm90TWlkZGxlUG9pbnQiLCJtYXgiLCJtaW4iLCJhIiwicEF4IiwicEF5IiwicEJ4IiwicEJ5IiwibGFzdCIsImN0ckEiLCJjdHJCIiwiY29udmVydENvb3JkaW5hdGVPcmlnaW4iLCJjZW50ZXIiLCJhdm9pZENvbGxpc2lvbiIsIm9iaiIsImZpbGxTZXJpZXNDb2xvciIsInNlcmllcyIsIm1hcCIsIml0ZW0iLCJmaWxsU2VyaWVzVHlwZSIsImdldERhdGFSYW5nZSIsIm1pbkRhdGEiLCJtYXhEYXRhIiwicmFuZ2UiLCJtaW5SYW5nZSIsIm1heFJhbmdlIiwibWVhc3VyZVRleHQiLCJ0ZXh0IiwidW5kZWZpbmVkIiwiU3RyaW5nIiwic3BsaXQiLCJmb3JFYWNoIiwidGVzdCIsImRhdGFDb21iaW5lIiwicmVkdWNlIiwiY29uY2F0IiwiZGF0YUNvbWJpbmVTdGFjayIsIkFycmF5IiwiZ2V0VG91Y2hlcyIsInRvdWNoZXMiLCJlIiwiY2xpZW50WCIsInBhZ2VZIiwibXAiLCJjdXJyZW50VGFyZ2V0Iiwib2Zmc2V0VG9wIiwiZ2V0U2VyaWVzRGF0YUl0ZW0iLCJzdHlsZSIsInNoYXBlIiwiZGlzYWJsZUxlZ2VuZCIsImZvcm1hdCIsImdldE1heFRleHRMaXN0TGVuZ3RoIiwibGlzdCIsImxlbmd0aExpc3QiLCJhcHBseSIsImdldFJhZGFyQ29vcmRpbmF0ZVNlcmllcyIsImVhY2hBbmdsZSIsIkNvb3JkaW5hdGVTZXJpZXMiLCJnZXRUb29sVGlwRGF0YSIsInNlcmllc0RhdGEiLCJjYWxQb2ludHMiLCJvcHRpb24iLCJ0ZXh0TGlzdCIsInZhbGlkQ2FsUG9pbnRzIiwib2Zmc2V0Iiwicm91bmQiLCJnZXRNaXhUb29sVGlwRGF0YSIsImZpbHRlciIsImdldENhbmRsZVRvb2xUaXBEYXRhIiwiZXh0cmEiLCJ1cENvbG9yIiwidXBGaWxsIiwiZG93bkNvbG9yIiwiZG93bkZpbGwiLCJ0ZXh0MCIsInRleHQxIiwidGV4dDIiLCJ0ZXh0MyIsInRleHQ0IiwiZmluZEN1cnJlbnRJbmRleCIsImN1cnJlbnRQb2ludHMiLCJjdXJyZW50SW5kZXgiLCJpc0luRXhhY3RDaGFydEFyZWEiLCJmaW5kUmFkYXJDaGFydEN1cnJlbnRJbmRleCIsInJhZGFyRGF0YSIsImNvdW50IiwiZWFjaEFuZ2xlQXJlYSIsImlzSW5FeGFjdFBpZUNoYXJ0QXJlYSIsInJhZGl1cyIsImZpeEFuZ2xlIiwiYXRhbjIiLCJhbmdsZUxpc3QiLCJyYW5nZVN0YXJ0IiwicmFuZ2VFbmQiLCJmaW5kUGllQ2hhcnRDdXJyZW50SW5kZXgiLCJwaWVEYXRhIiwiX3N0YXJ0XyIsIl9wcm9wb3J0aW9uXyIsInBvdyIsInNwbGl0UG9pbnRzIiwibmV3UG9pbnRzIiwiaXRlbXMiLCJjYWxMZWdlbmREYXRhIiwibGVnZW5kIiwibGVnZW5kTGlzdCIsIm1hcmdpblRvcCIsInNoYXBlV2lkdGgiLCJ3aWR0aENvdW50IiwiY3VycmVudFJvdyIsIml0ZW1XaWR0aCIsImNhbENhdGVnb3JpZXNEYXRhIiwicmVzdWx0IiwiX2dldFhBeGlzUG9pbnRzIiwiZ2V0WEF4aXNQb2ludHMiLCJjYXRlZ29yaWVzVGV4dExlbnRoIiwibWF4VGV4dExlbmd0aCIsInhBeGlzIiwicm90YXRlTGFiZWwiLCJzaW4iLCJnZXRSYWRhckRhdGFQb2ludHMiLCJwcm9jZXNzIiwicmFkYXJPcHRpb24iLCJyYWRhciIsImVhY2giLCJsaXN0SXRlbSIsInRtcCIsInByb3BvcnRpb24iLCJwb3NpdGlvbiIsImNvcyIsImdldFBpZURhdGFQb2ludHMiLCJnZXRBcmNiYXJEYXRhUG9pbnRzIiwiYXJjYmFyT3B0aW9uIiwidG90YWxBbmdsZSIsImdldEdhdWdlQXhpc1BvaW50cyIsInRlbXBTdGFydEFuZ2xlIiwidmFsdWUiLCJfc3RhcnRBbmdsZV8iLCJfZW5kQW5nbGVfIiwiZ2V0R2F1Z2VEYXRhUG9pbnRzIiwiZ2F1Z2VPcHRpb24iLCJwb2ludGVyIiwiX29sZEFuZ2xlXyIsIm9sZEFuZ2xlIiwib2xkRGF0YSIsImdldFBpZVRleHRNYXhMZW5ndGgiLCJtYXhMZW5ndGgiLCJmaXhDb2x1bWVEYXRhIiwiY29sdW1uTGVuIiwiY29sdW1uIiwiZml4Q29sdW1lTWV0ZXJEYXRhIiwiYm9yZGVyIiwiZml4Q29sdW1lU3RhY2tEYXRhIiwiaW5kZXhuIiwieUF4aXNUb3RhbFdpZHRoIiwic3BhY2luZ1ZhbGlkIiwiZGF0YUNvdW50IiwiZW5hYmxlU2Nyb2xsIiwiaXRlbUNvdW50Iiwic3RhcnRYIiwiZW5kWCIsImdldENhbmRsZURhdGFQb2ludHMiLCJ2YWxpZEhlaWdodCIsImNQb2ludHMiLCJpbmRleHMiLCJwb2ludCIsImdldERhdGFQb2ludHMiLCJnZXRTdGFja0RhdGFQb2ludHMiLCJzZXJpZXNJbmRleCIsInN0YWNrU2VyaWVzIiwidmFsdWUwIiwiaGVpZ2h0MCIsImhlaWdodGMiLCJ5MCIsImdldFlBeGlzVGV4dExpc3QiLCJzdGFjayIsInNvcnRlZCIsImNvbnN0cnVjdG9yIiwic3ViaXRlbSIsInlBeGlzIiwicmFuZ2VTcGFuIiwiZGF0YVJhbmdlIiwiZWFjaFJhbmdlIiwicmV2ZXJzZSIsImNhbFlBeGlzRGF0YSIsImNvbHVtbnN0eWxlIiwicmFuZ2VzIiwicmFuZ2VzRm9ybWF0IiwiTnVtYmVyIiwiZGlzYWJsZWQiLCJjYWxUb29sdGlwWUF4aXNEYXRhIiwibWF4VmFsIiwibWluVmFsIiwibWluQXhpcyIsIm1heEF4aXMiLCJjb250ZXh0Um90YXRlIiwiY29udGV4dCIsInJvdGF0ZUxvY2siLCJ0cmFuc2xhdGUiLCJfcm90YXRlXyIsImRyYXdQb2ludFNoYXBlIiwiYmVnaW5QYXRoIiwic2V0U3Ryb2tlU3R5bGUiLCJzZXRMaW5lV2lkdGgiLCJzZXRGaWxsU3R5bGUiLCJtb3ZlVG8iLCJsaW5lVG8iLCJhcmMiLCJyZWN0IiwiY2xvc2VQYXRoIiwiZmlsbCIsInN0cm9rZSIsImRyYXdSaW5nVGl0bGUiLCJ0aXRsZWZvbnRTaXplIiwidGl0bGUiLCJzdWJ0aXRsZWZvbnRTaXplIiwic3VidGl0bGUiLCJ0aXRsZUZvbnRDb2xvciIsInN1YnRpdGxlRm9udENvbG9yIiwidGl0bGVIZWlnaHQiLCJzdWJ0aXRsZUhlaWdodCIsIm1hcmdpbiIsInRleHRXaWR0aCIsIm9mZnNldFgiLCJzdGFydFkiLCJvZmZzZXRZIiwic2V0Rm9udFNpemUiLCJmaWxsVGV4dCIsIl90ZXh0V2lkdGgiLCJfc3RhcnRYIiwiX3N0YXJ0WSIsImRyYXdQb2ludFRleHQiLCJmb3JtYXRWYWwiLCJkcmF3R2F1Z2VMYWJlbCIsImNlbnRlclBvc2l0aW9uIiwic3BsaXRBbmdsZSIsInNwbGl0TGluZSIsInNwbGl0TnVtYmVyIiwidG90YWxOdW1iZXIiLCJlbmROdW1iZXIiLCJzdGFydE51bWJlciIsIm5vd0FuZ2xlIiwibm93TnVtYmVyIiwicG9zIiwibGFiZWxDb2xvciIsImRyYXdSYWRhckxhYmVsIiwicG9zUmVsYXRpdmVDYW52YXMiLCJkcmF3UGllVGV4dCIsImxpbmVSYWRpdXMiLCJ0ZXh0T2JqZWN0Q29sbGVjdGlvbiIsImxhc3RUZXh0T2JqZWN0Iiwic2VyaWVzQ29udmVydCIsIm9yZ2luWDEiLCJvcmdpblkxIiwib3JnaW5YMiIsIm9yZ2luWTIiLCJvcmdpblgzIiwib3JnaW5ZMyIsInRleHRPYmplY3QiLCJsaW5lU3RhcnQiLCJsaW5lRW5kIiwibGluZVN0YXJ0UG9pc3Rpb24iLCJsaW5lRW5kUG9pc3Rpb24iLCJ0ZXh0UG9zaXRpb24iLCJjdXJ2ZVN0YXJ0WCIsInRleHRTdGFydFgiLCJxdWFkcmF0aWNDdXJ2ZVRvIiwiZHJhd1Rvb2xUaXBTcGxpdExpbmUiLCJ0b29sVGlwT3B0aW9uIiwidG9vbHRpcCIsImdyaWRUeXBlIiwiZGFzaExlbmd0aCIsImVuZFkiLCJzZXRMaW5lRGFzaCIsImdyaWRDb2xvciIsInhBeGlzTGFiZWwiLCJsYWJsZVRleHQiLCJ0ZXh0WCIsInRleHRZIiwibGFiZWxCZ0NvbG9yIiwibGFiZWxCZ09wYWNpdHkiLCJsYWJlbEZvbnRDb2xvciIsImZvbnRDb2xvciIsImRyYXdUb29sVGlwSG9yaXplbnRhbExpbmUiLCJ5QXhpc0xhYmVsIiwiZHJhd1Rvb2xUaXBTcGxpdEFyZWEiLCJhY3RpdmVCZ0NvbG9yIiwiYWN0aXZlQmdPcGFjaXR5IiwiZHJhd1Rvb2xUaXAiLCJiZ0NvbG9yIiwiYmdPcGFjaXR5IiwibGVnZW5kV2lkdGgiLCJsZWdlbmRNYXJnaW5SaWdodCIsImFycm93V2lkdGgiLCJpc092ZXJSaWdodEJvcmRlciIsInRvb2xUaXBXaWR0aCIsInRvb2xUaXBIZWlnaHQiLCJfc2Nyb2xsRGlzdGFuY2VfIiwiZmlsbFJlY3QiLCJkcmF3WUF4aXNUaXRsZSIsInNhdmUiLCJyZXN0b3JlIiwiZHJhd0NvbHVtbkRhdGFQb2ludHMiLCJjb2x1bW5PcHRpb24iLCJtZXRlciIsImZpbGxDb2xvciIsIl9jYWxZQXhpc0RhdGEiLCJwb3AiLCJzaGlmdCIsImVhY2hTZXJpZXMiLCJ0b29sdGlwUG9pbnRzIiwiZGF0YUxhYmVsIiwiZHJhd0NhbmRsZURhdGFQb2ludHMiLCJzZXJpZXNNQSIsImNhbmRsZU9wdGlvbiIsImNhbmRsZSIsImF2ZXJhZ2UiLCJ1cExpbmUiLCJkb3duTGluZSIsInNob3ciLCJkYXkiLCJfY2FsWUF4aXNEYXRhNSIsIl9nZXRYQXhpc1BvaW50czUiLCJzcGxpdFBvaW50TGlzdCIsImN0cmxQb2ludCIsImJlemllckN1cnZlVG8iLCJkcmF3QXJlYURhdGFQb2ludHMiLCJhcmVhT3B0aW9uIiwiYXJlYSIsIm9wYWNpdHkiLCJhZGRMaW5lIiwiX2NhbFlBeGlzRGF0YTIiLCJfZ2V0WEF4aXNQb2ludHMyIiwiZmlyc3RQb2ludCIsImxhc3RQb2ludCIsImRyYXdMaW5lRGF0YVBvaW50cyIsImxpbmVPcHRpb24iLCJsaW5lIiwiX2NhbFlBeGlzRGF0YTMiLCJfZ2V0WEF4aXNQb2ludHMzIiwiZHJhd01peERhdGFQb2ludHMiLCJfY2FsWUF4aXNEYXRhNiIsIl9nZXRYQXhpc1BvaW50czYiLCJjb2x1bW5JbmRleCIsImNvbHVtbkxlbmd0aCIsInNldEdsb2JhbEFscGhhIiwiZHJhd1Rvb2xUaXBCcmlkZ2UiLCJob3JpemVudGFsTGluZSIsImRyYXdYQXhpcyIsIl9nZXRYQXhpc1BvaW50czQiLCJzY3JvbGxTaG93Iiwic2Nyb2xsWSIsInNjcm9sbFNjcmVlbldpZHRoIiwic2Nyb2xsVG90YWxXaWR0aCIsInNjcm9sbFdpZHRoIiwic2Nyb2xsTGVmdCIsInNldExpbmVDYXAiLCJzY3JvbGxCYWNrZ3JvdW5kQ29sb3IiLCJzY3JvbGxDb2xvciIsImRpc2FibGVHcmlkIiwidmFsaWRXaWR0aCIsIm1heFhBeGlzTGlzdExlbmd0aCIsIl94QXhpc1RleHRBbmdsZV8iLCJsYWJlbENvdW50IiwicmF0aW8iLCJuZXdDYXRlZ29yaWVzIiwiY2dMZW5ndGgiLCJfY2FsUm90YXRlVHJhbnNsYXRlIiwiZHJhd1lBeGlzR3JpZCIsInhBeGlzZWFjaFNwYWNpbmciLCJUb3RhbFdpZHRoIiwiZHJhd1lBeGlzIiwiX2NhbFlBeGlzRGF0YTQiLCJiYWNrZ3JvdW5kIiwiZHJhd0xlZ2VuZCIsIl9jYWxMZWdlbmREYXRhIiwiaXRlbUxpc3QiLCJsaXN0SW5kZXgiLCJsZWdlbmRUZXh0Q29sb3IiLCJkcmF3UGllRGF0YVBvaW50cyIsInBpZU9wdGlvbiIsInBpZSIsIl9waWVUZXh0TWF4TGVuZ3RoXyIsImFjdGl2ZVJhZGl1cyIsIm9mZnNldEFuZ2xlIiwiYWN0aXZlT3BhY2l0eSIsImxpbmVKb2luIiwiZGlzYWJsZVBpZVN0cm9rZSIsImlubmVyUGllV2lkdGgiLCJyaW5nV2lkdGgiLCJ2YWxpZCIsImRyYXdBcmNiYXJEYXRhUG9pbnRzIiwiYXJjYmFyIiwiYmFja2dyb3VuZENvbG9yIiwiZHJhd0dhdWdlRGF0YVBvaW50cyIsImdhdWdlIiwiaW5uZXJSYWRpdXMiLCJlYWNoQ2F0ZWdvcmllcyIsImZpeFJhZGl1cyIsImNoaWxkTnVtYmVyIiwiY2hpbGRXaWR0aCIsImNoaWxkQW5nbGUiLCJjaGlsZGVuZFgiLCJkcmF3UmFkYXJEYXRhUG9pbnRzIiwiY29vcmRpbmF0ZUFuZ2xlIiwiX2xvb3AiLCJzdGFydFBvcyIsInJhZGFyRGF0YVBvaW50cyIsImRyYXdDYW52YXMiLCJkcmF3IiwiVGltaW5nIiwiZWFzZUluIiwiZWFzZU91dCIsImVhc2VJbk91dCIsImxpbmVhciIsIkFuaW1hdGlvbiIsImlzU3RvcCIsImR1cmF0aW9uIiwidGltaW5nIiwiZGVsYXkiLCJjcmVhdGVBbmltYXRpb25GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInNldFRpbWVvdXQiLCJzdGVwIiwidGltZVN0YW1wIiwiRGF0ZSIsImFuaW1hdGlvbkZyYW1lIiwic3RhcnRUaW1lU3RhbXAiLCJfc3RlcCIsInRpbWVzdGFtcCIsIm9uUHJvY2VzcyIsIm9uQW5pbWF0aW9uRmluaXNoIiwidGltaW5nRnVuY3Rpb24iLCJiaW5kIiwic3RvcCIsImRyYXdDaGFydHMiLCJfdGhpcyIsIl9jYWxDYXRlZ29yaWVzRGF0YSIsImFuaW1hdGlvbiIsImFuaW1hdGlvbkluc3RhbmNlIiwiY2xlYXJSZWN0IiwiX2RyYXdMaW5lRGF0YVBvaW50cyIsImV2ZW50IiwidHJpZ2dlciIsIl9kcmF3TWl4RGF0YVBvaW50cyIsIl9kcmF3Q29sdW1uRGF0YVBvaW50cyIsIl9kcmF3QXJlYURhdGFQb2ludHMiLCJhcmNiYXJEYXRhIiwiZ2F1Z2VEYXRhIiwiX2RyYXdDYW5kbGVEYXRhUG9pbnRzIiwiRXZlbnQiLCJldmVudHMiLCJhZGRFdmVudExpc3RlbmVyIiwibGlzdGVuZXIiLCJfbGVuIiwiYXJncyIsIl9rZXkiLCJwYXJhbXMiLCJzbGljZSIsIkNoYXJ0cyIsInNjcm9sbEFsaWduIiwiY29uZmlnJCQxIiwibGFibGVXaWR0aCIsInRlbXBXaWR0aCIsInRlbXBIZWlnaHQiLCIkdGhpcyIsInVuaSIsImNyZWF0ZUNhbnZhc0NvbnRleHQiLCJjYW52YXNJZCIsInNjcm9sbE9wdGlvbiIsImN1cnJlbnRPZmZzZXQiLCJzdGFydFRvdWNoWCIsImxhc3RNb3ZlVGltZSIsIm9mZnNldExlZnQiLCJfZ2V0WEF4aXNQb2ludHMwIiwidG90YWxXaWR0aCIsInNjcmVlbldpZHRoIiwidXBkYXRlRGF0YSIsInNjcm9sbFBvc2l0aW9uIiwiem9vbSIsInZhbCIsImNlbnRlclBvaW50IiwiY2VudGVyTGVmdCIsIk1heExlZnQiLCJzdG9wQW5pbWF0aW9uIiwiZ2V0Q3VycmVudERhdGFJbmRleCIsImNoYW5nZWRUb3VjaGVzIiwiX3RvdWNoZXMkIiwic2hvd1Rvb2xUaXAiLCJfZ2V0VG9vbFRpcERhdGEiLCJfZ2V0TWl4VG9vbFRpcERhdGEiLCJzY3JvbGxTdGFydCIsInNjcm9sbCIsIm5vdyIsIkxpbWl0IiwidG91Y2hNb3ZlTGltaXQiLCJjdXJyTW92ZVRpbWUiLCJfZGlzdGFuY2UiLCJzY3JvbGxFbmQiLCJfc2Nyb2xsT3B0aW9uIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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RUFDOUI7QUFDSixDQUFDO0FBRUR0QyxNQUFNLENBQUNsaUIsU0FBUyxDQUFDeWtCLFNBQVMsR0FBRyxVQUFVemMsQ0FBQyxFQUFFO0VBQ3RDLElBQUksSUFBSSxDQUFDOUQsSUFBSSxDQUFDa0wsWUFBWSxLQUFLLElBQUksRUFBRTtJQUNqQyxJQUFJc1YsYUFBYSxHQUFHLElBQUksQ0FBQzlCLFlBQVk7TUFDakNDLGFBQWEsR0FBRzZCLGFBQWEsQ0FBQzdCLGFBQWE7TUFDM0M3ZSxRQUFRLEdBQUcwZ0IsYUFBYSxDQUFDMWdCLFFBQVE7SUFFckMsSUFBSSxDQUFDNGUsWUFBWSxDQUFDQyxhQUFhLEdBQUdBLGFBQWEsR0FBRzdlLFFBQVE7SUFDMUQsSUFBSSxDQUFDNGUsWUFBWSxDQUFDNWUsUUFBUSxHQUFHLENBQUM7RUFDbEM7QUFDSixDQUFDO0FBQUMsZUFFYWtlLE1BQU07QUFBQSwyQiIsImZpbGUiOiIyOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqIHVDaGFydHMgdjEuNy4wLjhcclxuICogdW5pLWFwcOW5s+WPsOmrmOaAp+iDvei3qOWFqOerr+WbvuihqO+8jOaUr+aMgUg144CBQVBQ44CB5bCP56iL5bqP77yI5b6u5L+hL+aUr+S7mOWunS/nmb7luqYv5aS05p2h77yJXHJcbiAqIENvcHlyaWdodCAoYykgMjAxOSBRSVVO56eL5LqRIGh0dHBzOi8vd3d3LnVjaGFydHMuY24gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICogTGljZW5zZWQgKCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAgKVxyXG4gKiBcclxuICogdUNoYXJ0c+WumOaWuee9keermVxyXG4gKiBodHRwczovL3d3dy51Q2hhcnRzLmNuXHJcbiAqIFxyXG4gKiDlvIDmupDlnLDlnYA6XHJcbiAqIGh0dHBzOi8vZ2l0ZWUuY29tL3VDaGFydHMvdUNoYXJ0c1xyXG4gKiBcclxuICogdW5pLWFwcOaPkuS7tuW4guWcuuWcsOWdgO+8mlxyXG4gKiBodHRwOi8vZXh0LmRjbG91ZC5uZXQuY24vcGx1Z2luP2lkPTI3MVxyXG4gKiBcclxuICogXHJcbiAqL1xyXG5cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIGNvbmZpZyA9IHtcclxuICAgIHlBeGlzV2lkdGg6IDE1LFxyXG4gICAgeUF4aXNTcGxpdDogNSxcclxuICAgIHhBeGlzSGVpZ2h0OiAxNSxcclxuICAgIHhBeGlzTGluZUhlaWdodDogMTUsXHJcbiAgICBsZWdlbmRIZWlnaHQ6IDE1LFxyXG4gICAgeUF4aXNUaXRsZVdpZHRoOiAxNSxcclxuICAgIHBhZGRpbmc6IDEyLFxyXG5cdHBpeGVsUmF0aW86MSwvL+mAgumFjUg16auY5YiG5bGPXHJcblx0cm90YXRlOmZhbHNlLC8v5qiq5bGP5qih5byPXHJcbiAgICBjb2x1bWVQYWRkaW5nOiAzLFxyXG4gICAgZm9udFNpemU6IDEzLFxyXG4gICAgLy9kYXRhUG9pbnRTaGFwZTogWydkaWFtb25kJywgJ2NpcmNsZScsICd0cmlhbmdsZScsICdyZWN0J10sXHJcblx0ZGF0YVBvaW50U2hhcGU6IFsnY2lyY2xlJywgJ2NpcmNsZScsICdjaXJjbGUnLCAnY2lyY2xlJ10sLy/ku79GMuWbvuS+i+agt+W8j+aUueS4uuWchueCuVxyXG4gICAgY29sb3JzOiBbJyMxODkwZmYnLCAnIzJmYzI1YicsICcjZmFjYzE0JywgJyNmMDQ4NjQnLCAnIzg1NDNlMCcsICcjOTBlZDdkJ10sXHJcbiAgICBwaWVDaGFydExpbmVQYWRkaW5nOiAxNSxcclxuICAgIHBpZUNoYXJ0VGV4dFBhZGRpbmc6IDUsXHJcbiAgICB4QXhpc1RleHRQYWRkaW5nOiAzLFxyXG4gICAgdGl0bGVDb2xvcjogJyMzMzMzMzMnLFxyXG4gICAgdGl0bGVGb250U2l6ZTogMjAsXHJcbiAgICBzdWJ0aXRsZUNvbG9yOiAnIzk5OTk5OScsXHJcbiAgICBzdWJ0aXRsZUZvbnRTaXplOiAxNSxcclxuICAgIHRvb2xUaXBQYWRkaW5nOiAzLFxyXG4gICAgdG9vbFRpcEJhY2tncm91bmQ6ICcjMDAwMDAwJyxcclxuICAgIHRvb2xUaXBPcGFjaXR5OiAwLjcsXHJcbiAgICB0b29sVGlwTGluZUhlaWdodDogMjAsXHJcbiAgICByYWRhckdyaWRDb3VudDogMyxcclxuICAgIHJhZGFyTGFiZWxUZXh0TWFyZ2luOiAxNSxcclxuXHRnYXVnZUxhYmVsVGV4dE1hcmdpbjoxNVxyXG59O1xyXG5cclxuLy8gT2JqZWN0LmFzc2lnbiBwb2x5ZmlsbFxyXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvYXNzaWduXHJcbmZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHZhckFyZ3MpIHtcclxuICAgIGlmICh0YXJnZXQgPT0gbnVsbCkge1xyXG4gICAgICAgIC8vIFR5cGVFcnJvciBpZiB1bmRlZmluZWQgb3IgbnVsbFxyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IHVuZGVmaW5lZCBvciBudWxsIHRvIG9iamVjdCcpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciB0byA9IE9iamVjdCh0YXJnZXQpO1xyXG5cclxuICAgIGZvciAodmFyIGluZGV4ID0gMTsgaW5kZXggPCBhcmd1bWVudHMubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgdmFyIG5leHRTb3VyY2UgPSBhcmd1bWVudHNbaW5kZXhdO1xyXG5cclxuICAgICAgICBpZiAobmV4dFNvdXJjZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIC8vIFNraXAgb3ZlciBpZiB1bmRlZmluZWQgb3IgbnVsbFxyXG4gICAgICAgICAgICBmb3IgKHZhciBuZXh0S2V5IGluIG5leHRTb3VyY2UpIHtcclxuICAgICAgICAgICAgICAgIC8vIEF2b2lkIGJ1Z3Mgd2hlbiBoYXNPd25Qcm9wZXJ0eSBpcyBzaGFkb3dlZFxyXG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuZXh0U291cmNlLCBuZXh0S2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0bztcclxufVxyXG5cclxudmFyIHV0aWwgPSB7XHJcbiAgICB0b0ZpeGVkOiBmdW5jdGlvbiB0b0ZpeGVkKG51bSwgbGltaXQpIHtcclxuICAgICAgICBsaW1pdCA9IGxpbWl0IHx8IDI7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNGbG9hdChudW0pKSB7XHJcbiAgICAgICAgICAgIG51bSA9IG51bS50b0ZpeGVkKGxpbWl0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bTtcclxuICAgIH0sXHJcbiAgICBpc0Zsb2F0OiBmdW5jdGlvbiBpc0Zsb2F0KG51bSkge1xyXG4gICAgICAgIHJldHVybiBudW0gJSAxICE9PSAwO1xyXG4gICAgfSxcclxuICAgIGFwcHJveGltYXRlbHlFcXVhbDogZnVuY3Rpb24gYXBwcm94aW1hdGVseUVxdWFsKG51bTEsIG51bTIpIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5hYnMobnVtMSAtIG51bTIpIDwgMWUtMTA7XHJcbiAgICB9LFxyXG4gICAgaXNTYW1lU2lnbjogZnVuY3Rpb24gaXNTYW1lU2lnbihudW0xLCBudW0yKSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKG51bTEpID09PSBudW0xICYmIE1hdGguYWJzKG51bTIpID09PSBudW0yIHx8IE1hdGguYWJzKG51bTEpICE9PSBudW0xICYmIE1hdGguYWJzKG51bTIpICE9PSBudW0yO1xyXG4gICAgfSxcclxuICAgIGlzU2FtZVhDb29yZGluYXRlQXJlYTogZnVuY3Rpb24gaXNTYW1lWENvb3JkaW5hdGVBcmVhKHAxLCBwMikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmlzU2FtZVNpZ24ocDEueCwgcDIueCk7XHJcbiAgICB9LFxyXG4gICAgaXNDb2xsaXNpb246IGZ1bmN0aW9uIGlzQ29sbGlzaW9uKG9iajEsIG9iajIpIHtcclxuICAgICAgICBvYmoxLmVuZCA9IHt9O1xyXG4gICAgICAgIG9iajEuZW5kLnggPSBvYmoxLnN0YXJ0LnggKyBvYmoxLndpZHRoO1xyXG4gICAgICAgIG9iajEuZW5kLnkgPSBvYmoxLnN0YXJ0LnkgLSBvYmoxLmhlaWdodDtcclxuICAgICAgICBvYmoyLmVuZCA9IHt9O1xyXG4gICAgICAgIG9iajIuZW5kLnggPSBvYmoyLnN0YXJ0LnggKyBvYmoyLndpZHRoO1xyXG4gICAgICAgIG9iajIuZW5kLnkgPSBvYmoyLnN0YXJ0LnkgLSBvYmoyLmhlaWdodDtcclxuICAgICAgICB2YXIgZmxhZyA9IG9iajIuc3RhcnQueCA+IG9iajEuZW5kLnggfHwgb2JqMi5lbmQueCA8IG9iajEuc3RhcnQueCB8fCBvYmoyLmVuZC55ID4gb2JqMS5zdGFydC55IHx8IG9iajIuc3RhcnQueSA8IG9iajEuZW5kLnk7XHJcblxyXG4gICAgICAgIHJldHVybiAhZmxhZztcclxuICAgIH1cclxufTtcclxuXHJcbi8vIGhleCDovawgcmdiYVxyXG5mdW5jdGlvbiBoZXhUb1JnYihoZXhWYWx1ZSwgb3BjKSB7XHJcbiAgICB2YXIgcmd4ID0gL14jPyhbYS1mXFxkXSkoW2EtZlxcZF0pKFthLWZcXGRdKSQvaTtcclxuICAgIHZhciBoZXggPSBoZXhWYWx1ZS5yZXBsYWNlKHJneCwgZnVuY3Rpb24gKG0sIHIsIGcsIGIpIHtcclxuICAgICAgICByZXR1cm4gciArIHIgKyBnICsgZyArIGIgKyBiO1xyXG4gICAgfSk7XHJcbiAgICB2YXIgcmdiID0gL14jPyhbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KSQvaS5leGVjKGhleCk7XHJcbiAgICB2YXIgciA9IHBhcnNlSW50KHJnYlsxXSwgMTYpO1xyXG4gICAgdmFyIGcgPSBwYXJzZUludChyZ2JbMl0sIDE2KTtcclxuICAgIHZhciBiID0gcGFyc2VJbnQocmdiWzNdLCAxNik7XHJcbiAgICByZXR1cm4gJ3JnYmEoJyArIHIgKyAnLCcgKyBnICsgJywnICsgYiArICcsJyArIG9wYyArICcpJztcclxufVxyXG5cclxuZnVuY3Rpb24gZmluZFJhbmdlKG51bSwgdHlwZSwgbGltaXQpIHtcclxuICAgIGlmIChpc05hTihudW0pKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbd3hDaGFydHNdIHVudmFsaWQgc2VyaWVzIGRhdGEhJyk7XHJcbiAgICB9XHJcbiAgICBsaW1pdCA9IGxpbWl0IHx8IDEwO1xyXG4gICAgdHlwZSA9IHR5cGUgPyB0eXBlIDogJ3VwcGVyJztcclxuICAgIHZhciBtdWx0aXBsZSA9IDE7XHJcbiAgICB3aGlsZSAobGltaXQgPCAxKSB7XHJcbiAgICAgICAgbGltaXQgKj0gMTA7XHJcbiAgICAgICAgbXVsdGlwbGUgKj0gMTA7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZSA9PT0gJ3VwcGVyJykge1xyXG4gICAgICAgIG51bSA9IE1hdGguY2VpbChudW0gKiBtdWx0aXBsZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIG51bSA9IE1hdGguZmxvb3IobnVtICogbXVsdGlwbGUpO1xyXG4gICAgfVxyXG4gICAgd2hpbGUgKG51bSAlIGxpbWl0ICE9PSAwKSB7XHJcbiAgICAgICAgaWYgKHR5cGUgPT09ICd1cHBlcicpIHtcclxuICAgICAgICAgICAgbnVtKys7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbnVtLS07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBudW0gLyBtdWx0aXBsZTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2FsQ2FuZGxlTUEoZGF5QXJyLCBuYW1lQXJyLCBjb2xvckFyciwga2RhdGEpIHtcclxuXHRsZXQgc2VyaWVzVGVtcD1bXTtcclxuXHRmb3IgKGxldCBrID0gMDsgayA8IGRheUFyci5sZW5ndGggOyBrKyspIHtcclxuXHRcdGxldCBzZXJpZXNJdGVtID0geyBkYXRhOltdLCBuYW1lIDogbmFtZUFycltrXSwgY29sb3I6IGNvbG9yQXJyW2tdIH07XHJcblx0XHRmb3IgKGxldCBpID0gMCwgbGVuID0ga2RhdGEubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuXHRcdFx0aWYgKGkgPCBkYXlBcnJba10pIHtcclxuXHRcdFx0XHRzZXJpZXNJdGVtLmRhdGEucHVzaChudWxsKTtcclxuXHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRsZXQgc3VtID0gMDtcclxuXHRcdFx0Zm9yIChsZXQgaiA9IDA7IGogPCBkYXlBcnJba107IGorKykge1xyXG5cdFx0XHRcdHN1bSArPSBrZGF0YVtpIC0gal1bMV07XHJcblx0XHRcdH1cclxuXHRcdFx0c2VyaWVzSXRlbS5kYXRhLnB1c2goKyhzdW0gLyBkYXlBcnJba10pLnRvRml4ZWQoMykpO1xyXG5cdFx0fVxyXG5cdFx0c2VyaWVzVGVtcC5wdXNoKHNlcmllc0l0ZW0pO1xyXG5cdH1cclxuICAgIHJldHVybiBzZXJpZXNUZW1wO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjYWxWYWxpZERpc3RhbmNlKGRpc3RhbmNlLCBjaGFydERhdGEsIGNvbmZpZywgb3B0cykge1xyXG5cclxuICAgIHZhciBkYXRhQ2hhcnRBcmVhV2lkdGggPSBvcHRzLndpZHRoIC0gY29uZmlnLnBhZGRpbmcgLSBjaGFydERhdGEueEF4aXNQb2ludHNbMF07XHJcbiAgICB2YXIgZGF0YUNoYXJ0V2lkdGggPSBjaGFydERhdGEuZWFjaFNwYWNpbmcgKiBvcHRzLmNhdGVnb3JpZXMubGVuZ3RoO1xyXG4gICAgdmFyIHZhbGlkRGlzdGFuY2UgPSBkaXN0YW5jZTtcclxuICAgIGlmIChkaXN0YW5jZSA+PSAwKSB7XHJcbiAgICAgICAgdmFsaWREaXN0YW5jZSA9IDA7XHJcbiAgICB9IGVsc2UgaWYgKE1hdGguYWJzKGRpc3RhbmNlKSA+PSBkYXRhQ2hhcnRXaWR0aCAtIGRhdGFDaGFydEFyZWFXaWR0aCkge1xyXG4gICAgICAgIHZhbGlkRGlzdGFuY2UgPSBkYXRhQ2hhcnRBcmVhV2lkdGggLSBkYXRhQ2hhcnRXaWR0aDtcclxuICAgIH1cclxuICAgIHJldHVybiB2YWxpZERpc3RhbmNlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc0luQW5nbGVSYW5nZShhbmdsZSwgc3RhcnRBbmdsZSwgZW5kQW5nbGUpIHtcclxuICAgIGZ1bmN0aW9uIGFkanVzdChhbmdsZSkge1xyXG4gICAgICAgIHdoaWxlIChhbmdsZSA8IDApIHtcclxuICAgICAgICAgICAgYW5nbGUgKz0gMiAqIE1hdGguUEk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdoaWxlIChhbmdsZSA+IDIgKiBNYXRoLlBJKSB7XHJcbiAgICAgICAgICAgIGFuZ2xlIC09IDIgKiBNYXRoLlBJO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGFuZ2xlO1xyXG4gICAgfVxyXG5cclxuICAgIGFuZ2xlID0gYWRqdXN0KGFuZ2xlKTtcclxuICAgIHN0YXJ0QW5nbGUgPSBhZGp1c3Qoc3RhcnRBbmdsZSk7XHJcbiAgICBlbmRBbmdsZSA9IGFkanVzdChlbmRBbmdsZSk7XHJcbiAgICBpZiAoc3RhcnRBbmdsZSA+IGVuZEFuZ2xlKSB7XHJcbiAgICAgICAgZW5kQW5nbGUgKz0gMiAqIE1hdGguUEk7XHJcbiAgICAgICAgaWYgKGFuZ2xlIDwgc3RhcnRBbmdsZSkge1xyXG4gICAgICAgICAgICBhbmdsZSArPSAyICogTWF0aC5QSTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGFuZ2xlID49IHN0YXJ0QW5nbGUgJiYgYW5nbGUgPD0gZW5kQW5nbGU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbFJvdGF0ZVRyYW5zbGF0ZSh4LCB5LCBoKSB7XHJcbiAgICB2YXIgeHYgPSB4O1xyXG4gICAgdmFyIHl2ID0gaCAtIHk7XHJcblxyXG4gICAgdmFyIHRyYW5zWCA9IHh2ICsgKGggLSB5diAtIHh2KSAvIE1hdGguc3FydCgyKTtcclxuICAgIHRyYW5zWCAqPSAtMTtcclxuXHJcbiAgICB2YXIgdHJhbnNZID0gKGggLSB5dikgKiAoTWF0aC5zcXJ0KDIpIC0gMSkgLSAoaCAtIHl2IC0geHYpIC8gTWF0aC5zcXJ0KDIpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdHJhbnNYOiB0cmFuc1gsXHJcbiAgICAgICAgdHJhbnNZOiB0cmFuc1lcclxuICAgIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUN1cnZlQ29udHJvbFBvaW50cyhwb2ludHMsIGkpIHtcclxuXHJcbiAgICBmdW5jdGlvbiBpc05vdE1pZGRsZVBvaW50KHBvaW50cywgaSkge1xyXG4gICAgICAgIGlmIChwb2ludHNbaSAtIDFdICYmIHBvaW50c1tpICsgMV0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBvaW50c1tpXS55ID49IE1hdGgubWF4KHBvaW50c1tpIC0gMV0ueSwgcG9pbnRzW2kgKyAxXS55KSB8fCBwb2ludHNbaV0ueSA8PSBNYXRoLm1pbihwb2ludHNbaSAtIDFdLnksIHBvaW50c1tpICsgMV0ueSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB2YXIgYSA9IDAuMjtcclxuICAgIHZhciBiID0gMC4yO1xyXG4gICAgdmFyIHBBeCA9IG51bGw7XHJcbiAgICB2YXIgcEF5ID0gbnVsbDtcclxuICAgIHZhciBwQnggPSBudWxsO1xyXG4gICAgdmFyIHBCeSA9IG51bGw7XHJcbiAgICBpZiAoaSA8IDEpIHtcclxuICAgICAgICBwQXggPSBwb2ludHNbMF0ueCArIChwb2ludHNbMV0ueCAtIHBvaW50c1swXS54KSAqIGE7XHJcbiAgICAgICAgcEF5ID0gcG9pbnRzWzBdLnkgKyAocG9pbnRzWzFdLnkgLSBwb2ludHNbMF0ueSkgKiBhO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBwQXggPSBwb2ludHNbaV0ueCArIChwb2ludHNbaSArIDFdLnggLSBwb2ludHNbaSAtIDFdLngpICogYTtcclxuICAgICAgICBwQXkgPSBwb2ludHNbaV0ueSArIChwb2ludHNbaSArIDFdLnkgLSBwb2ludHNbaSAtIDFdLnkpICogYTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaSA+IHBvaW50cy5sZW5ndGggLSAzKSB7XHJcbiAgICAgICAgdmFyIGxhc3QgPSBwb2ludHMubGVuZ3RoIC0gMTtcclxuICAgICAgICBwQnggPSBwb2ludHNbbGFzdF0ueCAtIChwb2ludHNbbGFzdF0ueCAtIHBvaW50c1tsYXN0IC0gMV0ueCkgKiBiO1xyXG4gICAgICAgIHBCeSA9IHBvaW50c1tsYXN0XS55IC0gKHBvaW50c1tsYXN0XS55IC0gcG9pbnRzW2xhc3QgLSAxXS55KSAqIGI7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHBCeCA9IHBvaW50c1tpICsgMV0ueCAtIChwb2ludHNbaSArIDJdLnggLSBwb2ludHNbaV0ueCkgKiBiO1xyXG4gICAgICAgIHBCeSA9IHBvaW50c1tpICsgMV0ueSAtIChwb2ludHNbaSArIDJdLnkgLSBwb2ludHNbaV0ueSkgKiBiO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGZpeCBpc3N1ZSBodHRwczovL2dpdGh1Yi5jb20veGlhb2xpbjMzMDMvd3gtY2hhcnRzL2lzc3Vlcy83OVxyXG4gICAgaWYgKGlzTm90TWlkZGxlUG9pbnQocG9pbnRzLCBpICsgMSkpIHtcclxuICAgICAgICBwQnkgPSBwb2ludHNbaSArIDFdLnk7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNOb3RNaWRkbGVQb2ludChwb2ludHMsIGkpKSB7XHJcbiAgICAgICAgcEF5ID0gcG9pbnRzW2ldLnk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBjdHJBOiB7IHg6IHBBeCwgeTogcEF5IH0sXHJcbiAgICAgICAgY3RyQjogeyB4OiBwQngsIHk6IHBCeSB9XHJcbiAgICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBjb252ZXJ0Q29vcmRpbmF0ZU9yaWdpbih4LCB5LCBjZW50ZXIpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgeDogY2VudGVyLnggKyB4LFxyXG4gICAgICAgIHk6IGNlbnRlci55IC0geVxyXG4gICAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gYXZvaWRDb2xsaXNpb24ob2JqLCB0YXJnZXQpIHtcclxuICAgIGlmICh0YXJnZXQpIHtcclxuICAgICAgICAvLyBpcyBjb2xsaXNpb24gdGVzdFxyXG4gICAgICAgIHdoaWxlICh1dGlsLmlzQ29sbGlzaW9uKG9iaiwgdGFyZ2V0KSkge1xyXG4gICAgICAgICAgICBpZiAob2JqLnN0YXJ0LnggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBvYmouc3RhcnQueS0tO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9iai5zdGFydC54IDwgMCkge1xyXG4gICAgICAgICAgICAgICAgb2JqLnN0YXJ0LnkrKztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChvYmouc3RhcnQueSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBvYmouc3RhcnQueSsrO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBvYmouc3RhcnQueS0tO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG9iajtcclxufVxyXG5cclxuZnVuY3Rpb24gZmlsbFNlcmllc0NvbG9yKHNlcmllcywgY29uZmlnKSB7XHJcbiAgICB2YXIgaW5kZXggPSAwO1xyXG4gICAgcmV0dXJuIHNlcmllcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICBpZiAoIWl0ZW0uY29sb3IpIHtcclxuICAgICAgICAgICAgaXRlbS5jb2xvciA9IGNvbmZpZy5jb2xvcnNbaW5kZXhdO1xyXG4gICAgICAgICAgICBpbmRleCA9IChpbmRleCArIDEpICUgY29uZmlnLmNvbG9ycy5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbGxTZXJpZXNUeXBlKHNlcmllcywgb3B0cykge1xyXG4gICAgcmV0dXJuIHNlcmllcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICBpZiAoIWl0ZW0udHlwZSkge1xyXG4gICAgICAgICAgICBpdGVtLnR5cGUgPSBvcHRzLnR5cGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldERhdGFSYW5nZShtaW5EYXRhLCBtYXhEYXRhKSB7XHJcbiAgICB2YXIgbGltaXQgPSAwO1xyXG4gICAgdmFyIHJhbmdlID0gbWF4RGF0YSAtIG1pbkRhdGE7XHJcbiAgICBpZiAocmFuZ2UgPj0gMTAwMDApIHtcclxuICAgICAgICBsaW1pdCA9IDEwMDA7XHJcbiAgICB9IGVsc2UgaWYgKHJhbmdlID49IDEwMDApIHtcclxuICAgICAgICBsaW1pdCA9IDEwMDtcclxuICAgIH0gZWxzZSBpZiAocmFuZ2UgPj0gMTAwKSB7XHJcbiAgICAgICAgbGltaXQgPSAxMDtcclxuICAgIH0gZWxzZSBpZiAocmFuZ2UgPj0gMTApIHtcclxuICAgICAgICBsaW1pdCA9IDU7XHJcbiAgICB9IGVsc2UgaWYgKHJhbmdlID49IDEpIHtcclxuICAgICAgICBsaW1pdCA9IDE7XHJcbiAgICB9IGVsc2UgaWYgKHJhbmdlID49IDAuMSkge1xyXG4gICAgICAgIGxpbWl0ID0gMC4xO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBsaW1pdCA9IDAuMDE7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG1pblJhbmdlOiBmaW5kUmFuZ2UobWluRGF0YSwgJ2xvd2VyJywgbGltaXQpLFxyXG4gICAgICAgIG1heFJhbmdlOiBmaW5kUmFuZ2UobWF4RGF0YSwgJ3VwcGVyJywgbGltaXQpXHJcbiAgICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBtZWFzdXJlVGV4dCh0ZXh0KSB7XHJcbiAgICB2YXIgZm9udFNpemUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGNvbmZpZy5mb250U2l6ZTtcclxuXHJcbiAgICAvLyB3eCBjYW52YXMg5pyq5a6e546wbWVhc3VyZVRleHTmlrnms5UsIOatpOWkhOiHquihjOWunueOsFxyXG5cdC8vIOmAgumFjeS/ruaUueWIneWni+Wtl+S9kzEwcHjkuLrlhbbku5blpKflsI/nmoTmlrnms5VcclxuICAgIHRleHQgPSBTdHJpbmcodGV4dCk7XHJcbiAgICB2YXIgdGV4dCA9IHRleHQuc3BsaXQoJycpO1xyXG4gICAgdmFyIHdpZHRoID0gMDtcclxuICAgIHRleHQuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgIGlmICgvW2EtekEtWl0vLnRlc3QoaXRlbSkpIHtcclxuICAgICAgICAgICAgd2lkdGggKz0gNztcclxuICAgICAgICB9IGVsc2UgaWYgKC9bMC05XS8udGVzdChpdGVtKSkge1xyXG4gICAgICAgICAgICB3aWR0aCArPSA1LjU7XHJcbiAgICAgICAgfSBlbHNlIGlmICgvXFwuLy50ZXN0KGl0ZW0pKSB7XHJcbiAgICAgICAgICAgIHdpZHRoICs9IDIuNztcclxuICAgICAgICB9IGVsc2UgaWYgKC8tLy50ZXN0KGl0ZW0pKSB7XHJcbiAgICAgICAgICAgIHdpZHRoICs9IDMuMjU7XHJcbiAgICAgICAgfSBlbHNlIGlmICgvW1xcdTRlMDAtXFx1OWZhNV0vLnRlc3QoaXRlbSkpIHtcclxuICAgICAgICAgICAgd2lkdGggKz0gMTA7XHJcbiAgICAgICAgfSBlbHNlIGlmICgvXFwofFxcKS8udGVzdChpdGVtKSkge1xyXG4gICAgICAgICAgICB3aWR0aCArPSAzLjczO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoL1xccy8udGVzdChpdGVtKSkge1xyXG4gICAgICAgICAgICB3aWR0aCArPSAyLjU7XHJcbiAgICAgICAgfSBlbHNlIGlmICgvJS8udGVzdChpdGVtKSkge1xyXG4gICAgICAgICAgICB3aWR0aCArPSA4O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHdpZHRoICs9IDEwO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHdpZHRoICogZm9udFNpemUgLyAxMCA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRhdGFDb21iaW5lKHNlcmllcykge1xyXG4gICAgcmV0dXJuIHNlcmllcy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICByZXR1cm4gKGEuZGF0YSA/IGEuZGF0YSA6IGEpLmNvbmNhdChiLmRhdGEpO1xyXG4gICAgfSwgW10pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkYXRhQ29tYmluZVN0YWNrKHNlcmllcykge1xyXG5cdHZhciBzdW0gPSBuZXcgQXJyYXkoc2VyaWVzWzBdLmRhdGEubGVuZ3RoKTtcclxuXHRmb3IodmFyIGogPSAwOyBqIDwgc3VtLmxlbmd0aDsgaisrKSB7XHJcblx0XHRcdHN1bVtqXSA9MDtcclxuXHR9XHJcblx0Zm9yKHZhciBpID0gMDsgaSA8IHNlcmllcy5sZW5ndGg7IGkrKykge1xyXG5cdCAgZm9yKHZhciBqID0gMDsgaiA8IHN1bS5sZW5ndGg7IGorKykge1xyXG5cdFx0c3VtW2pdICs9IHNlcmllc1tpXS5kYXRhW2pdO1xyXG5cdCAgfVxyXG5cdH1cclxuXHRyZXR1cm4gc2VyaWVzLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xyXG5cdCAgICByZXR1cm4gKGEuZGF0YSA/IGEuZGF0YSA6IGEpLmNvbmNhdChiLmRhdGEpLmNvbmNhdChzdW0pO1xyXG5cdH0sIFtdKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0VG91Y2hlcyh0b3VjaGVzLCBvcHRzLCBlKXtcclxuXHRsZXQgeCx5O1xyXG5cdGlmKHRvdWNoZXMuY2xpZW50WCl7XHJcblx0XHRpZihvcHRzLnJvdGF0ZSl7Ly/pgILphY3mqKrlsY9cclxuXHRcdFx0eSA9IG9wdHMuaGVpZ2h0LXRvdWNoZXMuY2xpZW50WCpvcHRzLnBpeGVsUmF0aW87XHJcblx0XHRcdHggPSAodG91Y2hlcy5wYWdlWS1lLm1wLmN1cnJlbnRUYXJnZXQub2Zmc2V0VG9wLShvcHRzLmhlaWdodC9vcHRzLnBpeGVsUmF0aW8vMikqKG9wdHMucGl4ZWxSYXRpby0xKSkqb3B0cy5waXhlbFJhdGlvO1xyXG5cdFx0fWVsc2V7XHJcblx0XHRcdHggPSB0b3VjaGVzLmNsaWVudFgqb3B0cy5waXhlbFJhdGlvO1xyXG5cdFx0XHR5ID0gKHRvdWNoZXMucGFnZVktZS5tcC5jdXJyZW50VGFyZ2V0Lm9mZnNldFRvcC0ob3B0cy5oZWlnaHQvb3B0cy5waXhlbFJhdGlvLzIpKihvcHRzLnBpeGVsUmF0aW8tMSkpKm9wdHMucGl4ZWxSYXRpbztcclxuXHRcdH1cclxuXHR9ZWxzZXtcclxuXHRcdGlmKG9wdHMucm90YXRlKXsvL+mAgumFjeaoquWxj1xyXG5cdFx0XHR5ID0gb3B0cy5oZWlnaHQtdG91Y2hlcy54Km9wdHMucGl4ZWxSYXRpbztcclxuXHRcdFx0eCA9IHRvdWNoZXMueSpvcHRzLnBpeGVsUmF0aW87XHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0eCA9IHRvdWNoZXMueCpvcHRzLnBpeGVsUmF0aW87XHJcblx0XHRcdHkgPSB0b3VjaGVzLnkqb3B0cy5waXhlbFJhdGlvO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm57eDp4LHk6eX1cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0U2VyaWVzRGF0YUl0ZW0oc2VyaWVzLCBpbmRleCkge1xyXG4gICAgdmFyIGRhdGEgPSBbXTtcclxuICAgIHNlcmllcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgaWYgKGl0ZW0uZGF0YVtpbmRleF0gIT09IG51bGwgJiYgdHlwZW9mIGl0ZW0uZGF0YVtpbmRleF0gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIHZhciBzZXJpZXNJdGVtID0ge307XHJcbiAgICAgICAgICAgIHNlcmllc0l0ZW0uY29sb3IgPSBpdGVtLmNvbG9yO1xyXG5cdFx0XHRzZXJpZXNJdGVtLnR5cGUgPSBpdGVtLnR5cGU7XHJcblx0XHRcdHNlcmllc0l0ZW0uc3R5bGUgPSBpdGVtLnN0eWxlO1xyXG5cdFx0XHRzZXJpZXNJdGVtLnNoYXBlID0gaXRlbS5zaGFwZTtcclxuXHRcdFx0c2VyaWVzSXRlbS5kaXNhYmxlTGVnZW5kID0gaXRlbS5kaXNhYmxlTGVnZW5kO1xyXG4gICAgICAgICAgICBzZXJpZXNJdGVtLm5hbWUgPSBpdGVtLm5hbWU7XHJcbiAgICAgICAgICAgIHNlcmllc0l0ZW0uZGF0YSA9IGl0ZW0uZm9ybWF0ID8gaXRlbS5mb3JtYXQoaXRlbS5kYXRhW2luZGV4XSkgOiBpdGVtLmRhdGFbaW5kZXhdO1xyXG4gICAgICAgICAgICBkYXRhLnB1c2goc2VyaWVzSXRlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGRhdGE7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldE1heFRleHRMaXN0TGVuZ3RoKGxpc3QpIHtcclxuICAgIHZhciBsZW5ndGhMaXN0ID0gbGlzdC5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICByZXR1cm4gbWVhc3VyZVRleHQoaXRlbSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBNYXRoLm1heC5hcHBseShudWxsLCBsZW5ndGhMaXN0KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0UmFkYXJDb29yZGluYXRlU2VyaWVzKGxlbmd0aCkge1xyXG4gICAgdmFyIGVhY2hBbmdsZSA9IDIgKiBNYXRoLlBJIC8gbGVuZ3RoO1xyXG4gICAgdmFyIENvb3JkaW5hdGVTZXJpZXMgPSBbXTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBDb29yZGluYXRlU2VyaWVzLnB1c2goZWFjaEFuZ2xlICogaSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIENvb3JkaW5hdGVTZXJpZXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgcmV0dXJuIC0xICogaXRlbSArIE1hdGguUEkgLyAyO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFRvb2xUaXBEYXRhKHNlcmllc0RhdGEsIGNhbFBvaW50cywgaW5kZXgsIGNhdGVnb3JpZXMpIHtcclxuICAgIHZhciBvcHRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IHt9O1xyXG5cclxuICAgIHZhciB0ZXh0TGlzdCA9IHNlcmllc0RhdGEubWFwKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdGV4dDogb3B0aW9uLmZvcm1hdCA/IG9wdGlvbi5mb3JtYXQoaXRlbSwgY2F0ZWdvcmllc1tpbmRleF0pIDogaXRlbS5uYW1lICsgJzogJyArIGl0ZW0uZGF0YSxcclxuICAgICAgICAgICAgY29sb3I6IGl0ZW0uY29sb3JcclxuICAgICAgICB9O1xyXG4gICAgfSk7XHJcbiAgICB2YXIgdmFsaWRDYWxQb2ludHMgPSBbXTtcclxuICAgIHZhciBvZmZzZXQgPSB7XHJcbiAgICAgICAgeDogMCxcclxuICAgICAgICB5OiAwXHJcbiAgICB9O1xyXG4gICAgY2FsUG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKHBvaW50cykge1xyXG4gICAgICAgIGlmICh0eXBlb2YgcG9pbnRzW2luZGV4XSAhPT0gJ3VuZGVmaW5lZCcgJiYgcG9pbnRzW2luZGV4XSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB2YWxpZENhbFBvaW50cy5wdXNoKHBvaW50c1tpbmRleF0pO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgdmFsaWRDYWxQb2ludHMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgIG9mZnNldC54ID0gTWF0aC5yb3VuZChpdGVtLngpO1xyXG4gICAgICAgIG9mZnNldC55ICs9IGl0ZW0ueTtcclxuICAgIH0pO1xyXG5cclxuICAgIG9mZnNldC55IC89IHZhbGlkQ2FsUG9pbnRzLmxlbmd0aDtcclxuICAgIHJldHVybiB7IHRleHRMaXN0OiB0ZXh0TGlzdCwgb2Zmc2V0OiBvZmZzZXQgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0TWl4VG9vbFRpcERhdGEoc2VyaWVzRGF0YSwgY2FsUG9pbnRzLCBpbmRleCwgY2F0ZWdvcmllcykge1xyXG4gICAgdmFyIG9wdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDoge307XHJcbiAgICB2YXIgdGV4dExpc3QgPSBzZXJpZXNEYXRhLm1hcChmdW5jdGlvbiAoaXRlbSkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0dGV4dDogb3B0aW9uLmZvcm1hdCA/IG9wdGlvbi5mb3JtYXQoaXRlbSwgY2F0ZWdvcmllc1tpbmRleF0pIDogaXRlbS5uYW1lICsgJzogJyArIGl0ZW0uZGF0YSxcclxuXHRcdFx0Y29sb3I6IGl0ZW0uY29sb3IsXHJcblx0XHRcdGRpc2FibGVMZWdlbmQ6IGl0ZW0uZGlzYWJsZUxlZ2VuZD8gdHJ1ZTpmYWxzZVxyXG5cdFx0fTtcclxuICAgIH0pO1xyXG5cdHRleHRMaXN0PXRleHRMaXN0LmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xyXG5cdFx0aWYoaXRlbS5kaXNhYmxlTGVnZW5kIT09dHJ1ZSl7XHJcblx0XHRcdHJldHVybiBpdGVtO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG4gICAgdmFyIHZhbGlkQ2FsUG9pbnRzID0gW107XHJcbiAgICB2YXIgb2Zmc2V0ID0ge1xyXG4gICAgICAgIHg6IDAsXHJcbiAgICAgICAgeTogMFxyXG4gICAgfTtcclxuICAgIGNhbFBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uIChwb2ludHMpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHBvaW50c1tpbmRleF0gIT09ICd1bmRlZmluZWQnICYmIHBvaW50c1tpbmRleF0gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgdmFsaWRDYWxQb2ludHMucHVzaChwb2ludHNbaW5kZXhdKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHZhbGlkQ2FsUG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICBvZmZzZXQueCA9IE1hdGgucm91bmQoaXRlbS54KTtcclxuICAgICAgICBvZmZzZXQueSArPSBpdGVtLnk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBvZmZzZXQueSAvPSB2YWxpZENhbFBvaW50cy5sZW5ndGg7XHJcbiAgICByZXR1cm4geyB0ZXh0TGlzdDogdGV4dExpc3QsIG9mZnNldDogb2Zmc2V0IH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldENhbmRsZVRvb2xUaXBEYXRhKHNlcmllcyxzZXJpZXNEYXRhLCBjYWxQb2ludHMsIGluZGV4LCBjYXRlZ29yaWVzLGV4dHJhKSB7XHJcbiAgICB2YXIgb3B0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDYgJiYgYXJndW1lbnRzWzZdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNl0gOiB7fTtcclxuXHRsZXQgdXBDb2xvciA9IGV4dHJhLmNvbG9yLnVwRmlsbDtcclxuXHRsZXQgZG93bkNvbG9yID0gZXh0cmEuY29sb3IuZG93bkZpbGw7XHJcblx0Ly/popzoibLpobrluo/kuLrlvIDnm5jvvIzmlLbnm5jvvIzmnIDkvY7vvIzmnIDpq5hcclxuXHRsZXQgY29sb3I9W3VwQ29sb3IsdXBDb2xvcixkb3duQ29sb3IsdXBDb2xvcl07XHJcbiAgICB2YXIgdGV4dExpc3QgPSBbXTtcclxuXHRsZXQgdGV4dDA9e1xyXG5cdFx0dGV4dDogY2F0ZWdvcmllc1tpbmRleF0sXHJcblx0XHRjb2xvcjogbnVsbFxyXG5cdH07XHJcblx0dGV4dExpc3QucHVzaCh0ZXh0MCk7XHJcblx0c2VyaWVzRGF0YS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcclxuXHRcdC8vY29uc29sZS5sb2coY29sb3IpXHJcblx0XHRpZihpbmRleD09MCAmJiBpdGVtLmRhdGFbMV0taXRlbS5kYXRhWzBdPDApe1xyXG5cdFx0XHRjb2xvclsxXT1kb3duQ29sb3I7XHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0aWYoaXRlbS5kYXRhWzBdPHNlcmllc1tpbmRleC0xXVsxXSl7XHJcblx0XHRcdFx0Y29sb3JbMF09ZG93bkNvbG9yO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmKGl0ZW0uZGF0YVsxXTxpdGVtLmRhdGFbMF0pe1xyXG5cdFx0XHRcdGNvbG9yWzFdPWRvd25Db2xvcjtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZihpdGVtLmRhdGFbMl0+c2VyaWVzW2luZGV4LTFdWzFdKXtcclxuXHRcdFx0XHRjb2xvclsyXT11cENvbG9yO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmKGl0ZW0uZGF0YVszXTxzZXJpZXNbaW5kZXgtMV1bMV0pe1xyXG5cdFx0XHRcdGNvbG9yWzNdPWRvd25Db2xvcjtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHRsZXQgdGV4dDE9e1xyXG5cdFx0XHR0ZXh0OiAn5byA55uY77yaJytpdGVtLmRhdGFbMF0sXHJcblx0XHRcdGNvbG9yOiBjb2xvclswXVxyXG5cdFx0fTtcclxuXHRcdGxldCB0ZXh0Mj17XHJcblx0XHRcdHRleHQ6ICfmlLbnm5jvvJonK2l0ZW0uZGF0YVsxXSxcclxuXHRcdFx0Y29sb3I6IGNvbG9yWzFdXHJcblx0XHR9O1xyXG5cdFx0bGV0IHRleHQzPXtcclxuXHRcdFx0dGV4dDogJ+acgOS9ju+8micraXRlbS5kYXRhWzJdLFxyXG5cdFx0XHRjb2xvcjogY29sb3JbMl1cclxuXHRcdH07XHJcblx0XHRsZXQgdGV4dDQ9e1xyXG5cdFx0XHR0ZXh0OiAn5pyA6auY77yaJytpdGVtLmRhdGFbM10sXHJcblx0XHRcdGNvbG9yOiBjb2xvclszXVxyXG5cdFx0fTtcclxuXHRcdHRleHRMaXN0LnB1c2godGV4dDEsdGV4dDIsdGV4dDMsdGV4dDQpO1xyXG4gICAgfSk7XHJcbiAgICB2YXIgdmFsaWRDYWxQb2ludHMgPSBbXTtcclxuICAgIHZhciBvZmZzZXQgPSB7XHJcbiAgICAgICAgeDogMCxcclxuICAgICAgICB5OiAwXHJcbiAgICB9O1xyXG4gICAgY2FsUG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKHBvaW50cykge1xyXG4gICAgICAgIGlmICh0eXBlb2YgcG9pbnRzW2luZGV4XSAhPT0gJ3VuZGVmaW5lZCcgJiYgcG9pbnRzW2luZGV4XSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB2YWxpZENhbFBvaW50cy5wdXNoKHBvaW50c1tpbmRleF0pO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cdG9mZnNldC54PU1hdGgucm91bmQodmFsaWRDYWxQb2ludHNbMF1bMF0ueCk7XHJcbiAgICByZXR1cm4geyB0ZXh0TGlzdDogdGV4dExpc3QsIG9mZnNldDogb2Zmc2V0IH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbmRDdXJyZW50SW5kZXgoY3VycmVudFBvaW50cywgeEF4aXNQb2ludHMsIG9wdHMsIGNvbmZpZykge1xyXG4gICAgdmFyIG9mZnNldCA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogMDtcclxuICAgIHZhciBjdXJyZW50SW5kZXggPSAtMTtcclxuICAgIGlmIChpc0luRXhhY3RDaGFydEFyZWEoY3VycmVudFBvaW50cywgb3B0cywgY29uZmlnKSkge1xyXG4gICAgICAgIHhBeGlzUG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50UG9pbnRzLnggKyBvZmZzZXQgPiBpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50SW5kZXggPSBpbmRleDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjdXJyZW50SW5kZXg7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzSW5FeGFjdENoYXJ0QXJlYShjdXJyZW50UG9pbnRzLCBvcHRzLCBjb25maWcpIHtcclxuICAgIHJldHVybiBjdXJyZW50UG9pbnRzLnggPCBvcHRzLndpZHRoIC0gY29uZmlnLnBhZGRpbmcgJiYgY3VycmVudFBvaW50cy54ID4gY29uZmlnLnBhZGRpbmcgKyBjb25maWcueUF4aXNXaWR0aCArIGNvbmZpZy55QXhpc1RpdGxlV2lkdGggJiYgY3VycmVudFBvaW50cy55ID4gY29uZmlnLnBhZGRpbmcgJiYgY3VycmVudFBvaW50cy55IDwgb3B0cy5oZWlnaHQgLSBjb25maWcubGVnZW5kSGVpZ2h0IC0gY29uZmlnLnhBeGlzSGVpZ2h0IC0gY29uZmlnLnBhZGRpbmc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbmRSYWRhckNoYXJ0Q3VycmVudEluZGV4KGN1cnJlbnRQb2ludHMsIHJhZGFyRGF0YSwgY291bnQpIHtcclxuICAgIHZhciBlYWNoQW5nbGVBcmVhID0gMiAqIE1hdGguUEkgLyBjb3VudDtcclxuICAgIHZhciBjdXJyZW50SW5kZXggPSAtMTtcclxuICAgIGlmIChpc0luRXhhY3RQaWVDaGFydEFyZWEoY3VycmVudFBvaW50cywgcmFkYXJEYXRhLmNlbnRlciwgcmFkYXJEYXRhLnJhZGl1cykpIHtcclxuICAgICAgICB2YXIgZml4QW5nbGUgPSBmdW5jdGlvbiBmaXhBbmdsZShhbmdsZSkge1xyXG4gICAgICAgICAgICBpZiAoYW5nbGUgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICBhbmdsZSArPSAyICogTWF0aC5QSTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYW5nbGUgPiAyICogTWF0aC5QSSkge1xyXG4gICAgICAgICAgICAgICAgYW5nbGUgLT0gMiAqIE1hdGguUEk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGFuZ2xlO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBhbmdsZSA9IE1hdGguYXRhbjIocmFkYXJEYXRhLmNlbnRlci55IC0gY3VycmVudFBvaW50cy55LCBjdXJyZW50UG9pbnRzLnggLSByYWRhckRhdGEuY2VudGVyLngpO1xyXG4gICAgICAgIGFuZ2xlID0gLTEgKiBhbmdsZTtcclxuICAgICAgICBpZiAoYW5nbGUgPCAwKSB7XHJcbiAgICAgICAgICAgIGFuZ2xlICs9IDIgKiBNYXRoLlBJO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGFuZ2xlTGlzdCA9IHJhZGFyRGF0YS5hbmdsZUxpc3QubWFwKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgIGl0ZW0gPSBmaXhBbmdsZSgtMSAqIGl0ZW0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW07XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGFuZ2xlTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xyXG4gICAgICAgICAgICB2YXIgcmFuZ2VTdGFydCA9IGZpeEFuZ2xlKGl0ZW0gLSBlYWNoQW5nbGVBcmVhIC8gMik7XHJcbiAgICAgICAgICAgIHZhciByYW5nZUVuZCA9IGZpeEFuZ2xlKGl0ZW0gKyBlYWNoQW5nbGVBcmVhIC8gMik7XHJcbiAgICAgICAgICAgIGlmIChyYW5nZUVuZCA8IHJhbmdlU3RhcnQpIHtcclxuICAgICAgICAgICAgICAgIHJhbmdlRW5kICs9IDIgKiBNYXRoLlBJO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChhbmdsZSA+PSByYW5nZVN0YXJ0ICYmIGFuZ2xlIDw9IHJhbmdlRW5kIHx8IGFuZ2xlICsgMiAqIE1hdGguUEkgPj0gcmFuZ2VTdGFydCAmJiBhbmdsZSArIDIgKiBNYXRoLlBJIDw9IHJhbmdlRW5kKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50SW5kZXggPSBpbmRleDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjdXJyZW50SW5kZXg7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbmRQaWVDaGFydEN1cnJlbnRJbmRleChjdXJyZW50UG9pbnRzLCBwaWVEYXRhKSB7XHJcbiAgICB2YXIgY3VycmVudEluZGV4ID0gLTE7XHJcbiAgICBpZiAoaXNJbkV4YWN0UGllQ2hhcnRBcmVhKGN1cnJlbnRQb2ludHMsIHBpZURhdGEuY2VudGVyLCBwaWVEYXRhLnJhZGl1cykpIHtcclxuICAgICAgICB2YXIgYW5nbGUgPSBNYXRoLmF0YW4yKHBpZURhdGEuY2VudGVyLnkgLSBjdXJyZW50UG9pbnRzLnksIGN1cnJlbnRQb2ludHMueCAtIHBpZURhdGEuY2VudGVyLngpO1xyXG4gICAgICAgIGFuZ2xlID0gLWFuZ2xlO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBwaWVEYXRhLnNlcmllcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgaXRlbSA9IHBpZURhdGEuc2VyaWVzW2ldO1xyXG4gICAgICAgICAgICBpZiAoaXNJbkFuZ2xlUmFuZ2UoYW5nbGUsIGl0ZW0uX3N0YXJ0XywgaXRlbS5fc3RhcnRfICsgaXRlbS5fcHJvcG9ydGlvbl8gKiAyICogTWF0aC5QSSkpIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRJbmRleCA9IGk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY3VycmVudEluZGV4O1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc0luRXhhY3RQaWVDaGFydEFyZWEoY3VycmVudFBvaW50cywgY2VudGVyLCByYWRpdXMpIHtcclxuICAgIHJldHVybiBNYXRoLnBvdyhjdXJyZW50UG9pbnRzLnggLSBjZW50ZXIueCwgMikgKyBNYXRoLnBvdyhjdXJyZW50UG9pbnRzLnkgLSBjZW50ZXIueSwgMikgPD0gTWF0aC5wb3cocmFkaXVzLCAyKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc3BsaXRQb2ludHMocG9pbnRzKSB7XHJcbiAgICB2YXIgbmV3UG9pbnRzID0gW107XHJcbiAgICB2YXIgaXRlbXMgPSBbXTtcclxuICAgIHBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xyXG4gICAgICAgIGlmIChpdGVtICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goaXRlbSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGl0ZW1zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgbmV3UG9pbnRzLnB1c2goaXRlbXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGl0ZW1zID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBpZiAoaXRlbXMubGVuZ3RoKSB7XHJcbiAgICAgICAgbmV3UG9pbnRzLnB1c2goaXRlbXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXdQb2ludHM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbExlZ2VuZERhdGEoc2VyaWVzLCBvcHRzLCBjb25maWcpIHtcclxuICAgIGlmIChvcHRzLmxlZ2VuZCA9PT0gZmFsc2UpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBsZWdlbmRMaXN0OiBbXSxcclxuICAgICAgICAgICAgbGVnZW5kSGVpZ2h0OiAwXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHQvL+mAgumFjUg16auY5YiG5bGPXHJcbiAgICB2YXIgcGFkZGluZyA9IDUqb3B0cy5waXhlbFJhdGlvO1xyXG4gICAgdmFyIG1hcmdpblRvcCA9IDgqb3B0cy5waXhlbFJhdGlvO1xyXG4gICAgdmFyIHNoYXBlV2lkdGggPSAxNSpvcHRzLnBpeGVsUmF0aW87XHJcbiAgICB2YXIgbGVnZW5kTGlzdCA9IFtdO1xyXG4gICAgdmFyIHdpZHRoQ291bnQgPSAwO1xyXG4gICAgdmFyIGN1cnJlbnRSb3cgPSBbXTtcclxuICAgIHNlcmllcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgdmFyIGl0ZW1XaWR0aCA9IDMgKiBwYWRkaW5nICsgc2hhcGVXaWR0aCArIG1lYXN1cmVUZXh0KGl0ZW0ubmFtZSB8fCAndW5kZWZpbmVkJyk7XHJcbiAgICAgICAgaWYgKHdpZHRoQ291bnQgKyBpdGVtV2lkdGggPiBvcHRzLndpZHRoKSB7XHJcbiAgICAgICAgICAgIGxlZ2VuZExpc3QucHVzaChjdXJyZW50Um93KTtcclxuICAgICAgICAgICAgd2lkdGhDb3VudCA9IGl0ZW1XaWR0aDtcclxuICAgICAgICAgICAgY3VycmVudFJvdyA9IFtpdGVtXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB3aWR0aENvdW50ICs9IGl0ZW1XaWR0aDtcclxuICAgICAgICAgICAgY3VycmVudFJvdy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgaWYgKGN1cnJlbnRSb3cubGVuZ3RoKSB7XHJcbiAgICAgICAgbGVnZW5kTGlzdC5wdXNoKGN1cnJlbnRSb3cpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbGVnZW5kTGlzdDogbGVnZW5kTGlzdCxcclxuICAgICAgICBsZWdlbmRIZWlnaHQ6IGxlZ2VuZExpc3QubGVuZ3RoICogKGNvbmZpZy5mb250U2l6ZSArIG1hcmdpblRvcCkgKyBwYWRkaW5nXHJcbiAgICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBjYWxDYXRlZ29yaWVzRGF0YShjYXRlZ29yaWVzLCBvcHRzLCBjb25maWcpIHtcclxuICAgIHZhciByZXN1bHQgPSB7XHJcbiAgICAgICAgYW5nbGU6IDAsXHJcbiAgICAgICAgeEF4aXNIZWlnaHQ6IGNvbmZpZy54QXhpc0hlaWdodFxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgX2dldFhBeGlzUG9pbnRzID0gZ2V0WEF4aXNQb2ludHMoY2F0ZWdvcmllcywgb3B0cywgY29uZmlnKSxcclxuICAgICAgICBlYWNoU3BhY2luZyA9IF9nZXRYQXhpc1BvaW50cy5lYWNoU3BhY2luZztcclxuXHJcbiAgICAvLyBnZXQgbWF4IGxlbmd0aCBvZiBjYXRlZ29yaWVzIHRleHRcclxuXHJcblxyXG4gICAgdmFyIGNhdGVnb3JpZXNUZXh0TGVudGggPSBjYXRlZ29yaWVzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgIHJldHVybiBtZWFzdXJlVGV4dChpdGVtKTtcclxuICAgIH0pO1xyXG5cdFxyXG4gICAgdmFyIG1heFRleHRMZW5ndGggPSBNYXRoLm1heC5hcHBseSh0aGlzLCBjYXRlZ29yaWVzVGV4dExlbnRoKTtcclxuXHJcbiAgICBpZiAob3B0cy54QXhpcy5yb3RhdGVMYWJlbD09dHJ1ZSAmJiBtYXhUZXh0TGVuZ3RoICsgMiAqIGNvbmZpZy54QXhpc1RleHRQYWRkaW5nID4gZWFjaFNwYWNpbmcpIHtcclxuICAgICAgICByZXN1bHQuYW5nbGUgPSA0NSAqIE1hdGguUEkgLyAxODA7XHJcbiAgICAgICAgcmVzdWx0LnhBeGlzSGVpZ2h0ID0gMiAqIGNvbmZpZy54QXhpc1RleHRQYWRkaW5nICsgbWF4VGV4dExlbmd0aCAqIE1hdGguc2luKHJlc3VsdC5hbmdsZSk7XHJcbiAgICB9XHJcblx0XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRSYWRhckRhdGFQb2ludHMoYW5nbGVMaXN0LCBjZW50ZXIsIHJhZGl1cywgc2VyaWVzLCBvcHRzKSB7XHJcbiAgICB2YXIgcHJvY2VzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDogMTtcclxuXHJcbiAgICB2YXIgcmFkYXJPcHRpb24gPSBvcHRzLmV4dHJhLnJhZGFyIHx8IHt9O1xyXG4gICAgcmFkYXJPcHRpb24ubWF4ID0gcmFkYXJPcHRpb24ubWF4IHx8IDA7XHJcbiAgICB2YXIgbWF4RGF0YSA9IE1hdGgubWF4KHJhZGFyT3B0aW9uLm1heCwgTWF0aC5tYXguYXBwbHkobnVsbCwgZGF0YUNvbWJpbmUoc2VyaWVzKSkpO1xyXG5cclxuICAgIHZhciBkYXRhID0gW107XHJcbiAgICBzZXJpZXMuZm9yRWFjaChmdW5jdGlvbiAoZWFjaCkge1xyXG4gICAgICAgIHZhciBsaXN0SXRlbSA9IHt9O1xyXG4gICAgICAgIGxpc3RJdGVtLmNvbG9yID0gZWFjaC5jb2xvcjtcclxuICAgICAgICBsaXN0SXRlbS5kYXRhID0gW107XHJcbiAgICAgICAgZWFjaC5kYXRhLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgICAgIHZhciB0bXAgPSB7fTtcclxuICAgICAgICAgICAgdG1wLmFuZ2xlID0gYW5nbGVMaXN0W2luZGV4XTtcclxuXHJcbiAgICAgICAgICAgIHRtcC5wcm9wb3J0aW9uID0gaXRlbSAvIG1heERhdGE7XHJcbiAgICAgICAgICAgIHRtcC5wb3NpdGlvbiA9IGNvbnZlcnRDb29yZGluYXRlT3JpZ2luKHJhZGl1cyAqIHRtcC5wcm9wb3J0aW9uICogcHJvY2VzcyAqIE1hdGguY29zKHRtcC5hbmdsZSksIHJhZGl1cyAqIHRtcC5wcm9wb3J0aW9uICogcHJvY2VzcyAqIE1hdGguc2luKHRtcC5hbmdsZSksIGNlbnRlcik7XHJcbiAgICAgICAgICAgIGxpc3RJdGVtLmRhdGEucHVzaCh0bXApO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBkYXRhLnB1c2gobGlzdEl0ZW0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGRhdGE7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFBpZURhdGFQb2ludHMoc2VyaWVzKSB7XHJcbiAgICB2YXIgcHJvY2VzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTtcclxuXHJcbiAgICB2YXIgY291bnQgPSAwO1xyXG4gICAgdmFyIF9zdGFydF8gPSAwO1xyXG4gICAgc2VyaWVzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICBpdGVtLmRhdGEgPSBpdGVtLmRhdGEgPT09IG51bGwgPyAwIDogaXRlbS5kYXRhO1xyXG4gICAgICAgIGNvdW50ICs9IGl0ZW0uZGF0YTtcclxuICAgIH0pO1xyXG4gICAgc2VyaWVzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICBpdGVtLmRhdGEgPSBpdGVtLmRhdGEgPT09IG51bGwgPyAwIDogaXRlbS5kYXRhO1xyXG5cdFx0aWYoY291bnQgPT09IDApe1xyXG5cdFx0XHRpdGVtLl9wcm9wb3J0aW9uXyA9IDEgLyBzZXJpZXMubGVuZ3RoO1xyXG5cdFx0fWVsc2V7XHJcblx0XHRcdGl0ZW0uX3Byb3BvcnRpb25fID0gaXRlbS5kYXRhIC8gY291bnQgKiBwcm9jZXNzO1xyXG5cdFx0fVxyXG4gICAgfSk7XHJcbiAgICBzZXJpZXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgIGl0ZW0uX3N0YXJ0XyA9IF9zdGFydF87XHJcbiAgICAgICAgX3N0YXJ0XyArPSAyICogaXRlbS5fcHJvcG9ydGlvbl8gKiBNYXRoLlBJO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHNlcmllcztcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0QXJjYmFyRGF0YVBvaW50cyhzZXJpZXMsYXJjYmFyT3B0aW9uKSB7XHJcbiAgICB2YXIgcHJvY2VzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMTtcclxuXHRpZihwcm9jZXNzPT0xKXtcclxuXHRcdHByb2Nlc3M9MC45OTk5OTk7XHJcblx0fVxyXG4gICAgc2VyaWVzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICBpdGVtLmRhdGEgPSBpdGVtLmRhdGEgPT09IG51bGwgPyAwIDogaXRlbS5kYXRhO1xyXG5cdFx0bGV0IHRvdGFsQW5nbGU7XHJcblx0XHRpZihhcmNiYXJPcHRpb24udHlwZT09J2RlZmF1bHQnKXtcclxuXHRcdFx0dG90YWxBbmdsZT1hcmNiYXJPcHRpb24uc3RhcnRBbmdsZS1hcmNiYXJPcHRpb24uZW5kQW5nbGUrMTtcclxuXHRcdH1lbHNle1xyXG5cdFx0XHR0b3RhbEFuZ2xlPTI7XHJcblx0XHR9XHJcblx0XHRpdGVtLl9wcm9wb3J0aW9uXyA9IHRvdGFsQW5nbGUgKiBpdGVtLmRhdGEqIHByb2Nlc3MgKyBhcmNiYXJPcHRpb24uc3RhcnRBbmdsZTtcclxuXHRcdGlmIChpdGVtLl9wcm9wb3J0aW9uXyA+PSAyKSB7XHJcblx0XHRcdGl0ZW0uX3Byb3BvcnRpb25fID0gaXRlbS5fcHJvcG9ydGlvbl8gJSAyO1xyXG5cdFx0fVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gc2VyaWVzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRHYXVnZUF4aXNQb2ludHMoY2F0ZWdvcmllcyxzdGFydEFuZ2xlLGVuZEFuZ2xlKSB7XHJcblx0bGV0IHRvdGFsQW5nbGU9c3RhcnRBbmdsZS1lbmRBbmdsZSsxO1xyXG5cdGxldCB0ZW1wU3RhcnRBbmdsZT1zdGFydEFuZ2xlO1xyXG5cdGZvcihsZXQgaT0wIDsgaTxjYXRlZ29yaWVzLmxlbmd0aDsgaSsrKXtcclxuXHRcdGNhdGVnb3JpZXNbaV0udmFsdWUgPSBjYXRlZ29yaWVzW2ldLnZhbHVlID09PSBudWxsID8gMCA6IGNhdGVnb3JpZXNbaV0udmFsdWU7XHJcblx0XHRjYXRlZ29yaWVzW2ldLl9zdGFydEFuZ2xlXz10ZW1wU3RhcnRBbmdsZTtcclxuXHRcdGNhdGVnb3JpZXNbaV0uX2VuZEFuZ2xlXz10b3RhbEFuZ2xlKiBjYXRlZ29yaWVzW2ldLnZhbHVlICsgc3RhcnRBbmdsZTtcclxuXHRcdGlmIChjYXRlZ29yaWVzW2ldLl9lbmRBbmdsZV8gPj0gMikge1xyXG5cdFx0XHRjYXRlZ29yaWVzW2ldLl9lbmRBbmdsZV8gPSBjYXRlZ29yaWVzW2ldLl9lbmRBbmdsZV8gJSAyO1xyXG5cdFx0fVxyXG5cdFx0dGVtcFN0YXJ0QW5nbGU9Y2F0ZWdvcmllc1tpXS5fZW5kQW5nbGVfO1xyXG5cdH1cclxuXHRyZXR1cm4gY2F0ZWdvcmllcztcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0R2F1Z2VEYXRhUG9pbnRzKHNlcmllcyxjYXRlZ29yaWVzLGdhdWdlT3B0aW9uKSB7XHJcbiAgICB2YXIgcHJvY2VzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogMTtcclxuICAgIHNlcmllcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgaXRlbS5kYXRhID0gaXRlbS5kYXRhID09PSBudWxsID8gMCA6IGl0ZW0uZGF0YTtcclxuXHRcdGlmKGdhdWdlT3B0aW9uLnBvaW50ZXIuY29sb3I9PSdhdXRvJyl7XHJcblx0XHRcdGZvcihsZXQgaT0wIDtpPGNhdGVnb3JpZXMubGVuZ3RoO2krKyl7XHJcblx0XHRcdFx0aWYoaXRlbS5kYXRhPD1jYXRlZ29yaWVzW2ldLnZhbHVlKXtcclxuXHRcdFx0XHRcdGl0ZW0uY29sb3I9Y2F0ZWdvcmllc1tpXS5jb2xvcjtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fWVsc2V7XHJcblx0XHRcdGl0ZW0uY29sb3I9Z2F1Z2VPcHRpb24ucG9pbnRlci5jb2xvcjtcclxuXHRcdH1cclxuXHRcdGxldCB0b3RhbEFuZ2xlPWdhdWdlT3B0aW9uLnN0YXJ0QW5nbGUtZ2F1Z2VPcHRpb24uZW5kQW5nbGUrMTtcclxuXHRcdGl0ZW0uX2VuZEFuZ2xlXz10b3RhbEFuZ2xlICogaXRlbS5kYXRhICsgZ2F1Z2VPcHRpb24uc3RhcnRBbmdsZTtcclxuXHRcdGl0ZW0uX29sZEFuZ2xlXz1nYXVnZU9wdGlvbi5vbGRBbmdsZTtcclxuXHRcdGlmKGdhdWdlT3B0aW9uLm9sZEFuZ2xlPGdhdWdlT3B0aW9uLmVuZEFuZ2xlKXtcclxuXHRcdFx0aXRlbS5fb2xkQW5nbGVfKz0yO1xyXG5cdFx0fVxyXG5cdFx0aWYoaXRlbS5kYXRhPj1nYXVnZU9wdGlvbi5vbGREYXRhKXtcclxuXHRcdFx0aXRlbS5fcHJvcG9ydGlvbl8gPSAoaXRlbS5fZW5kQW5nbGVfLWl0ZW0uX29sZEFuZ2xlXykqIHByb2Nlc3MrZ2F1Z2VPcHRpb24ub2xkQW5nbGU7XHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0aXRlbS5fcHJvcG9ydGlvbl8gPWl0ZW0uX29sZEFuZ2xlXy0gKGl0ZW0uX29sZEFuZ2xlXy1pdGVtLl9lbmRBbmdsZV8pKiBwcm9jZXNzO1xyXG5cdFx0fVxyXG5cdFx0aWYgKGl0ZW0uX3Byb3BvcnRpb25fID49IDIpIHtcclxuXHRcdFx0aXRlbS5fcHJvcG9ydGlvbl8gPSBpdGVtLl9wcm9wb3J0aW9uXyAlIDI7XHJcblx0XHR9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBzZXJpZXM7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBnZXRQaWVUZXh0TWF4TGVuZ3RoKHNlcmllcykge1xyXG4gICAgc2VyaWVzID0gZ2V0UGllRGF0YVBvaW50cyhzZXJpZXMpO1xyXG4gICAgdmFyIG1heExlbmd0aCA9IDA7XHJcbiAgICBzZXJpZXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgIHZhciB0ZXh0ID0gaXRlbS5mb3JtYXQgPyBpdGVtLmZvcm1hdCgraXRlbS5fcHJvcG9ydGlvbl8udG9GaXhlZCgyKSkgOiB1dGlsLnRvRml4ZWQoaXRlbS5fcHJvcG9ydGlvbl8gKiAxMDApICsgJyUnO1xyXG4gICAgICAgIG1heExlbmd0aCA9IE1hdGgubWF4KG1heExlbmd0aCwgbWVhc3VyZVRleHQodGV4dCkpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIG1heExlbmd0aDtcclxufVxyXG5cclxuZnVuY3Rpb24gZml4Q29sdW1lRGF0YShwb2ludHMsIGVhY2hTcGFjaW5nLCBjb2x1bW5MZW4sIGluZGV4LCBjb25maWcsIG9wdHMpIHtcclxuICAgIHJldHVybiBwb2ludHMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgaWYgKGl0ZW0gPT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGl0ZW0ud2lkdGggPSAoZWFjaFNwYWNpbmcgLSAyICogY29uZmlnLmNvbHVtZVBhZGRpbmcpIC8gY29sdW1uTGVuO1xyXG5cclxuICAgICAgICBpZiAob3B0cy5leHRyYS5jb2x1bW4gJiYgb3B0cy5leHRyYS5jb2x1bW4ud2lkdGggJiYgK29wdHMuZXh0cmEuY29sdW1uLndpZHRoID4gMCkge1xyXG4gICAgICAgICAgICAvLyBjdXN0b21lciBjb2x1bW4gd2lkdGhcclxuICAgICAgICAgICAgaXRlbS53aWR0aCA9IE1hdGgubWluKGl0ZW0ud2lkdGgsICtvcHRzLmV4dHJhLmNvbHVtbi53aWR0aCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gZGVmYXVsdCB3aWR0aCBzaG91bGQgbGVzcyB0cmFuIDI1cHhcclxuICAgICAgICAgICAgLy8gZG9uJ3QgYXNrIG1lIHdoeSwgSSBkb24ndCBrbm93XHJcbiAgICAgICAgICAgIGl0ZW0ud2lkdGggPSBNYXRoLm1pbihpdGVtLndpZHRoLCAyNSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGl0ZW0ueCArPSAoaW5kZXggKyAwLjUgLSBjb2x1bW5MZW4gLyAyKSAqIGl0ZW0ud2lkdGg7XHJcblxyXG4gICAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpeENvbHVtZU1ldGVyRGF0YShwb2ludHMsIGVhY2hTcGFjaW5nLCBjb2x1bW5MZW4sIGluZGV4LCBjb25maWcsIG9wdHMsIGJvcmRlcikge1xyXG4gICAgcmV0dXJuIHBvaW50cy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICBpZiAoaXRlbSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaXRlbS53aWR0aCA9IGVhY2hTcGFjaW5nIC0gMiAqIGNvbmZpZy5jb2x1bWVQYWRkaW5nO1xyXG5cclxuICAgICAgICBpZiAob3B0cy5leHRyYS5jb2x1bW4gJiYgb3B0cy5leHRyYS5jb2x1bW4ud2lkdGggJiYgK29wdHMuZXh0cmEuY29sdW1uLndpZHRoID4gMCkge1xyXG4gICAgICAgICAgICBpdGVtLndpZHRoID0gTWF0aC5taW4oaXRlbS53aWR0aCwgK29wdHMuZXh0cmEuY29sdW1uLndpZHRoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpdGVtLndpZHRoID0gTWF0aC5taW4oaXRlbS53aWR0aCwgMjUpO1xyXG4gICAgICAgIH1cclxuXHRcdGlmKGluZGV4PjApe1xyXG5cdFx0XHRpdGVtLndpZHRoIC09IDIqYm9yZGVyO1xyXG5cdFx0fVxyXG4gICAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpeENvbHVtZVN0YWNrRGF0YShwb2ludHMsIGVhY2hTcGFjaW5nLCBjb2x1bW5MZW4sIGluZGV4LCBjb25maWcsIG9wdHMsc2VyaWVzKSB7XHJcblx0XHJcbiAgICByZXR1cm4gcG9pbnRzLm1hcChmdW5jdGlvbiAoaXRlbSxpbmRleG4pIHtcclxuXHRcdFxyXG4gICAgICAgIGlmIChpdGVtID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpdGVtLndpZHRoID0gZWFjaFNwYWNpbmcgLSAyICogY29uZmlnLmNvbHVtZVBhZGRpbmc7XHJcblxyXG4gICAgICAgIGlmIChvcHRzLmV4dHJhLmNvbHVtbiAmJiBvcHRzLmV4dHJhLmNvbHVtbi53aWR0aCAmJiArb3B0cy5leHRyYS5jb2x1bW4ud2lkdGggPiAwKSB7XHJcbiAgICAgICAgICAgIGl0ZW0ud2lkdGggPSBNYXRoLm1pbihpdGVtLndpZHRoLCArb3B0cy5leHRyYS5jb2x1bW4ud2lkdGgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGl0ZW0ud2lkdGggPSBNYXRoLm1pbihpdGVtLndpZHRoLCAyNSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFhBeGlzUG9pbnRzKGNhdGVnb3JpZXMsIG9wdHMsIGNvbmZpZykge1xyXG4gICAgdmFyIHlBeGlzVG90YWxXaWR0aCA9IGNvbmZpZy55QXhpc1dpZHRoICsgY29uZmlnLnlBeGlzVGl0bGVXaWR0aDtcclxuICAgIHZhciBzcGFjaW5nVmFsaWQgPSBvcHRzLndpZHRoIC0gMiAqIGNvbmZpZy5wYWRkaW5nIC0geUF4aXNUb3RhbFdpZHRoO1xyXG4gICAgdmFyIGRhdGFDb3VudCA9IG9wdHMuZW5hYmxlU2Nyb2xsID8gTWF0aC5taW4ob3B0cy54QXhpcy5pdGVtQ291bnQsIGNhdGVnb3JpZXMubGVuZ3RoKSA6IGNhdGVnb3JpZXMubGVuZ3RoO1xyXG4gICAgdmFyIGVhY2hTcGFjaW5nID0gc3BhY2luZ1ZhbGlkIC8gZGF0YUNvdW50O1xyXG5cclxuICAgIHZhciB4QXhpc1BvaW50cyA9IFtdO1xyXG4gICAgdmFyIHN0YXJ0WCA9IGNvbmZpZy5wYWRkaW5nICsgeUF4aXNUb3RhbFdpZHRoO1xyXG4gICAgdmFyIGVuZFggPSBvcHRzLndpZHRoIC0gY29uZmlnLnBhZGRpbmc7XHJcbiAgICBjYXRlZ29yaWVzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgeEF4aXNQb2ludHMucHVzaChzdGFydFggKyBpbmRleCAqIGVhY2hTcGFjaW5nKTtcclxuICAgIH0pO1xyXG4gICAgaWYgKG9wdHMuZW5hYmxlU2Nyb2xsID09PSB0cnVlKSB7XHJcbiAgICAgICAgeEF4aXNQb2ludHMucHVzaChzdGFydFggKyBjYXRlZ29yaWVzLmxlbmd0aCAqIGVhY2hTcGFjaW5nKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgeEF4aXNQb2ludHMucHVzaChlbmRYKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4geyB4QXhpc1BvaW50czogeEF4aXNQb2ludHMsIHN0YXJ0WDogc3RhcnRYLCBlbmRYOiBlbmRYLCBlYWNoU3BhY2luZzogZWFjaFNwYWNpbmcgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0Q2FuZGxlRGF0YVBvaW50cyhkYXRhLCBtaW5SYW5nZSwgbWF4UmFuZ2UsIHhBeGlzUG9pbnRzLCBlYWNoU3BhY2luZywgb3B0cywgY29uZmlnKSB7XHJcbiAgICB2YXIgcHJvY2VzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiA3ICYmIGFyZ3VtZW50c1s3XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzddIDogMTtcclxuXHJcbiAgICB2YXIgcG9pbnRzID0gW107XHJcbiAgICB2YXIgdmFsaWRIZWlnaHQgPSBvcHRzLmhlaWdodCAtIDIgKiBjb25maWcucGFkZGluZyAtIGNvbmZpZy54QXhpc0hlaWdodCAtIGNvbmZpZy5sZWdlbmRIZWlnaHQ7XHJcbiAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgaWYgKGl0ZW0gPT09IG51bGwpIHtcclxuICAgICAgICAgICAgcG9pbnRzLnB1c2gobnVsbCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuXHRcdFx0dmFyIGNQb2ludHMgPSBbXTtcclxuXHRcdFx0aXRlbS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtcywgaW5kZXhzKSB7XHJcblx0XHRcdFx0IHZhciBwb2ludCA9IHt9O1xyXG5cdFx0XHRcdCBwb2ludC54ID0geEF4aXNQb2ludHNbaW5kZXhdICsgTWF0aC5yb3VuZChlYWNoU3BhY2luZyAvIDIpO1xyXG5cdFx0XHRcdCB2YXIgdmFsdWUgPSBpdGVtcy52YWx1ZSB8fCBpdGVtcztcclxuXHRcdFx0XHQgdmFyIGhlaWdodCA9IHZhbGlkSGVpZ2h0ICogKHZhbHVlIC0gbWluUmFuZ2UpIC8gKG1heFJhbmdlIC0gbWluUmFuZ2UpO1xyXG5cdFx0XHRcdCBoZWlnaHQgKj0gcHJvY2VzcztcclxuXHRcdFx0XHQgcG9pbnQueSA9IG9wdHMuaGVpZ2h0IC0gY29uZmlnLnhBeGlzSGVpZ2h0IC0gY29uZmlnLmxlZ2VuZEhlaWdodCAtIE1hdGgucm91bmQoaGVpZ2h0KSAtIGNvbmZpZy5wYWRkaW5nO1xyXG5cdFx0XHRcdCBjUG9pbnRzLnB1c2gocG9pbnQpO1xyXG5cdFx0XHR9KTtcclxuICAgICAgICAgICAgcG9pbnRzLnB1c2goY1BvaW50cyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHBvaW50cztcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0RGF0YVBvaW50cyhkYXRhLCBtaW5SYW5nZSwgbWF4UmFuZ2UsIHhBeGlzUG9pbnRzLCBlYWNoU3BhY2luZywgb3B0cywgY29uZmlnKSB7XHJcbiAgICB2YXIgcHJvY2VzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiA3ICYmIGFyZ3VtZW50c1s3XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzddIDogMTtcclxuXHJcbiAgICB2YXIgcG9pbnRzID0gW107XHJcbiAgICB2YXIgdmFsaWRIZWlnaHQgPSBvcHRzLmhlaWdodCAtIDIgKiBjb25maWcucGFkZGluZyAtIGNvbmZpZy54QXhpc0hlaWdodCAtIGNvbmZpZy5sZWdlbmRIZWlnaHQ7XHJcbiAgICBkYXRhLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgaWYgKGl0ZW0gPT09IG51bGwpIHtcclxuICAgICAgICAgICAgcG9pbnRzLnB1c2gobnVsbCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIHBvaW50ID0ge307XHJcblx0XHRcdHBvaW50LmNvbG9yID0gaXRlbS5jb2xvcjtcclxuICAgICAgICAgICAgcG9pbnQueCA9IHhBeGlzUG9pbnRzW2luZGV4XSArIE1hdGgucm91bmQoZWFjaFNwYWNpbmcgLyAyKTtcclxuXHRcdFx0dmFyIHZhbHVlID0gaXRlbTtcclxuXHRcdFx0aWYodHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnICYmIGl0ZW0gIT09IG51bGwpIHtcclxuXHRcdFx0XHR2YWx1ZSA9IGl0ZW0udmFsdWVcclxuXHRcdFx0fVxyXG4gICAgICAgICAgICB2YXIgaGVpZ2h0ID0gdmFsaWRIZWlnaHQgKiAodmFsdWUgLSBtaW5SYW5nZSkgLyAobWF4UmFuZ2UgLSBtaW5SYW5nZSk7XHJcbiAgICAgICAgICAgIGhlaWdodCAqPSBwcm9jZXNzO1xyXG4gICAgICAgICAgICBwb2ludC55ID0gb3B0cy5oZWlnaHQgLSBjb25maWcueEF4aXNIZWlnaHQgLSBjb25maWcubGVnZW5kSGVpZ2h0IC0gTWF0aC5yb3VuZChoZWlnaHQpIC0gY29uZmlnLnBhZGRpbmc7XHJcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKHBvaW50KTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gcG9pbnRzO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRTdGFja0RhdGFQb2ludHMoZGF0YSwgbWluUmFuZ2UsIG1heFJhbmdlLCB4QXhpc1BvaW50cywgZWFjaFNwYWNpbmcsIG9wdHMsIGNvbmZpZyxzZXJpZXNJbmRleCwgc3RhY2tTZXJpZXMpIHtcclxuICAgIHZhciBwcm9jZXNzID0gYXJndW1lbnRzLmxlbmd0aCA+IDkgJiYgYXJndW1lbnRzWzldICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbOV0gOiAxO1xyXG4gICAgdmFyIHBvaW50cyA9IFtdO1xyXG4gICAgdmFyIHZhbGlkSGVpZ2h0ID0gb3B0cy5oZWlnaHQgLSAyICogY29uZmlnLnBhZGRpbmcgLSBjb25maWcueEF4aXNIZWlnaHQgLSBjb25maWcubGVnZW5kSGVpZ2h0O1xyXG5cdFxyXG4gICAgZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xyXG4gICAgICAgIGlmIChpdGVtID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKG51bGwpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBwb2ludCA9IHt9O1xyXG5cdFx0XHRwb2ludC5jb2xvciA9IGl0ZW0uY29sb3I7XHJcbiAgICAgICAgICAgIHBvaW50LnggPSB4QXhpc1BvaW50c1tpbmRleF0gKyBNYXRoLnJvdW5kKGVhY2hTcGFjaW5nIC8gMik7XHJcblx0XHRcdFxyXG5cdFx0XHRpZihzZXJpZXNJbmRleD4wKXtcclxuXHRcdFx0XHR2YXIgdmFsdWU9MDtcclxuXHRcdFx0XHRmb3IobGV0IGk9MDtpPD1zZXJpZXNJbmRleDtpKyspe1xyXG5cdFx0XHRcdFx0dmFsdWUrPXN0YWNrU2VyaWVzW2ldLmRhdGFbaW5kZXhdO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHR2YXIgdmFsdWUwID0gdmFsdWUtaXRlbTtcclxuXHRcdFx0XHR2YXIgaGVpZ2h0ID0gdmFsaWRIZWlnaHQgKiAodmFsdWUgLSBtaW5SYW5nZSkgLyAobWF4UmFuZ2UgLSBtaW5SYW5nZSk7XHJcblx0XHRcdFx0dmFyIGhlaWdodDAgPSB2YWxpZEhlaWdodCAqICh2YWx1ZTAgLSBtaW5SYW5nZSkgLyAobWF4UmFuZ2UgLSBtaW5SYW5nZSk7XHJcblx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdHZhciB2YWx1ZSA9IGl0ZW07XHJcblx0XHRcdFx0dmFyIGhlaWdodCA9IHZhbGlkSGVpZ2h0ICogKHZhbHVlIC0gbWluUmFuZ2UpIC8gKG1heFJhbmdlIC0gbWluUmFuZ2UpO1xyXG5cdFx0XHRcdHZhciBoZWlnaHQwID0gMDtcclxuXHRcdFx0fVxyXG5cdFx0XHR2YXIgaGVpZ2h0Yz1oZWlnaHQwO1xyXG4gICAgICAgICAgICBoZWlnaHQgKj0gcHJvY2VzcztcclxuXHRcdFx0aGVpZ2h0YyAqPSBwcm9jZXNzO1xyXG5cdFx0XHRwb2ludC55ID0gb3B0cy5oZWlnaHQgLSBjb25maWcueEF4aXNIZWlnaHQgLSBjb25maWcubGVnZW5kSGVpZ2h0IC0gTWF0aC5yb3VuZChoZWlnaHQpIC0gY29uZmlnLnBhZGRpbmc7XHJcblx0XHRcdHBvaW50LnkwID0gb3B0cy5oZWlnaHQgLSBjb25maWcueEF4aXNIZWlnaHQgLSBjb25maWcubGVnZW5kSGVpZ2h0IC0gTWF0aC5yb3VuZChoZWlnaHRjKSAtIGNvbmZpZy5wYWRkaW5nO1xyXG4gICAgICAgICAgICBwb2ludHMucHVzaChwb2ludCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHBvaW50cztcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0WUF4aXNUZXh0TGlzdChzZXJpZXMsIG9wdHMsIGNvbmZpZyAsc3RhY2spIHtcclxuXHR2YXIgZGF0YTtcclxuXHRpZihzdGFjaz09J3N0YWNrJyl7XHJcblx0XHQvL2RhdGEgPSBkYXRhQ29tYmluZShzZXJpZXMpO1xyXG5cdFx0ZGF0YSA9IGRhdGFDb21iaW5lU3RhY2soc2VyaWVzKTtcclxuXHR9ZWxzZXtcclxuXHRcdGRhdGEgPSBkYXRhQ29tYmluZShzZXJpZXMpO1xyXG5cdH1cclxuXHRcclxuXHR2YXIgc29ydGVkID0gW107XHJcbiAgICAvLyByZW1vdmUgbnVsbCBmcm9tIGRhdGFcclxuICAgIGRhdGEgPSBkYXRhLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgIC8vcmV0dXJuIGl0ZW0gIT09IG51bGw7XHJcblx0XHRpZih0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcgJiYgaXRlbSAhPT0gbnVsbCkge1xyXG5cdFx0XHQvL+WIpOaWreaYr+WQpuS4uuaVsOe7hFxyXG5cdFx0XHRpZihpdGVtLmNvbnN0cnVjdG9yID09IEFycmF5KXtcclxuXHRcdFx0XHRyZXR1cm4gaXRlbSAhPT0gbnVsbDtcclxuXHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0cmV0dXJuIGl0ZW0udmFsdWUgIT09IG51bGw7XHJcblx0XHRcdH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gaXRlbSAhPT0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIC8vdmFyIG1pbkRhdGEgPSBNYXRoLm1pbi5hcHBseSh0aGlzLCBkYXRhKTtcclxuICAgIC8vdmFyIG1heERhdGEgPSBNYXRoLm1heC5hcHBseSh0aGlzLCBkYXRhKTtcclxuXHRkYXRhLm1hcCgoaXRlbSk9PntcclxuXHRcdGlmKHR5cGVvZiBpdGVtID09PSAnb2JqZWN0Jykge1xyXG5cdFx0XHRpZihpdGVtLmNvbnN0cnVjdG9yID09IEFycmF5KXtcclxuXHRcdFx0XHRpdGVtLm1hcCgoc3ViaXRlbSk9PntcclxuXHRcdFx0XHRcdHNvcnRlZC5wdXNoKHN1Yml0ZW0pO1xyXG5cdFx0XHRcdH0pXHJcblx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdHNvcnRlZC5wdXNoKGl0ZW0udmFsdWUpO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0ICAgIHNvcnRlZC5wdXNoKGl0ZW0pO1xyXG5cdFx0fVxyXG4gICAgICAgIC8vdHlwZW9mIGl0ZW0gPT09ICdvYmplY3QnID8gc29ydGVkLnB1c2goaXRlbS52YWx1ZSkgOiBzb3J0ZWQucHVzaChpdGVtKVxyXG4gICAgfSlcclxuXHR2YXIgbWluRGF0YSA9IDA7XHJcblx0dmFyIG1heERhdGEgPSAwO1xyXG5cdGlmKHNvcnRlZC5sZW5ndGg+MCl7XHJcblx0XHRtaW5EYXRhID0gTWF0aC5taW4uYXBwbHkodGhpcywgc29ydGVkKTtcclxuXHRcdG1heERhdGEgPSBNYXRoLm1heC5hcHBseSh0aGlzLCBzb3J0ZWQpO1xyXG5cdH1cclxuICAgIGlmICh0eXBlb2Ygb3B0cy55QXhpcy5taW4gPT09ICdudW1iZXInKSB7XHJcbiAgICAgICBtaW5EYXRhID0gTWF0aC5taW4ob3B0cy55QXhpcy5taW4sIG1pbkRhdGEpO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBvcHRzLnlBeGlzLm1heCA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICBtYXhEYXRhID0gTWF0aC5tYXgob3B0cy55QXhpcy5tYXgsIG1heERhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGZpeCBpc3N1ZSBodHRwczovL2dpdGh1Yi5jb20veGlhb2xpbjMzMDMvd3gtY2hhcnRzL2lzc3Vlcy85XHJcbiAgICBpZiAobWluRGF0YSA9PT0gbWF4RGF0YSkge1xyXG4gICAgICAgIHZhciByYW5nZVNwYW4gPSBtYXhEYXRhIHx8IDEwO1xyXG4gICAgICAgIC8vbWluRGF0YSAtPSByYW5nZVNwYW47XHJcbiAgICAgICAgbWF4RGF0YSArPSByYW5nZVNwYW47XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGRhdGFSYW5nZSA9IGdldERhdGFSYW5nZShtaW5EYXRhLCBtYXhEYXRhKTtcclxuICAgIHZhciBtaW5SYW5nZSA9IGRhdGFSYW5nZS5taW5SYW5nZTtcclxuICAgIHZhciBtYXhSYW5nZSA9IGRhdGFSYW5nZS5tYXhSYW5nZTtcclxuXHJcbiAgICB2YXIgcmFuZ2UgPSBbXTtcclxuICAgIHZhciBlYWNoUmFuZ2UgPSAobWF4UmFuZ2UgLSBtaW5SYW5nZSkgLyBjb25maWcueUF4aXNTcGxpdDtcclxuXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBjb25maWcueUF4aXNTcGxpdDsgaSsrKSB7XHJcbiAgICAgICAgcmFuZ2UucHVzaChtaW5SYW5nZSArIGVhY2hSYW5nZSAqIGkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJhbmdlLnJldmVyc2UoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2FsWUF4aXNEYXRhKHNlcmllcywgb3B0cywgY29uZmlnKSB7XHJcblx0Ly/loIblj6Dlm77ph43nrpdZ6L20XHJcblx0dmFyIGNvbHVtbnN0eWxlPWFzc2lnbih7fSxvcHRzLmV4dHJhLmNvbHVtbnx8e1widHlwZVwiOlwiXCJ9KTtcclxuXHRcclxuICAgIHZhciByYW5nZXMgPSBnZXRZQXhpc1RleHRMaXN0KHNlcmllcywgb3B0cywgY29uZmlnLCBjb2x1bW5zdHlsZS50eXBlKTtcclxuICAgIHZhciB5QXhpc1dpZHRoID0gY29uZmlnLnlBeGlzV2lkdGg7XHJcbiAgICB2YXIgcmFuZ2VzRm9ybWF0ID0gcmFuZ2VzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgIGl0ZW0gPSB1dGlsLnRvRml4ZWQoaXRlbSwgMik7XHJcbiAgICAgICAgaXRlbSA9IG9wdHMueUF4aXMuZm9ybWF0ID8gb3B0cy55QXhpcy5mb3JtYXQoTnVtYmVyKGl0ZW0pKSA6IGl0ZW07XHJcbiAgICAgICAgeUF4aXNXaWR0aCA9IE1hdGgubWF4KHlBeGlzV2lkdGgsIG1lYXN1cmVUZXh0KGl0ZW0pICsgNSk7XHJcbiAgICAgICAgcmV0dXJuIGl0ZW07XHJcbiAgICB9KTtcclxuICAgIGlmIChvcHRzLnlBeGlzLmRpc2FibGVkID09PSB0cnVlKSB7XHJcbiAgICAgICAgeUF4aXNXaWR0aCA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHsgcmFuZ2VzRm9ybWF0OiByYW5nZXNGb3JtYXQsIHJhbmdlczogcmFuZ2VzLCB5QXhpc1dpZHRoOiB5QXhpc1dpZHRoIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNhbFRvb2x0aXBZQXhpc0RhdGEocG9pbnQsc2VyaWVzLCBvcHRzLCBjb25maWcsIGVhY2hTcGFjaW5nKSB7XHJcbiAgICB2YXIgcmFuZ2VzID0gZ2V0WUF4aXNUZXh0TGlzdChzZXJpZXMsIG9wdHMsIGNvbmZpZyk7XHJcblx0dmFyIHNwYWNpbmdWYWxpZCA9IG9wdHMuaGVpZ2h0IC0gMiAqIGNvbmZpZy5wYWRkaW5nIC0gY29uZmlnLnhBeGlzSGVpZ2h0IC0gY29uZmlnLmxlZ2VuZEhlaWdodDtcclxuXHRsZXQgbWF4VmFsPXJhbmdlc1swXTtcclxuXHRsZXQgbWluVmFsPXJhbmdlc1tyYW5nZXMubGVuZ3RoLTFdO1xyXG5cdGxldCBtaW5BeGlzPWNvbmZpZy5wYWRkaW5nO1xyXG5cdGxldCBtYXhBeGlzPWNvbmZpZy5wYWRkaW5nK3NwYWNpbmdWYWxpZDtcclxuXHRsZXQgaXRlbT1tYXhWYWwtKG1heFZhbC1taW5WYWwpKihwb2ludC1taW5BeGlzKS8obWF4QXhpcy1taW5BeGlzKTtcclxuXHRpdGVtID0gb3B0cy55QXhpcy5mb3JtYXQgPyBvcHRzLnlBeGlzLmZvcm1hdChOdW1iZXIoaXRlbSkpIDogaXRlbTtcclxuICAgIHJldHVybiBpdGVtO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjb250ZXh0Um90YXRlKGNvbnRleHQsb3B0cykge1xyXG5cdGlmKG9wdHMucm90YXRlTG9jayE9PXRydWUpe1xyXG5cdFx0Y29udGV4dC50cmFuc2xhdGUob3B0cy5oZWlnaHQsIDApO1xyXG5cdFx0Y29udGV4dC5yb3RhdGUoOTAgKiBNYXRoLlBJIC8gMTgwKTtcclxuXHR9ZWxzZSBpZihvcHRzLl9yb3RhdGVfIT09dHJ1ZSl7XHJcblx0XHRjb250ZXh0LnRyYW5zbGF0ZShvcHRzLmhlaWdodCwgMCk7XHJcblx0XHRjb250ZXh0LnJvdGF0ZSg5MCAqIE1hdGguUEkgLyAxODApO1xyXG5cdFx0b3B0cy5fcm90YXRlXz10cnVlO1xyXG5cdH1cclxufVxyXG5cdFxyXG5mdW5jdGlvbiBkcmF3UG9pbnRTaGFwZShwb2ludHMsIGNvbG9yLCBzaGFwZSwgY29udGV4dCxvcHRzKSB7XHJcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShcIiNmZmZmZmZcIik7XHJcbiAgICBjb250ZXh0LnNldExpbmVXaWR0aCgxKm9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICBjb250ZXh0LnNldEZpbGxTdHlsZShjb2xvcik7XHJcbiAgICBpZiAoc2hhcGUgPT09ICdkaWFtb25kJykge1xyXG4gICAgICAgIHBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xyXG4gICAgICAgICAgICBpZiAoaXRlbSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8oaXRlbS54LCBpdGVtLnkgLSA0LjUpO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oaXRlbS54IC0gNC41LCBpdGVtLnkpO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oaXRlbS54LCBpdGVtLnkgKyA0LjUpO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oaXRlbS54ICsgNC41LCBpdGVtLnkpO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oaXRlbS54LCBpdGVtLnkgLSA0LjUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9IGVsc2UgaWYgKHNoYXBlID09PSAnY2lyY2xlJykge1xyXG4gICAgICAgIHBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xyXG4gICAgICAgICAgICBpZiAoaXRlbSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8oaXRlbS54ICsgMy41Km9wdHMucGl4ZWxSYXRpbywgaXRlbS55KTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQuYXJjKGl0ZW0ueCwgaXRlbS55LCA0Km9wdHMucGl4ZWxSYXRpbywgMCwgMiAqIE1hdGguUEksIGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSBlbHNlIGlmIChzaGFwZSA9PT0gJ3JlY3QnKSB7XHJcbiAgICAgICAgcG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgICAgIGlmIChpdGVtICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhpdGVtLnggLSAzLjUsIGl0ZW0ueSAtIDMuNSk7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LnJlY3QoaXRlbS54IC0gMy41LCBpdGVtLnkgLSAzLjUsIDcsIDcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9IGVsc2UgaWYgKHNoYXBlID09PSAndHJpYW5nbGUnKSB7XHJcbiAgICAgICAgcG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgICAgIGlmIChpdGVtICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhpdGVtLngsIGl0ZW0ueSAtIDQuNSk7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyhpdGVtLnggLSA0LjUsIGl0ZW0ueSArIDQuNSk7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyhpdGVtLnggKyA0LjUsIGl0ZW0ueSArIDQuNSk7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyhpdGVtLngsIGl0ZW0ueSAtIDQuNSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICBjb250ZXh0LmZpbGwoKTtcclxuICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdSaW5nVGl0bGUob3B0cywgY29uZmlnLCBjb250ZXh0KSB7XHJcbiAgICB2YXIgdGl0bGVmb250U2l6ZSA9IG9wdHMudGl0bGUuZm9udFNpemUgfHwgY29uZmlnLnRpdGxlRm9udFNpemU7XHJcbiAgICB2YXIgc3VidGl0bGVmb250U2l6ZSA9IG9wdHMuc3VidGl0bGUuZm9udFNpemUgfHwgY29uZmlnLnN1YnRpdGxlRm9udFNpemU7XHJcbiAgICB2YXIgdGl0bGUgPSBvcHRzLnRpdGxlLm5hbWUgfHwgJyc7XHJcbiAgICB2YXIgc3VidGl0bGUgPSBvcHRzLnN1YnRpdGxlLm5hbWUgfHwgJyc7XHJcbiAgICB2YXIgdGl0bGVGb250Q29sb3IgPSBvcHRzLnRpdGxlLmNvbG9yIHx8IGNvbmZpZy50aXRsZUNvbG9yO1xyXG4gICAgdmFyIHN1YnRpdGxlRm9udENvbG9yID0gb3B0cy5zdWJ0aXRsZS5jb2xvciB8fCBjb25maWcuc3VidGl0bGVDb2xvcjtcclxuICAgIHZhciB0aXRsZUhlaWdodCA9IHRpdGxlID8gdGl0bGVmb250U2l6ZSA6IDA7XHJcbiAgICB2YXIgc3VidGl0bGVIZWlnaHQgPSBzdWJ0aXRsZSA/IHN1YnRpdGxlZm9udFNpemUgOiAwO1xyXG4gICAgdmFyIG1hcmdpbiA9IDU7XHJcbiAgICBpZiAoc3VidGl0bGUpIHtcclxuICAgICAgICB2YXIgdGV4dFdpZHRoID0gbWVhc3VyZVRleHQoc3VidGl0bGUsIHN1YnRpdGxlZm9udFNpemUpO1xyXG4gICAgICAgIHZhciBzdGFydFggPSAob3B0cy53aWR0aCAtIHRleHRXaWR0aCkgLyAyICsgKG9wdHMuc3VidGl0bGUub2Zmc2V0WCB8fCAwKTtcclxuICAgICAgICB2YXIgc3RhcnRZID0gKChvcHRzLmhlaWdodCAtIGNvbmZpZy5sZWdlbmRIZWlnaHQgKyBzdWJ0aXRsZWZvbnRTaXplKSAvIDIgKSsgKG9wdHMuc3VidGl0bGUub2Zmc2V0WSB8fCAwKTtcclxuICAgICAgICBpZiAodGl0bGUpIHtcclxuICAgICAgICAgICAgc3RhcnRZIC09ICh0aXRsZUhlaWdodCArIG1hcmdpbikgLyAyIDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICBjb250ZXh0LnNldEZvbnRTaXplKHN1YnRpdGxlZm9udFNpemUpO1xyXG4gICAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKHN1YnRpdGxlRm9udENvbG9yKTtcclxuICAgICAgICBjb250ZXh0LmZpbGxUZXh0KHN1YnRpdGxlLCBzdGFydFgsIHN0YXJ0WSk7XHJcbiAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRpdGxlKSB7XHJcbiAgICAgICAgdmFyIF90ZXh0V2lkdGggPSBtZWFzdXJlVGV4dCh0aXRsZSwgdGl0bGVmb250U2l6ZSk7XHJcbiAgICAgICAgdmFyIF9zdGFydFggPSAob3B0cy53aWR0aCAtIF90ZXh0V2lkdGgpIC8gMiArIChvcHRzLnRpdGxlLm9mZnNldFggfHwgMCk7XHJcbiAgICAgICAgdmFyIF9zdGFydFkgPSAoKG9wdHMuaGVpZ2h0IC0gY29uZmlnLmxlZ2VuZEhlaWdodCArIHRpdGxlZm9udFNpemUpIC8gMiApICsgKG9wdHMudGl0bGUub2Zmc2V0WSB8fCAwKTtcclxuICAgICAgICBpZiAoc3VidGl0bGUpIHtcclxuICAgICAgICAgICAgX3N0YXJ0WSArPSAoc3VidGl0bGVIZWlnaHQgKyBtYXJnaW4pIC8gMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICBjb250ZXh0LnNldEZvbnRTaXplKHRpdGxlZm9udFNpemUpO1xyXG4gICAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKHRpdGxlRm9udENvbG9yKTtcclxuICAgICAgICBjb250ZXh0LmZpbGxUZXh0KHRpdGxlLCBfc3RhcnRYLCBfc3RhcnRZKTtcclxuICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdQb2ludFRleHQocG9pbnRzLCBzZXJpZXMsIGNvbmZpZywgY29udGV4dCkge1xyXG4gICAgLy8g57uY5Yi25pWw5o2u5paH5qGIXHJcbiAgICB2YXIgZGF0YSA9IHNlcmllcy5kYXRhO1xyXG5cclxuICAgIFxyXG4gICAgcG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgaWYgKGl0ZW0gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgLy92YXIgZm9ybWF0VmFsID0gc2VyaWVzLmZvcm1hdCA/IHNlcmllcy5mb3JtYXQoZGF0YVtpbmRleF0pIDogZGF0YVtpbmRleF07XHJcblx0XHRcdGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcblx0XHRcdGNvbnRleHQuc2V0Rm9udFNpemUoY29uZmlnLmZvbnRTaXplKTtcclxuXHRcdFx0Y29udGV4dC5zZXRGaWxsU3R5bGUoJyM2NjY2NjYnKTtcclxuXHRcdFx0dmFyIHZhbHVlID0gZGF0YVtpbmRleF1cclxuXHRcdFx0aWYodHlwZW9mIGRhdGFbaW5kZXhdID09PSAnb2JqZWN0JyAmJiBkYXRhW2luZGV4XSAhPT0gbnVsbCkge1xyXG5cdFx0XHRcdHZhbHVlID0gZGF0YVtpbmRleF0udmFsdWVcclxuXHRcdFx0fVxyXG4gICAgICAgICAgICB2YXIgZm9ybWF0VmFsID0gc2VyaWVzLmZvcm1hdCA/IHNlcmllcy5mb3JtYXQodmFsdWUpIDogdmFsdWU7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFRleHQoZm9ybWF0VmFsLCBpdGVtLnggLSBtZWFzdXJlVGV4dChmb3JtYXRWYWwpIC8gMiwgaXRlbS55IC0gMik7XHJcblx0XHRcdGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcblx0XHRcdGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgIFxyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3R2F1Z2VMYWJlbChnYXVnZU9wdGlvbiwgcmFkaXVzLCBjZW50ZXJQb3NpdGlvbiwgb3B0cywgY29uZmlnLCBjb250ZXh0KSB7XHJcbiAgICByYWRpdXMgLT0gZ2F1Z2VPcHRpb24ud2lkdGgvMitjb25maWcuZ2F1Z2VMYWJlbFRleHRNYXJnaW47XHJcbiAgICBcclxuXHRsZXQgdG90YWxBbmdsZT1nYXVnZU9wdGlvbi5zdGFydEFuZ2xlLWdhdWdlT3B0aW9uLmVuZEFuZ2xlKzE7XHJcblx0bGV0IHNwbGl0QW5nbGU9dG90YWxBbmdsZS9nYXVnZU9wdGlvbi5zcGxpdExpbmUuc3BsaXROdW1iZXI7XHJcblx0bGV0IHRvdGFsTnVtYmVyPWdhdWdlT3B0aW9uLmVuZE51bWJlci1nYXVnZU9wdGlvbi5zdGFydE51bWJlcjtcclxuXHRsZXQgc3BsaXROdW1iZXI9dG90YWxOdW1iZXIvZ2F1Z2VPcHRpb24uc3BsaXRMaW5lLnNwbGl0TnVtYmVyO1xyXG5cdGxldCBub3dBbmdsZT1nYXVnZU9wdGlvbi5zdGFydEFuZ2xlO1xyXG5cdGxldCBub3dOdW1iZXI9Z2F1Z2VPcHRpb24uc3RhcnROdW1iZXI7XHJcblx0Zm9yKGxldCBpPTA7aTxnYXVnZU9wdGlvbi5zcGxpdExpbmUuc3BsaXROdW1iZXIrMTtpKyspe1xyXG5cdFx0dmFyIHBvcyA9IHtcclxuXHRcdCAgICB4OiByYWRpdXMgKiBNYXRoLmNvcyhub3dBbmdsZSpNYXRoLlBJKSxcclxuXHRcdCAgICB5OiByYWRpdXMgKiBNYXRoLnNpbihub3dBbmdsZSpNYXRoLlBJKVxyXG5cdFx0fTtcclxuXHRcdHBvcy54Kz1jZW50ZXJQb3NpdGlvbi54LW1lYXN1cmVUZXh0KG5vd051bWJlcikvMjtcclxuXHRcdHBvcy55Kz1jZW50ZXJQb3NpdGlvbi55O1xyXG5cdFx0dmFyIHN0YXJ0WCA9IHBvcy54O1xyXG5cdFx0dmFyIHN0YXJ0WSA9IHBvcy55O1xyXG5cdFx0XHJcblx0XHRjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG5cdFx0Y29udGV4dC5zZXRGb250U2l6ZShjb25maWcuZm9udFNpemUpO1xyXG5cdFx0Y29udGV4dC5zZXRGaWxsU3R5bGUoZ2F1Z2VPcHRpb24ubGFiZWxDb2xvciB8fCAnIzY2NjY2NicpO1xyXG5cdFx0Y29udGV4dC5maWxsVGV4dChub3dOdW1iZXIsIHN0YXJ0WCwgc3RhcnRZICsgY29uZmlnLmZvbnRTaXplIC8gMik7XHJcblx0XHRjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG5cdFx0Y29udGV4dC5zdHJva2UoKTtcclxuXHRcdFxyXG5cdFx0bm93QW5nbGUrPXNwbGl0QW5nbGU7XHJcblx0XHRpZihub3dBbmdsZT49Mil7XHJcblx0XHRcdG5vd0FuZ2xlPW5vd0FuZ2xlICUgMjtcclxuXHRcdH1cclxuXHRcdG5vd051bWJlcis9c3BsaXROdW1iZXI7XHJcblx0fVxyXG5cdFxyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3UmFkYXJMYWJlbChhbmdsZUxpc3QsIHJhZGl1cywgY2VudGVyUG9zaXRpb24sIG9wdHMsIGNvbmZpZywgY29udGV4dCkge1xyXG4gICAgdmFyIHJhZGFyT3B0aW9uID0gb3B0cy5leHRyYS5yYWRhciB8fCB7fTtcclxuICAgIHJhZGl1cyArPSBjb25maWcucmFkYXJMYWJlbFRleHRNYXJnaW47XHJcbiAgICBcclxuICAgIGFuZ2xlTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChhbmdsZSwgaW5kZXgpIHtcclxuICAgICAgICB2YXIgcG9zID0ge1xyXG4gICAgICAgICAgICB4OiByYWRpdXMgKiBNYXRoLmNvcyhhbmdsZSksXHJcbiAgICAgICAgICAgIHk6IHJhZGl1cyAqIE1hdGguc2luKGFuZ2xlKVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIHBvc1JlbGF0aXZlQ2FudmFzID0gY29udmVydENvb3JkaW5hdGVPcmlnaW4ocG9zLngsIHBvcy55LCBjZW50ZXJQb3NpdGlvbik7XHJcbiAgICAgICAgdmFyIHN0YXJ0WCA9IHBvc1JlbGF0aXZlQ2FudmFzLng7XHJcbiAgICAgICAgdmFyIHN0YXJ0WSA9IHBvc1JlbGF0aXZlQ2FudmFzLnk7XHJcbiAgICAgICAgaWYgKHV0aWwuYXBwcm94aW1hdGVseUVxdWFsKHBvcy54LCAwKSkge1xyXG4gICAgICAgICAgICBzdGFydFggLT0gbWVhc3VyZVRleHQob3B0cy5jYXRlZ29yaWVzW2luZGV4XSB8fCAnJykgLyAyO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocG9zLnggPCAwKSB7XHJcbiAgICAgICAgICAgIHN0YXJ0WCAtPSBtZWFzdXJlVGV4dChvcHRzLmNhdGVnb3JpZXNbaW5kZXhdIHx8ICcnKTtcclxuICAgICAgICB9XHJcblx0XHRjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG5cdFx0Y29udGV4dC5zZXRGb250U2l6ZShjb25maWcuZm9udFNpemUpO1xyXG5cdFx0Y29udGV4dC5zZXRGaWxsU3R5bGUocmFkYXJPcHRpb24ubGFiZWxDb2xvciB8fCAnIzY2NjY2NicpO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFRleHQob3B0cy5jYXRlZ29yaWVzW2luZGV4XSB8fCAnJywgc3RhcnRYLCBzdGFydFkgKyBjb25maWcuZm9udFNpemUgLyAyKTtcclxuXHRcdGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcblx0XHRjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgfSk7XHJcbiAgICBcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd1BpZVRleHQoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIHJhZGl1cywgY2VudGVyKSB7XHJcbiAgICB2YXIgbGluZVJhZGl1cyA9IHJhZGl1cyArIGNvbmZpZy5waWVDaGFydExpbmVQYWRkaW5nO1xyXG4gICAgdmFyIHRleHRPYmplY3RDb2xsZWN0aW9uID0gW107XHJcbiAgICB2YXIgbGFzdFRleHRPYmplY3QgPSBudWxsO1xyXG5cclxuICAgIHZhciBzZXJpZXNDb252ZXJ0ID0gc2VyaWVzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgIHZhciBhcmMgPSAyICogTWF0aC5QSSAtIChpdGVtLl9zdGFydF8gKyAyICogTWF0aC5QSSAqIGl0ZW0uX3Byb3BvcnRpb25fIC8gMik7XHJcbiAgICAgICAgdmFyIHRleHQgPSBpdGVtLmZvcm1hdCA/IGl0ZW0uZm9ybWF0KCtpdGVtLl9wcm9wb3J0aW9uXy50b0ZpeGVkKDIpKSA6IHV0aWwudG9GaXhlZChpdGVtLl9wcm9wb3J0aW9uXyAqIDEwMCkgKyAnJSc7XHJcbiAgICAgICAgdmFyIGNvbG9yID0gaXRlbS5jb2xvcjtcclxuICAgICAgICByZXR1cm4geyBhcmM6IGFyYywgdGV4dDogdGV4dCwgY29sb3I6IGNvbG9yIH07XHJcbiAgICB9KTtcclxuICAgIHNlcmllc0NvbnZlcnQuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgIC8vIGxpbmUgZW5kXHJcbiAgICAgICAgdmFyIG9yZ2luWDEgPSBNYXRoLmNvcyhpdGVtLmFyYykgKiBsaW5lUmFkaXVzO1xyXG4gICAgICAgIHZhciBvcmdpblkxID0gTWF0aC5zaW4oaXRlbS5hcmMpICogbGluZVJhZGl1cztcclxuXHJcbiAgICAgICAgLy8gbGluZSBzdGFydFxyXG4gICAgICAgIHZhciBvcmdpblgyID0gTWF0aC5jb3MoaXRlbS5hcmMpICogcmFkaXVzO1xyXG4gICAgICAgIHZhciBvcmdpblkyID0gTWF0aC5zaW4oaXRlbS5hcmMpICogcmFkaXVzO1xyXG5cclxuICAgICAgICAvLyB0ZXh0IHN0YXJ0XHJcbiAgICAgICAgdmFyIG9yZ2luWDMgPSBvcmdpblgxID49IDAgPyBvcmdpblgxICsgY29uZmlnLnBpZUNoYXJ0VGV4dFBhZGRpbmcgOiBvcmdpblgxIC0gY29uZmlnLnBpZUNoYXJ0VGV4dFBhZGRpbmc7XHJcbiAgICAgICAgdmFyIG9yZ2luWTMgPSBvcmdpblkxO1xyXG5cclxuICAgICAgICB2YXIgdGV4dFdpZHRoID0gbWVhc3VyZVRleHQoaXRlbS50ZXh0KTtcclxuICAgICAgICB2YXIgc3RhcnRZID0gb3JnaW5ZMztcclxuXHJcbiAgICAgICAgaWYgKGxhc3RUZXh0T2JqZWN0ICYmIHV0aWwuaXNTYW1lWENvb3JkaW5hdGVBcmVhKGxhc3RUZXh0T2JqZWN0LnN0YXJ0LCB7IHg6IG9yZ2luWDMgfSkpIHtcclxuICAgICAgICAgICAgaWYgKG9yZ2luWDMgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBzdGFydFkgPSBNYXRoLm1pbihvcmdpblkzLCBsYXN0VGV4dE9iamVjdC5zdGFydC55KTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChvcmdpblgxIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgc3RhcnRZID0gTWF0aC5tYXgob3JnaW5ZMywgbGFzdFRleHRPYmplY3Quc3RhcnQueSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAob3JnaW5ZMyA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydFkgPSBNYXRoLm1heChvcmdpblkzLCBsYXN0VGV4dE9iamVjdC5zdGFydC55KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRZID0gTWF0aC5taW4ob3JnaW5ZMywgbGFzdFRleHRPYmplY3Quc3RhcnQueSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcmdpblgzIDwgMCkge1xyXG4gICAgICAgICAgICBvcmdpblgzIC09IHRleHRXaWR0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciB0ZXh0T2JqZWN0ID0ge1xyXG4gICAgICAgICAgICBsaW5lU3RhcnQ6IHtcclxuICAgICAgICAgICAgICAgIHg6IG9yZ2luWDIsXHJcbiAgICAgICAgICAgICAgICB5OiBvcmdpblkyXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxpbmVFbmQ6IHtcclxuICAgICAgICAgICAgICAgIHg6IG9yZ2luWDEsXHJcbiAgICAgICAgICAgICAgICB5OiBvcmdpblkxXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHN0YXJ0OiB7XHJcbiAgICAgICAgICAgICAgICB4OiBvcmdpblgzLFxyXG4gICAgICAgICAgICAgICAgeTogc3RhcnRZXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHdpZHRoOiB0ZXh0V2lkdGgsXHJcbiAgICAgICAgICAgIGhlaWdodDogY29uZmlnLmZvbnRTaXplLFxyXG4gICAgICAgICAgICB0ZXh0OiBpdGVtLnRleHQsXHJcbiAgICAgICAgICAgIGNvbG9yOiBpdGVtLmNvbG9yXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgbGFzdFRleHRPYmplY3QgPSBhdm9pZENvbGxpc2lvbih0ZXh0T2JqZWN0LCBsYXN0VGV4dE9iamVjdCk7XHJcbiAgICAgICAgdGV4dE9iamVjdENvbGxlY3Rpb24ucHVzaChsYXN0VGV4dE9iamVjdCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0ZXh0T2JqZWN0Q29sbGVjdGlvbi5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgdmFyIGxpbmVTdGFydFBvaXN0aW9uID0gY29udmVydENvb3JkaW5hdGVPcmlnaW4oaXRlbS5saW5lU3RhcnQueCwgaXRlbS5saW5lU3RhcnQueSwgY2VudGVyKTtcclxuICAgICAgICB2YXIgbGluZUVuZFBvaXN0aW9uID0gY29udmVydENvb3JkaW5hdGVPcmlnaW4oaXRlbS5saW5lRW5kLngsIGl0ZW0ubGluZUVuZC55LCBjZW50ZXIpO1xyXG4gICAgICAgIHZhciB0ZXh0UG9zaXRpb24gPSBjb252ZXJ0Q29vcmRpbmF0ZU9yaWdpbihpdGVtLnN0YXJ0LngsIGl0ZW0uc3RhcnQueSwgY2VudGVyKTtcclxuICAgICAgICBjb250ZXh0LnNldExpbmVXaWR0aCgxKm9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICAgICAgY29udGV4dC5zZXRGb250U2l6ZShjb25maWcuZm9udFNpemUpO1xyXG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShpdGVtLmNvbG9yKTtcclxuICAgICAgICBjb250ZXh0LnNldEZpbGxTdHlsZShpdGVtLmNvbG9yKTtcclxuICAgICAgICBjb250ZXh0Lm1vdmVUbyhsaW5lU3RhcnRQb2lzdGlvbi54LCBsaW5lU3RhcnRQb2lzdGlvbi55KTtcclxuICAgICAgICB2YXIgY3VydmVTdGFydFggPSBpdGVtLnN0YXJ0LnggPCAwID8gdGV4dFBvc2l0aW9uLnggKyBpdGVtLndpZHRoIDogdGV4dFBvc2l0aW9uLng7XHJcbiAgICAgICAgdmFyIHRleHRTdGFydFggPSBpdGVtLnN0YXJ0LnggPCAwID8gdGV4dFBvc2l0aW9uLnggLSA1IDogdGV4dFBvc2l0aW9uLnggKyA1O1xyXG4gICAgICAgIGNvbnRleHQucXVhZHJhdGljQ3VydmVUbyhsaW5lRW5kUG9pc3Rpb24ueCwgbGluZUVuZFBvaXN0aW9uLnksIGN1cnZlU3RhcnRYLCB0ZXh0UG9zaXRpb24ueSk7XHJcbiAgICAgICAgY29udGV4dC5tb3ZlVG8obGluZVN0YXJ0UG9pc3Rpb24ueCwgbGluZVN0YXJ0UG9pc3Rpb24ueSk7XHJcbiAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY29udGV4dC5tb3ZlVG8odGV4dFBvc2l0aW9uLnggKyBpdGVtLndpZHRoLCB0ZXh0UG9zaXRpb24ueSk7XHJcbiAgICAgICAgY29udGV4dC5hcmMoY3VydmVTdGFydFgsIHRleHRQb3NpdGlvbi55LCAyLCAwLCAyICogTWF0aC5QSSk7XHJcbiAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgICBjb250ZXh0LmZpbGwoKTtcclxuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG5cdFx0Y29udGV4dC5zZXRGb250U2l6ZShjb25maWcuZm9udFNpemUpO1xyXG4gICAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKCcjNjY2NjY2Jyk7XHJcbiAgICAgICAgY29udGV4dC5maWxsVGV4dChpdGVtLnRleHQsIHRleHRTdGFydFgsIHRleHRQb3NpdGlvbi55ICsgMyk7XHJcbiAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd1Rvb2xUaXBTcGxpdExpbmUob2Zmc2V0WCwgb3B0cywgY29uZmlnLCBjb250ZXh0KSB7XHJcblx0dmFyIHRvb2xUaXBPcHRpb24gPSBvcHRzLmV4dHJhLnRvb2x0aXAgfHwge307XHJcblx0dG9vbFRpcE9wdGlvbi5ncmlkVHlwZT10b29sVGlwT3B0aW9uLmdyaWRUeXBlPT11bmRlZmluZWQ/ICdzb2xpZCc6dG9vbFRpcE9wdGlvbi5ncmlkVHlwZTtcclxuXHR0b29sVGlwT3B0aW9uLmRhc2hMZW5ndGg9dG9vbFRpcE9wdGlvbi5kYXNoTGVuZ3RoPT11bmRlZmluZWQ/IDQ6dG9vbFRpcE9wdGlvbi5kYXNoTGVuZ3RoO1xyXG4gICAgdmFyIHN0YXJ0WSA9IGNvbmZpZy5wYWRkaW5nO1xyXG4gICAgdmFyIGVuZFkgPSBvcHRzLmhlaWdodCAtIGNvbmZpZy5wYWRkaW5nIC0gY29uZmlnLnhBeGlzSGVpZ2h0IC0gY29uZmlnLmxlZ2VuZEhlaWdodDtcclxuXHJcblx0aWYodG9vbFRpcE9wdGlvbi5ncmlkVHlwZT09J2Rhc2gnKXtcclxuXHRcdGNvbnRleHQuc2V0TGluZURhc2goW3Rvb2xUaXBPcHRpb24uZGFzaExlbmd0aCx0b29sVGlwT3B0aW9uLmRhc2hMZW5ndGhdKTtcclxuXHR9XHJcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG5cdGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUodG9vbFRpcE9wdGlvbi5ncmlkQ29sb3IgfHwgJyNjY2NjY2MnKTtcclxuXHRjb250ZXh0LnNldExpbmVXaWR0aCgxKm9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICBjb250ZXh0Lm1vdmVUbyhvZmZzZXRYLCBzdGFydFkpO1xyXG4gICAgY29udGV4dC5saW5lVG8ob2Zmc2V0WCwgZW5kWSk7XHJcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgY29udGV4dC5zdHJva2UoKTtcclxuXHRjb250ZXh0LnNldExpbmVEYXNoKFtdKTtcclxuXHRcclxuXHRpZih0b29sVGlwT3B0aW9uLnhBeGlzTGFiZWwpe1xyXG5cdFx0bGV0IGxhYmxlVGV4dCA9IG9wdHMuY2F0ZWdvcmllc1tvcHRzLnRvb2x0aXAuaW5kZXhdO1xyXG5cdFx0Y29udGV4dC5zZXRGb250U2l6ZShjb25maWcuZm9udFNpemUpO1xyXG5cdFx0bGV0IHRleHRXaWR0aCA9IGNvbnRleHQubWVhc3VyZVRleHQobGFibGVUZXh0KS53aWR0aDtcclxuXHRcdFxyXG5cdFx0bGV0IHRleHRYID0gb2Zmc2V0WCAtIGNvbmZpZy50b29sVGlwUGFkZGluZyAtIDAuNSAqIHRleHRXaWR0aCA7XHJcblx0XHRsZXQgdGV4dFkgPSBlbmRZO1xyXG5cdFx0Y29udGV4dC5iZWdpblBhdGgoKTtcclxuXHRcdGNvbnRleHQuc2V0RmlsbFN0eWxlKGhleFRvUmdiKHRvb2xUaXBPcHRpb24ubGFiZWxCZ0NvbG9yIHx8IGNvbmZpZy50b29sVGlwQmFja2dyb3VuZCwgdG9vbFRpcE9wdGlvbi5sYWJlbEJnT3BhY2l0eSB8fCBjb25maWcudG9vbFRpcE9wYWNpdHkpKTtcclxuXHRcdGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUodG9vbFRpcE9wdGlvbi5sYWJlbEJnQ29sb3IgfHwgY29uZmlnLnRvb2xUaXBCYWNrZ3JvdW5kKTtcclxuXHRcdGNvbnRleHQuc2V0TGluZVdpZHRoKDEqb3B0cy5waXhlbFJhdGlvKTtcclxuXHRcdGNvbnRleHQucmVjdCh0ZXh0WCwgdGV4dFksIHRleHRXaWR0aCArIDIgKiBjb25maWcudG9vbFRpcFBhZGRpbmcgLCBjb25maWcuZm9udFNpemUgKyAyICogY29uZmlnLnRvb2xUaXBQYWRkaW5nKTtcclxuXHRcdGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcblx0XHRjb250ZXh0LnN0cm9rZSgpO1xyXG5cdFx0Y29udGV4dC5maWxsKCk7XHJcblx0XHRcclxuXHRcdGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcblx0XHRjb250ZXh0LnNldEZvbnRTaXplKGNvbmZpZy5mb250U2l6ZSk7XHJcblx0XHRjb250ZXh0LnNldEZpbGxTdHlsZSh0b29sVGlwT3B0aW9uLmxhYmVsRm9udENvbG9yIHx8IGNvbmZpZy5mb250Q29sb3IpO1xyXG5cdFx0Y29udGV4dC5maWxsVGV4dChsYWJsZVRleHQsIHRleHRYKzIqY29uZmlnLnRvb2xUaXBQYWRkaW5nLCB0ZXh0WStjb25maWcudG9vbFRpcFBhZGRpbmcrY29uZmlnLmZvbnRTaXplKTtcclxuXHRcdGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcblx0XHRjb250ZXh0LnN0cm9rZSgpO1xyXG5cdH1cclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd1Rvb2xUaXBIb3JpemVudGFsTGluZShvcHRzLCBjb25maWcsIGNvbnRleHQsIGVhY2hTcGFjaW5nLCB4QXhpc1BvaW50cykge1xyXG5cdHZhciB0b29sVGlwT3B0aW9uID0gb3B0cy5leHRyYS50b29sdGlwIHx8IHt9O1xyXG5cdHRvb2xUaXBPcHRpb24uZ3JpZFR5cGU9dG9vbFRpcE9wdGlvbi5ncmlkVHlwZT09dW5kZWZpbmVkPyAnc29saWQnOnRvb2xUaXBPcHRpb24uZ3JpZFR5cGU7XHJcblx0dG9vbFRpcE9wdGlvbi5kYXNoTGVuZ3RoPXRvb2xUaXBPcHRpb24uZGFzaExlbmd0aD09dW5kZWZpbmVkPyA0OnRvb2xUaXBPcHRpb24uZGFzaExlbmd0aDtcclxuXHR2YXIgc3RhcnRYID0gY29uZmlnLnBhZGRpbmcgKyBjb25maWcueUF4aXNXaWR0aCArIGNvbmZpZy55QXhpc1RpdGxlV2lkdGg7XHJcblx0dmFyIGVuZFggPSBvcHRzLndpZHRoLWNvbmZpZy5wYWRkaW5nO1xyXG5cdFxyXG5cdGlmKHRvb2xUaXBPcHRpb24uZ3JpZFR5cGU9PSdkYXNoJyl7XHJcblx0XHRjb250ZXh0LnNldExpbmVEYXNoKFt0b29sVGlwT3B0aW9uLmRhc2hMZW5ndGgsdG9vbFRpcE9wdGlvbi5kYXNoTGVuZ3RoXSk7XHJcblx0fVxyXG4gICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuXHRjb250ZXh0LnNldFN0cm9rZVN0eWxlKHRvb2xUaXBPcHRpb24uZ3JpZENvbG9yIHx8ICcjY2NjY2NjJyk7XHJcblx0Y29udGV4dC5zZXRMaW5lV2lkdGgoMSpvcHRzLnBpeGVsUmF0aW8pO1xyXG5cdGNvbnRleHQubW92ZVRvKHN0YXJ0WCwgb3B0cy50b29sdGlwLm9mZnNldC55KTtcclxuXHRjb250ZXh0LmxpbmVUbyhlbmRYLCBvcHRzLnRvb2x0aXAub2Zmc2V0LnkpO1xyXG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcblx0Y29udGV4dC5zZXRMaW5lRGFzaChbXSk7XHJcblx0XHJcblx0aWYodG9vbFRpcE9wdGlvbi55QXhpc0xhYmVsKXtcclxuXHRcdFxyXG5cdFx0bGV0IGxhYmxlVGV4dCA9IGNhbFRvb2x0aXBZQXhpc0RhdGEob3B0cy50b29sdGlwLm9mZnNldC55LG9wdHMuc2VyaWVzLCBvcHRzLCBjb25maWcsZWFjaFNwYWNpbmcpO1xyXG5cdFx0Y29udGV4dC5zZXRGb250U2l6ZShjb25maWcuZm9udFNpemUpO1xyXG5cdFx0bGV0IHRleHRXaWR0aCA9IGNvbnRleHQubWVhc3VyZVRleHQobGFibGVUZXh0KS53aWR0aDtcclxuXHRcdFxyXG5cdFx0bGV0IHRleHRYID0gc3RhcnRYIC0gMipjb25maWcudG9vbFRpcFBhZGRpbmcgLSB0ZXh0V2lkdGggO1xyXG5cdFx0bGV0IHRleHRZID0gb3B0cy50b29sdGlwLm9mZnNldC55O1xyXG5cdFx0Y29udGV4dC5iZWdpblBhdGgoKTtcclxuXHRcdGNvbnRleHQuc2V0RmlsbFN0eWxlKGhleFRvUmdiKHRvb2xUaXBPcHRpb24ubGFiZWxCZ0NvbG9yIHx8IGNvbmZpZy50b29sVGlwQmFja2dyb3VuZCwgdG9vbFRpcE9wdGlvbi5sYWJlbEJnT3BhY2l0eSB8fCBjb25maWcudG9vbFRpcE9wYWNpdHkpKTtcclxuXHRcdGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUodG9vbFRpcE9wdGlvbi5sYWJlbEJnQ29sb3IgfHwgY29uZmlnLnRvb2xUaXBCYWNrZ3JvdW5kKTtcclxuXHRcdGNvbnRleHQuc2V0TGluZVdpZHRoKDEqb3B0cy5waXhlbFJhdGlvKTtcclxuXHRcdGNvbnRleHQucmVjdCh0ZXh0WCwgdGV4dFktMC41KmNvbmZpZy5mb250U2l6ZS1jb25maWcudG9vbFRpcFBhZGRpbmcsIHRleHRXaWR0aCArIDIgKiBjb25maWcudG9vbFRpcFBhZGRpbmcgLCBjb25maWcuZm9udFNpemUgKyAyICogY29uZmlnLnRvb2xUaXBQYWRkaW5nKTtcclxuXHRcdGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcblx0XHRjb250ZXh0LnN0cm9rZSgpO1xyXG5cdFx0Y29udGV4dC5maWxsKCk7XHJcblx0XHRcclxuXHRcdGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcblx0XHRjb250ZXh0LnNldEZvbnRTaXplKGNvbmZpZy5mb250U2l6ZSk7XHJcblx0XHRjb250ZXh0LnNldEZpbGxTdHlsZSh0b29sVGlwT3B0aW9uLmxhYmVsRm9udENvbG9yIHx8IGNvbmZpZy5mb250Q29sb3IpO1xyXG5cdFx0Y29udGV4dC5maWxsVGV4dChsYWJsZVRleHQsIHRleHRYK2NvbmZpZy50b29sVGlwUGFkZGluZywgdGV4dFkrMC41KmNvbmZpZy5mb250U2l6ZSk7XHJcblx0XHRjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG5cdFx0Y29udGV4dC5zdHJva2UoKTtcclxuXHR9XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBkcmF3VG9vbFRpcFNwbGl0QXJlYShvZmZzZXRYLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIGVhY2hTcGFjaW5nKSB7XHJcblx0dmFyIHRvb2xUaXBPcHRpb24gPSBvcHRzLmV4dHJhLnRvb2x0aXAgfHwge2FjdGl2ZUJnQ29sb3IgOicjMDAwMDAwJyxhY3RpdmVCZ09wYWNpdHkgOjAuMDh9O1xyXG5cdHRvb2xUaXBPcHRpb24uYWN0aXZlQmdDb2xvciA9IHRvb2xUaXBPcHRpb24uYWN0aXZlQmdDb2xvcj8gdG9vbFRpcE9wdGlvbi5hY3RpdmVCZ0NvbG9yOicjMDAwMDAwJztcclxuXHR0b29sVGlwT3B0aW9uLmFjdGl2ZUJnT3BhY2l0eSA9IHRvb2xUaXBPcHRpb24uYWN0aXZlQmdPcGFjaXR5PyB0b29sVGlwT3B0aW9uLmFjdGl2ZUJnT3BhY2l0eTowLjA4O1xyXG4gICAgdmFyIHN0YXJ0WSA9IGNvbmZpZy5wYWRkaW5nO1xyXG4gICAgdmFyIGVuZFkgPSBvcHRzLmhlaWdodCAtIGNvbmZpZy5wYWRkaW5nIC0gY29uZmlnLnhBeGlzSGVpZ2h0IC0gY29uZmlnLmxlZ2VuZEhlaWdodDtcclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcblx0Y29udGV4dC5zZXRGaWxsU3R5bGUoaGV4VG9SZ2IodG9vbFRpcE9wdGlvbi5hY3RpdmVCZ0NvbG9yLCB0b29sVGlwT3B0aW9uLmFjdGl2ZUJnT3BhY2l0eSkpO1xyXG5cdGNvbnRleHQucmVjdChvZmZzZXRYLWVhY2hTcGFjaW5nLzIsIHN0YXJ0WSwgZWFjaFNwYWNpbmcsIGVuZFktc3RhcnRZKTtcclxuXHRjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG5cdGNvbnRleHQuZmlsbCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3VG9vbFRpcCh0ZXh0TGlzdCwgb2Zmc2V0LCBvcHRzLCBjb25maWcsIGNvbnRleHQsIGVhY2hTcGFjaW5nLCB4QXhpc1BvaW50cykge1xyXG5cdHZhciB0b29sVGlwT3B0aW9uID0gb3B0cy5leHRyYS50b29sdGlwIHx8IHtiZ0NvbG9yOicjMDAwMDAwJyxiZ09wYWNpdHkgOjAuNyxmb250Q29sb3I6JyNGRkZGRkYnfTtcclxuXHR0b29sVGlwT3B0aW9uLmJnQ29sb3IgPSB0b29sVGlwT3B0aW9uLmJnQ29sb3I/IHRvb2xUaXBPcHRpb24uYmdDb2xvcjonIzAwMDAwMCc7XHJcblx0dG9vbFRpcE9wdGlvbi5iZ09wYWNpdHkgPSB0b29sVGlwT3B0aW9uLmJnT3BhY2l0eT8gdG9vbFRpcE9wdGlvbi5iZ09wYWNpdHk6MC43O1xyXG5cdHRvb2xUaXBPcHRpb24uZm9udENvbG9yICA9IHRvb2xUaXBPcHRpb24uZm9udENvbG9yID8gdG9vbFRpcE9wdGlvbi5mb250Q29sb3IgOicjRkZGRkZGJztcclxuICAgIHZhciBsZWdlbmRXaWR0aCA9IDQqb3B0cy5waXhlbFJhdGlvO1xyXG4gICAgdmFyIGxlZ2VuZE1hcmdpblJpZ2h0ID0gNSpvcHRzLnBpeGVsUmF0aW87XHJcbiAgICB2YXIgYXJyb3dXaWR0aCA9IDgqb3B0cy5waXhlbFJhdGlvO1xyXG4gICAgdmFyIGlzT3ZlclJpZ2h0Qm9yZGVyID0gZmFsc2U7XHJcblx0aWYob3B0cy50eXBlPT0nbGluZScgfHwgb3B0cy50eXBlPT0nYXJlYScgfHxvcHRzLnR5cGU9PSdjYW5kbGUnIHx8IG9wdHMudHlwZT09J21peCcpe1xyXG5cdFx0ZHJhd1Rvb2xUaXBTcGxpdExpbmUob3B0cy50b29sdGlwLm9mZnNldC54LCBvcHRzLCBjb25maWcsIGNvbnRleHQpO1xyXG5cdH1cclxuXHRcclxuICAgIG9mZnNldCA9IGFzc2lnbih7XHJcbiAgICAgICAgeDogMCxcclxuICAgICAgICB5OiAwXHJcbiAgICB9LCBvZmZzZXQpO1xyXG4gICAgb2Zmc2V0LnkgLT0gOCpvcHRzLnBpeGVsUmF0aW87XHJcbiAgICB2YXIgdGV4dFdpZHRoID0gdGV4dExpc3QubWFwKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgcmV0dXJuIG1lYXN1cmVUZXh0KGl0ZW0udGV4dCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB2YXIgdG9vbFRpcFdpZHRoID0gbGVnZW5kV2lkdGggKyBsZWdlbmRNYXJnaW5SaWdodCArIDQgKiBjb25maWcudG9vbFRpcFBhZGRpbmcgKyBNYXRoLm1heC5hcHBseShudWxsLCB0ZXh0V2lkdGgpO1xyXG4gICAgdmFyIHRvb2xUaXBIZWlnaHQgPSAyICogY29uZmlnLnRvb2xUaXBQYWRkaW5nICsgdGV4dExpc3QubGVuZ3RoICogY29uZmlnLnRvb2xUaXBMaW5lSGVpZ2h0O1xyXG5cclxuICAgIC8vIGlmIGJleW9uZCB0aGUgcmlnaHQgYm9yZGVyXHJcbiAgICBpZiAob2Zmc2V0LnggLSBNYXRoLmFicyhvcHRzLl9zY3JvbGxEaXN0YW5jZV8pICsgYXJyb3dXaWR0aCArIHRvb2xUaXBXaWR0aCA+IG9wdHMud2lkdGgpIHtcclxuICAgICAgICBpc092ZXJSaWdodEJvcmRlciA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZHJhdyBiYWNrZ3JvdW5kIHJlY3RcclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICBjb250ZXh0LnNldEZpbGxTdHlsZShoZXhUb1JnYih0b29sVGlwT3B0aW9uLmJnQ29sb3IgfHwgY29uZmlnLnRvb2xUaXBCYWNrZ3JvdW5kLCB0b29sVGlwT3B0aW9uLmJnT3BhY2l0eSB8fCBjb25maWcudG9vbFRpcE9wYWNpdHkpKTtcclxuICAgIGlmIChpc092ZXJSaWdodEJvcmRlcikge1xyXG4gICAgICAgIGNvbnRleHQubW92ZVRvKG9mZnNldC54LCBvZmZzZXQueSArIDEwKm9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8ob2Zmc2V0LnggLSBhcnJvd1dpZHRoLCBvZmZzZXQueSArIDEwKm9wdHMucGl4ZWxSYXRpbyAtIDUqb3B0cy5waXhlbFJhdGlvKTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyhvZmZzZXQueCAtIGFycm93V2lkdGgsIG9mZnNldC55KTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyhvZmZzZXQueCAtIGFycm93V2lkdGggLSBNYXRoLnJvdW5kKHRvb2xUaXBXaWR0aCksIG9mZnNldC55KTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyhvZmZzZXQueCAtIGFycm93V2lkdGggLSBNYXRoLnJvdW5kKHRvb2xUaXBXaWR0aCksIG9mZnNldC55K3Rvb2xUaXBIZWlnaHQpO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKG9mZnNldC54IC0gYXJyb3dXaWR0aCwgb2Zmc2V0LnkrdG9vbFRpcEhlaWdodCk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8ob2Zmc2V0LnggLSBhcnJvd1dpZHRoLCBvZmZzZXQueSArIDEwKm9wdHMucGl4ZWxSYXRpbyArIDUqb3B0cy5waXhlbFJhdGlvKTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyhvZmZzZXQueCwgb2Zmc2V0LnkgKyAxMCpvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBjb250ZXh0Lm1vdmVUbyhvZmZzZXQueCwgb2Zmc2V0LnkgKyAxMCpvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgICAgIGNvbnRleHQubGluZVRvKG9mZnNldC54ICsgYXJyb3dXaWR0aCwgb2Zmc2V0LnkgKyAxMCpvcHRzLnBpeGVsUmF0aW8gLSA1Km9wdHMucGl4ZWxSYXRpbyk7XHJcblx0XHRjb250ZXh0LmxpbmVUbyhvZmZzZXQueCArIGFycm93V2lkdGgsIG9mZnNldC55KTtcclxuXHRcdGNvbnRleHQubGluZVRvKG9mZnNldC54ICsgYXJyb3dXaWR0aCArIE1hdGgucm91bmQodG9vbFRpcFdpZHRoKSwgb2Zmc2V0LnkpO1xyXG5cdFx0Y29udGV4dC5saW5lVG8ob2Zmc2V0LnggKyBhcnJvd1dpZHRoICsgTWF0aC5yb3VuZCh0b29sVGlwV2lkdGgpLCBvZmZzZXQueSt0b29sVGlwSGVpZ2h0KTtcclxuXHRcdGNvbnRleHQubGluZVRvKG9mZnNldC54ICsgYXJyb3dXaWR0aCwgb2Zmc2V0LnkrdG9vbFRpcEhlaWdodCk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8ob2Zmc2V0LnggKyBhcnJvd1dpZHRoLCBvZmZzZXQueSArIDEwKm9wdHMucGl4ZWxSYXRpbyArIDUqb3B0cy5waXhlbFJhdGlvKTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyhvZmZzZXQueCwgb2Zmc2V0LnkgKyAxMCpvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICBjb250ZXh0LmZpbGwoKTtcclxuXHJcbiAgICAvLyBkcmF3IGxlZ2VuZFxyXG4gICAgdGV4dExpc3QuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcclxuXHRcdGlmKGl0ZW0uY29sb3IgIT09IG51bGwpe1xyXG5cdFx0XHRjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRjb250ZXh0LnNldEZpbGxTdHlsZShpdGVtLmNvbG9yKTtcclxuXHRcdFx0dmFyIHN0YXJ0WCA9IG9mZnNldC54ICsgYXJyb3dXaWR0aCArIDIgKiBjb25maWcudG9vbFRpcFBhZGRpbmc7XHJcblx0XHRcdHZhciBzdGFydFkgPSBvZmZzZXQueSArIChjb25maWcudG9vbFRpcExpbmVIZWlnaHQgLSBjb25maWcuZm9udFNpemUpIC8gMiArIGNvbmZpZy50b29sVGlwTGluZUhlaWdodCAqIGluZGV4ICsgY29uZmlnLnRvb2xUaXBQYWRkaW5nICsgMTtcclxuXHRcdFx0aWYgKGlzT3ZlclJpZ2h0Qm9yZGVyKSB7XHJcblx0XHRcdCAgICBzdGFydFggPSBvZmZzZXQueCAtIHRvb2xUaXBXaWR0aCAtIGFycm93V2lkdGggKyAyICogY29uZmlnLnRvb2xUaXBQYWRkaW5nO1xyXG5cdFx0XHR9XHJcblx0XHRcdGNvbnRleHQuZmlsbFJlY3Qoc3RhcnRYLCBzdGFydFksIGxlZ2VuZFdpZHRoLCBjb25maWcuZm9udFNpemUpO1xyXG5cdFx0XHRjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG5cdFx0fVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gZHJhdyB0ZXh0IGxpc3RcclxuICAgIFxyXG4gICAgdGV4dExpc3QuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcclxuICAgICAgICB2YXIgc3RhcnRYID0gb2Zmc2V0LnggKyBhcnJvd1dpZHRoICsgMiAqIGNvbmZpZy50b29sVGlwUGFkZGluZyArIGxlZ2VuZFdpZHRoICsgbGVnZW5kTWFyZ2luUmlnaHQ7XHJcbiAgICAgICAgaWYgKGlzT3ZlclJpZ2h0Qm9yZGVyKSB7XHJcbiAgICAgICAgICAgIHN0YXJ0WCA9IG9mZnNldC54IC0gdG9vbFRpcFdpZHRoIC0gYXJyb3dXaWR0aCArIDIgKiBjb25maWcudG9vbFRpcFBhZGRpbmcgKyArbGVnZW5kV2lkdGggKyBsZWdlbmRNYXJnaW5SaWdodDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHN0YXJ0WSA9IG9mZnNldC55ICsgKGNvbmZpZy50b29sVGlwTGluZUhlaWdodCAtIGNvbmZpZy5mb250U2l6ZSkgLyAyICsgY29uZmlnLnRvb2xUaXBMaW5lSGVpZ2h0ICogaW5kZXggKyBjb25maWcudG9vbFRpcFBhZGRpbmc7XHJcblx0XHRjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG5cdFx0Y29udGV4dC5zZXRGb250U2l6ZShjb25maWcuZm9udFNpemUpO1xyXG5cdFx0Y29udGV4dC5zZXRGaWxsU3R5bGUodG9vbFRpcE9wdGlvbi5mb250Q29sb3IpO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFRleHQoaXRlbS50ZXh0LCBzdGFydFgsIHN0YXJ0WSArIGNvbmZpZy5mb250U2l6ZSk7XHJcblx0XHRjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG5cdFx0Y29udGV4dC5zdHJva2UoKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3WUF4aXNUaXRsZSh0aXRsZSwgb3B0cywgY29uZmlnLCBjb250ZXh0KSB7XHJcbiAgICB2YXIgc3RhcnRYID0gY29uZmlnLnhBeGlzSGVpZ2h0ICsgKG9wdHMuaGVpZ2h0IC0gY29uZmlnLnhBeGlzSGVpZ2h0IC0gbWVhc3VyZVRleHQodGl0bGUpKSAvIDI7XHJcbiAgICBjb250ZXh0LnNhdmUoKTtcclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICBjb250ZXh0LnNldEZvbnRTaXplKGNvbmZpZy5mb250U2l6ZSk7XHJcbiAgICBjb250ZXh0LnNldEZpbGxTdHlsZShvcHRzLnlBeGlzLnRpdGxlRm9udENvbG9yIHx8ICcjMzMzMzMzJyk7XHJcbiAgICBjb250ZXh0LnRyYW5zbGF0ZSgwLCBvcHRzLmhlaWdodCk7XHJcbiAgICBjb250ZXh0LnJvdGF0ZSgtOTAgKiBNYXRoLlBJIC8gMTgwKTtcclxuICAgIGNvbnRleHQuZmlsbFRleHQodGl0bGUsIHN0YXJ0WCwgY29uZmlnLnBhZGRpbmcgKyAwLjUgKiBjb25maWcuZm9udFNpemUpO1xyXG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICBjb250ZXh0LnJlc3RvcmUoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd0NvbHVtbkRhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpIHtcclxuICAgIHZhciBwcm9jZXNzID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiAxO1xyXG5cdHZhciBjb2x1bW5PcHRpb24gPSBvcHRzLmV4dHJhLmNvbHVtbiB8fCB7dHlwZTp7fSxtZXRlcjp7fX07XHJcblx0Y29sdW1uT3B0aW9uLnR5cGU9Y29sdW1uT3B0aW9uLnR5cGU9PXVuZGVmaW5lZD8gJ2dyb3VwJzpjb2x1bW5PcHRpb24udHlwZTtcclxuXHRjb2x1bW5PcHRpb24ubWV0ZXI9Y29sdW1uT3B0aW9uLm1ldGVyfHx7fVxyXG5cdGNvbHVtbk9wdGlvbi5tZXRlci5ib3JkZXI9Y29sdW1uT3B0aW9uLm1ldGVyLmJvcmRlcj09dW5kZWZpbmVkPyA0OmNvbHVtbk9wdGlvbi5tZXRlci5ib3JkZXI7XHJcblx0Y29sdW1uT3B0aW9uLm1ldGVyLmZpbGxDb2xvcj1jb2x1bW5PcHRpb24ubWV0ZXIuZmlsbENvbG9yPT11bmRlZmluZWQ/ICcjRkZGRkZGJzpjb2x1bW5PcHRpb24ubWV0ZXIuZmlsbENvbG9yO1xyXG4gICAgdmFyIF9jYWxZQXhpc0RhdGEgPSBjYWxZQXhpc0RhdGEoc2VyaWVzLCBvcHRzLCBjb25maWcpLFxyXG4gICAgICAgIHJhbmdlcyA9IF9jYWxZQXhpc0RhdGEucmFuZ2VzO1xyXG5cdFx0XHJcbiAgICB2YXIgX2dldFhBeGlzUG9pbnRzID0gZ2V0WEF4aXNQb2ludHMob3B0cy5jYXRlZ29yaWVzLCBvcHRzLCBjb25maWcpLFxyXG4gICAgICAgIHhBeGlzUG9pbnRzID0gX2dldFhBeGlzUG9pbnRzLnhBeGlzUG9pbnRzLFxyXG4gICAgICAgIGVhY2hTcGFjaW5nID0gX2dldFhBeGlzUG9pbnRzLmVhY2hTcGFjaW5nO1xyXG5cclxuICAgIHZhciBtaW5SYW5nZSA9IHJhbmdlcy5wb3AoKTtcclxuICAgIHZhciBtYXhSYW5nZSA9IHJhbmdlcy5zaGlmdCgpO1xyXG5cdHZhciBjYWxQb2ludHMgPSBbXTtcclxuXHRcclxuICAgIGNvbnRleHQuc2F2ZSgpO1xyXG4gICAgaWYgKG9wdHMuX3Njcm9sbERpc3RhbmNlXyAmJiBvcHRzLl9zY3JvbGxEaXN0YW5jZV8gIT09IDAgJiYgb3B0cy5lbmFibGVTY3JvbGwgPT09IHRydWUpIHtcclxuICAgICAgICBjb250ZXh0LnRyYW5zbGF0ZShvcHRzLl9zY3JvbGxEaXN0YW5jZV8sIDApO1xyXG4gICAgfVxyXG5cdGlmIChvcHRzLnRvb2x0aXAgJiYgb3B0cy50b29sdGlwLnRleHRMaXN0ICYmIG9wdHMudG9vbHRpcC50ZXh0TGlzdC5sZW5ndGggJiYgcHJvY2VzcyA9PT0gMSkge1xyXG5cdCAgICBkcmF3VG9vbFRpcFNwbGl0QXJlYShvcHRzLnRvb2x0aXAub2Zmc2V0LngsIG9wdHMsIGNvbmZpZywgY29udGV4dCwgZWFjaFNwYWNpbmcpO1xyXG5cdH1cclxuXHRcclxuICAgIHNlcmllcy5mb3JFYWNoKGZ1bmN0aW9uIChlYWNoU2VyaWVzLCBzZXJpZXNJbmRleCkge1xyXG4gICAgICAgIHZhciBkYXRhID0gZWFjaFNlcmllcy5kYXRhO1xyXG5cdFx0c3dpdGNoIChjb2x1bW5PcHRpb24udHlwZSl7XHJcblx0XHRjYXNlICdncm91cCc6XHJcblx0XHRcdHZhciBwb2ludHMgPSBnZXREYXRhUG9pbnRzKGRhdGEsIG1pblJhbmdlLCBtYXhSYW5nZSwgeEF4aXNQb2ludHMsIGVhY2hTcGFjaW5nLCBvcHRzLCBjb25maWcsIHByb2Nlc3MpO1xyXG5cdFx0XHR2YXIgdG9vbHRpcFBvaW50cyA9IGdldFN0YWNrRGF0YVBvaW50cyhkYXRhLCBtaW5SYW5nZSwgbWF4UmFuZ2UsIHhBeGlzUG9pbnRzLCBlYWNoU3BhY2luZywgb3B0cywgY29uZmlnLCBzZXJpZXNJbmRleCwgc2VyaWVzLHByb2Nlc3MpO1xyXG5cdFx0XHRjYWxQb2ludHMucHVzaCh0b29sdGlwUG9pbnRzKTtcclxuXHRcdFx0cG9pbnRzID0gZml4Q29sdW1lRGF0YShwb2ludHMsIGVhY2hTcGFjaW5nLCBzZXJpZXMubGVuZ3RoLCBzZXJpZXNJbmRleCwgY29uZmlnLCBvcHRzKTtcclxuXHRcdFx0cG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XHJcblx0XHRcdFx0aWYgKGl0ZW0gIT09IG51bGwpIHtcclxuXHRcdFx0XHRcdGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcblx0XHRcdFx0XHRjb250ZXh0LnNldEZpbGxTdHlsZShpdGVtLmNvbG9yIHx8IGVhY2hTZXJpZXMuY29sb3IpO1xyXG5cdFx0XHRcdFx0dmFyIHN0YXJ0WCA9IGl0ZW0ueCAtIGl0ZW0ud2lkdGggLyAyICsgMTtcclxuXHRcdFx0XHRcdHZhciBoZWlnaHQgPSBvcHRzLmhlaWdodCAtIGl0ZW0ueSAtIGNvbmZpZy5wYWRkaW5nIC0gY29uZmlnLnhBeGlzSGVpZ2h0IC0gY29uZmlnLmxlZ2VuZEhlaWdodDtcclxuXHRcdFx0XHRcdGNvbnRleHQubW92ZVRvKHN0YXJ0WCwgaXRlbS55KTtcclxuXHRcdFx0XHRcdGNvbnRleHQuZmlsbFJlY3Qoc3RhcnRYLCBpdGVtLnksIGl0ZW0ud2lkdGggLSAyLCBoZWlnaHQpO1xyXG5cdFx0XHRcdFx0Y29udGV4dC5jbG9zZVBhdGgoKTtcclxuXHRcdFx0XHRcdGNvbnRleHQuZmlsbCgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSAnc3RhY2snOlxyXG5cdFx0XHQvLyDnu5jliLbloIblj6DmlbDmja7lm75cclxuXHRcdFx0dmFyIHBvaW50cyA9IGdldFN0YWNrRGF0YVBvaW50cyhkYXRhLCBtaW5SYW5nZSwgbWF4UmFuZ2UsIHhBeGlzUG9pbnRzLCBlYWNoU3BhY2luZywgb3B0cywgY29uZmlnLCBzZXJpZXNJbmRleCwgc2VyaWVzLHByb2Nlc3MpO1xyXG5cdFx0XHRjYWxQb2ludHMucHVzaChwb2ludHMpO1xyXG5cdFx0XHRwb2ludHMgPSBmaXhDb2x1bWVTdGFja0RhdGEocG9pbnRzLCBlYWNoU3BhY2luZywgc2VyaWVzLmxlbmd0aCwgc2VyaWVzSW5kZXgsIGNvbmZpZywgb3B0cyxzZXJpZXMpO1xyXG5cdFx0XHRcclxuXHRcdFx0cG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XHJcblx0XHRcdFx0aWYgKGl0ZW0gIT09IG51bGwpIHtcclxuXHRcdFx0XHRcdGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcblx0XHRcdFx0XHRjb250ZXh0LnNldEZpbGxTdHlsZShpdGVtLmNvbG9yIHx8IGVhY2hTZXJpZXMuY29sb3IpO1xyXG5cdFx0XHRcdFx0dmFyIHN0YXJ0WCA9IGl0ZW0ueCAtIGl0ZW0ud2lkdGggLyAyICsgMTtcclxuXHRcdFx0XHRcdHZhciBoZWlnaHQgPSBvcHRzLmhlaWdodCAtIGl0ZW0ueSAtIGNvbmZpZy5wYWRkaW5nIC0gY29uZmlnLnhBeGlzSGVpZ2h0IC0gY29uZmlnLmxlZ2VuZEhlaWdodDtcclxuXHRcdFx0XHRcdHZhciBoZWlnaHQwID0gb3B0cy5oZWlnaHQgLSBpdGVtLnkwIC0gY29uZmlnLnBhZGRpbmcgLSBjb25maWcueEF4aXNIZWlnaHQgLSBjb25maWcubGVnZW5kSGVpZ2h0O1xyXG5cdFx0XHRcdFx0aWYoc2VyaWVzSW5kZXg+MCl7XHJcblx0XHRcdFx0XHRcdGhlaWdodCAtPSBoZWlnaHQwO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0Y29udGV4dC5tb3ZlVG8oc3RhcnRYLCBpdGVtLnkpO1xyXG5cdFx0XHRcdFx0Y29udGV4dC5maWxsUmVjdChzdGFydFgsIGl0ZW0ueSwgaXRlbS53aWR0aCAtIDIsIGhlaWdodCk7XHJcblx0XHRcdFx0XHRjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG5cdFx0XHRcdFx0Y29udGV4dC5maWxsKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlICdtZXRlcic6XHJcblx0XHQvLyDnu5jliLbmuKnluqborqHmlbDmja7lm75cclxuXHRcdFx0dmFyIHBvaW50cyA9IGdldERhdGFQb2ludHMoZGF0YSwgbWluUmFuZ2UsIG1heFJhbmdlLCB4QXhpc1BvaW50cywgZWFjaFNwYWNpbmcsIG9wdHMsIGNvbmZpZywgcHJvY2Vzcyk7XHJcblx0XHRcdGNhbFBvaW50cy5wdXNoKHBvaW50cyk7XHJcblx0XHRcdHBvaW50cyA9IGZpeENvbHVtZU1ldGVyRGF0YShwb2ludHMsIGVhY2hTcGFjaW5nLCBzZXJpZXMubGVuZ3RoLCBzZXJpZXNJbmRleCwgY29uZmlnLCBvcHRzLCBjb2x1bW5PcHRpb24ubWV0ZXIuYm9yZGVyKTtcclxuXHRcdFx0aWYoc2VyaWVzSW5kZXg9PTApe1xyXG5cdFx0XHRcdHBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xyXG5cdFx0XHRcdFx0aWYgKGl0ZW0gIT09IG51bGwpIHtcclxuXHRcdFx0XHRcdFx0Ly/nlLvog4zmma/popzoibJcclxuXHRcdFx0XHRcdFx0Y29udGV4dC5iZWdpblBhdGgoKTtcclxuXHRcdFx0XHRcdFx0Y29udGV4dC5zZXRGaWxsU3R5bGUoY29sdW1uT3B0aW9uLm1ldGVyLmZpbGxDb2xvcik7XHJcblx0XHRcdFx0XHRcdHZhciBzdGFydFggPSBpdGVtLnggLSBpdGVtLndpZHRoIC8gMiArIDE7XHJcblx0XHRcdFx0XHRcdHZhciBoZWlnaHQgPSBvcHRzLmhlaWdodCAtIGl0ZW0ueSAtIGNvbmZpZy5wYWRkaW5nIC0gY29uZmlnLnhBeGlzSGVpZ2h0IC0gY29uZmlnLmxlZ2VuZEhlaWdodDtcclxuXHRcdFx0XHRcdFx0Y29udGV4dC5tb3ZlVG8oc3RhcnRYLCBpdGVtLnkpO1xyXG5cdFx0XHRcdFx0XHRjb250ZXh0LmZpbGxSZWN0KHN0YXJ0WCwgaXRlbS55LCBpdGVtLndpZHRoIC0gMiwgaGVpZ2h0KTtcclxuXHRcdFx0XHRcdFx0Y29udGV4dC5jbG9zZVBhdGgoKTtcclxuXHRcdFx0XHRcdFx0Y29udGV4dC5maWxsKCk7XHJcblx0XHRcdFx0XHRcdC8v55S76L655qGG57q/XHJcblx0XHRcdFx0XHRcdGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcblx0XHRcdFx0XHRcdGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoZWFjaFNlcmllcy5jb2xvcik7XHJcblx0XHRcdFx0XHRcdGNvbnRleHQuc2V0TGluZVdpZHRoKGNvbHVtbk9wdGlvbi5tZXRlci5ib3JkZXIqb3B0cy5waXhlbFJhdGlvKTtcclxuXHRcdFx0XHRcdFx0Y29udGV4dC5tb3ZlVG8oc3RhcnRYK2NvbHVtbk9wdGlvbi5tZXRlci5ib3JkZXIqMC41LCBpdGVtLnkraGVpZ2h0KTtcclxuXHRcdFx0XHRcdFx0Y29udGV4dC5saW5lVG8oc3RhcnRYK2NvbHVtbk9wdGlvbi5tZXRlci5ib3JkZXIqMC41LCBpdGVtLnkrY29sdW1uT3B0aW9uLm1ldGVyLmJvcmRlciowLjUpO1xyXG5cdFx0XHRcdFx0XHRjb250ZXh0LmxpbmVUbyhzdGFydFgraXRlbS53aWR0aC1jb2x1bW5PcHRpb24ubWV0ZXIuYm9yZGVyLCBpdGVtLnkrY29sdW1uT3B0aW9uLm1ldGVyLmJvcmRlciowLjUpO1xyXG5cdFx0XHRcdFx0XHRjb250ZXh0LmxpbmVUbyhzdGFydFgraXRlbS53aWR0aC1jb2x1bW5PcHRpb24ubWV0ZXIuYm9yZGVyLCBpdGVtLnkraGVpZ2h0KTtcclxuXHRcdFx0XHRcdFx0Y29udGV4dC5zdHJva2UoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0cG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XHJcblx0XHRcdFx0XHRpZiAoaXRlbSAhPT0gbnVsbCkge1xyXG5cdFx0XHRcdFx0XHRjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRcdFx0XHRjb250ZXh0LnNldEZpbGxTdHlsZShpdGVtLmNvbG9yIHx8IGVhY2hTZXJpZXMuY29sb3IpO1xyXG5cdFx0XHRcdFx0XHR2YXIgc3RhcnRYID0gaXRlbS54IC0gaXRlbS53aWR0aCAvIDIgKyAxO1xyXG5cdFx0XHRcdFx0XHR2YXIgaGVpZ2h0ID0gb3B0cy5oZWlnaHQgLSBpdGVtLnkgLSBjb25maWcucGFkZGluZyAtIGNvbmZpZy54QXhpc0hlaWdodCAtIGNvbmZpZy5sZWdlbmRIZWlnaHQ7XHJcblx0XHRcdFx0XHRcdGNvbnRleHQubW92ZVRvKHN0YXJ0WCwgaXRlbS55KTtcclxuXHRcdFx0XHRcdFx0Y29udGV4dC5yZWN0KHN0YXJ0WCwgaXRlbS55LCBpdGVtLndpZHRoIC0gMiwgaGVpZ2h0KTtcclxuXHRcdFx0XHRcdFx0Y29udGV4dC5jbG9zZVBhdGgoKTtcclxuXHRcdFx0XHRcdFx0Y29udGV4dC5maWxsKCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHRcdFx0YnJlYWs7XHJcblx0XHR9XHJcbiAgICB9KTtcclxuXHRpZiAob3B0cy5kYXRhTGFiZWwgIT09IGZhbHNlICYmIHByb2Nlc3MgPT09IDEpIHtcclxuXHQgICAgc2VyaWVzLmZvckVhY2goZnVuY3Rpb24gKGVhY2hTZXJpZXMsIHNlcmllc0luZGV4KSB7XHJcblx0ICAgICAgICB2YXIgZGF0YSA9IGVhY2hTZXJpZXMuZGF0YTtcclxuXHRcdFx0c3dpdGNoIChjb2x1bW5PcHRpb24udHlwZSl7XHJcblx0XHRcdFx0Y2FzZSAnZ3JvdXAnOlxyXG5cdFx0XHRcdHZhciBwb2ludHMgPSBnZXREYXRhUG9pbnRzKGRhdGEsIG1pblJhbmdlLCBtYXhSYW5nZSwgeEF4aXNQb2ludHMsIGVhY2hTcGFjaW5nLCBvcHRzLCBjb25maWcsIHByb2Nlc3MpO1xyXG5cdFx0XHRcdHBvaW50cyA9IGZpeENvbHVtZURhdGEocG9pbnRzLCBlYWNoU3BhY2luZywgc2VyaWVzLmxlbmd0aCwgc2VyaWVzSW5kZXgsIGNvbmZpZywgb3B0cyk7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0ZHJhd1BvaW50VGV4dChwb2ludHMsIGVhY2hTZXJpZXMsIGNvbmZpZywgY29udGV4dCk7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSAnc3RhY2snOlxyXG5cdFx0XHRcdHZhciBwb2ludHMgPSBnZXRTdGFja0RhdGFQb2ludHMoZGF0YSwgbWluUmFuZ2UsIG1heFJhbmdlLCB4QXhpc1BvaW50cywgZWFjaFNwYWNpbmcsIG9wdHMsIGNvbmZpZywgc2VyaWVzSW5kZXgsIHNlcmllcyxwcm9jZXNzKTtcclxuXHRcdFx0XHRkcmF3UG9pbnRUZXh0KHBvaW50cywgZWFjaFNlcmllcywgY29uZmlnLCBjb250ZXh0KTtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRjYXNlICdtZXRlcic6XHJcblx0XHRcdFx0dmFyIHBvaW50cyA9IGdldERhdGFQb2ludHMoZGF0YSwgbWluUmFuZ2UsIG1heFJhbmdlLCB4QXhpc1BvaW50cywgZWFjaFNwYWNpbmcsIG9wdHMsIGNvbmZpZywgcHJvY2Vzcyk7XHJcblx0XHRcdFx0ZHJhd1BvaW50VGV4dChwb2ludHMsIGVhY2hTZXJpZXMsIGNvbmZpZywgY29udGV4dCk7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHQgICAgfSk7XHJcblx0fVxyXG5cdFxyXG4gICAgY29udGV4dC5yZXN0b3JlKCk7XHJcblx0XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHhBeGlzUG9pbnRzOiB4QXhpc1BvaW50cyxcclxuXHRcdGNhbFBvaW50czogY2FsUG9pbnRzLFxyXG4gICAgICAgIGVhY2hTcGFjaW5nOiBlYWNoU3BhY2luZ1xyXG4gICAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd0NhbmRsZURhdGFQb2ludHMoc2VyaWVzLCBzZXJpZXNNQSwgb3B0cywgY29uZmlnLCBjb250ZXh0KSB7XHJcbiAgICB2YXIgcHJvY2VzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDogMTtcclxuXHR2YXIgY2FuZGxlT3B0aW9uID0gb3B0cy5leHRyYS5jYW5kbGUgfHwge2NvbG9yOnt9LGF2ZXJhZ2U6e319O1xyXG5cdGNhbmRsZU9wdGlvbi5jb2xvci51cExpbmU9Y2FuZGxlT3B0aW9uLmNvbG9yLnVwTGluZT8gY2FuZGxlT3B0aW9uLmNvbG9yLnVwTGluZTogJyNmMDQ4NjQnO1xyXG5cdGNhbmRsZU9wdGlvbi5jb2xvci51cEZpbGw9Y2FuZGxlT3B0aW9uLmNvbG9yLnVwRmlsbD8gY2FuZGxlT3B0aW9uLmNvbG9yLnVwRmlsbDogJyNmMDQ4NjQnO1xyXG5cdGNhbmRsZU9wdGlvbi5jb2xvci5kb3duTGluZT1jYW5kbGVPcHRpb24uY29sb3IuZG93bkxpbmU/IGNhbmRsZU9wdGlvbi5jb2xvci5kb3duTGluZTogJyMyZmMyNWInO1xyXG5cdGNhbmRsZU9wdGlvbi5jb2xvci5kb3duRmlsbD1jYW5kbGVPcHRpb24uY29sb3IuZG93bkZpbGw/IGNhbmRsZU9wdGlvbi5jb2xvci5kb3duRmlsbDogJyMyZmMyNWInO1xyXG5cdGNhbmRsZU9wdGlvbi5hdmVyYWdlLnNob3cgPSBjYW5kbGVPcHRpb24uYXZlcmFnZS5zaG93PT09dHJ1ZT8gdHJ1ZSA6IGZhbHNlO1xyXG5cdGNhbmRsZU9wdGlvbi5hdmVyYWdlLm5hbWUgPSBjYW5kbGVPcHRpb24uYXZlcmFnZS5uYW1lPyBjYW5kbGVPcHRpb24uYXZlcmFnZS5uYW1lIDogW107XHJcblx0Y2FuZGxlT3B0aW9uLmF2ZXJhZ2UuZGF5ID0gY2FuZGxlT3B0aW9uLmF2ZXJhZ2UuZGF5PyBjYW5kbGVPcHRpb24uYXZlcmFnZS5kYXkgOiBbXTtcclxuXHRjYW5kbGVPcHRpb24uYXZlcmFnZS5jb2xvciA9IGNhbmRsZU9wdGlvbi5hdmVyYWdlLmNvbG9yPyBjYW5kbGVPcHRpb24uYXZlcmFnZS5jb2xvciA6IFsnIzE4OTBmZicsICcjMmZjMjViJywgJyNmYWNjMTQnLCAnI2YwNDg2NCcsICcjODU0M2UwJywgJyM5MGVkN2QnXTtcclxuXHRvcHRzLmV4dHJhLmNhbmRsZT1jYW5kbGVPcHRpb247XHJcblx0XHJcbiAgICB2YXIgX2NhbFlBeGlzRGF0YTUgPSBjYWxZQXhpc0RhdGEoc2VyaWVzLCBvcHRzLCBjb25maWcpLFxyXG4gICAgICAgIHJhbmdlcyA9IF9jYWxZQXhpc0RhdGE1LnJhbmdlcztcclxuXHRcdFxyXG4gICAgdmFyIF9nZXRYQXhpc1BvaW50czUgPSBnZXRYQXhpc1BvaW50cyhvcHRzLmNhdGVnb3JpZXMsIG9wdHMsIGNvbmZpZyksXHJcbiAgICAgICAgeEF4aXNQb2ludHMgPSBfZ2V0WEF4aXNQb2ludHM1LnhBeGlzUG9pbnRzLFxyXG4gICAgICAgIGVhY2hTcGFjaW5nID0gX2dldFhBeGlzUG9pbnRzNS5lYWNoU3BhY2luZztcclxuXHJcbiAgICB2YXIgbWluUmFuZ2UgPSByYW5nZXMucG9wKCk7XHJcbiAgICB2YXIgbWF4UmFuZ2UgPSByYW5nZXMuc2hpZnQoKTtcclxuICAgIHZhciBjYWxQb2ludHMgPSBbXTtcclxuXHJcbiAgICBjb250ZXh0LnNhdmUoKTtcclxuICAgIGlmIChvcHRzLl9zY3JvbGxEaXN0YW5jZV8gJiYgb3B0cy5fc2Nyb2xsRGlzdGFuY2VfICE9PSAwICYmIG9wdHMuZW5hYmxlU2Nyb2xsID09PSB0cnVlKSB7XHJcbiAgICAgICAgY29udGV4dC50cmFuc2xhdGUob3B0cy5fc2Nyb2xsRGlzdGFuY2VfLCAwKTtcclxuICAgIH1cclxuXHQvL+eUu+Wdh+e6v1xyXG5cdGlmKGNhbmRsZU9wdGlvbi5hdmVyYWdlLnNob3cpe1xyXG5cdFx0c2VyaWVzTUEuZm9yRWFjaChmdW5jdGlvbiAoZWFjaFNlcmllcywgc2VyaWVzSW5kZXgpIHtcclxuXHRcdCAgICB2YXIgZGF0YSA9IGVhY2hTZXJpZXMuZGF0YTtcclxuXHRcdCAgICB2YXIgcG9pbnRzID0gZ2V0RGF0YVBvaW50cyhkYXRhLCBtaW5SYW5nZSwgbWF4UmFuZ2UsIHhBeGlzUG9pbnRzLCBlYWNoU3BhY2luZywgb3B0cywgY29uZmlnLCBwcm9jZXNzKTtcclxuXHRcdCAgICAvL2NhbFBvaW50cy5wdXNoKHBvaW50cyk7XHJcblx0XHQgICAgdmFyIHNwbGl0UG9pbnRMaXN0ID0gc3BsaXRQb2ludHMocG9pbnRzKTtcclxuXHRcdFxyXG5cdFx0ICAgIHNwbGl0UG9pbnRMaXN0LmZvckVhY2goZnVuY3Rpb24gKHBvaW50cywgaW5kZXgpIHtcclxuXHRcdCAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuXHRcdCAgICAgICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShlYWNoU2VyaWVzLmNvbG9yKTtcclxuXHRcdCAgICAgICAgY29udGV4dC5zZXRMaW5lV2lkdGgoMSk7XHJcblx0XHQgICAgICAgIGlmIChwb2ludHMubGVuZ3RoID09PSAxKSB7XHJcblx0XHQgICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnkpO1xyXG5cdFx0ICAgICAgICAgICAgY29udGV4dC5hcmMocG9pbnRzWzBdLngsIHBvaW50c1swXS55LCAxLCAwLCAyICogTWF0aC5QSSk7XHJcblx0XHQgICAgICAgIH0gZWxzZSB7XHJcblx0XHQgICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnkpO1xyXG5cdFx0XHRcdFx0cG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XHJcblx0XHRcdFx0XHRcdGlmIChpbmRleCA+IDApIHtcclxuXHRcdFx0XHRcdFx0XHR2YXIgY3RybFBvaW50ID0gY3JlYXRlQ3VydmVDb250cm9sUG9pbnRzKHBvaW50cywgaW5kZXggLSAxKTtcclxuXHRcdFx0XHRcdFx0XHRjb250ZXh0LmJlemllckN1cnZlVG8oY3RybFBvaW50LmN0ckEueCwgY3RybFBvaW50LmN0ckEueSwgY3RybFBvaW50LmN0ckIueCwgY3RybFBvaW50LmN0ckIueSwgaXRlbS54LCBpdGVtLnkpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdCAgICAgICAgICAgIGNvbnRleHQubW92ZVRvKHBvaW50c1swXS54LCBwb2ludHNbMF0ueSk7XHJcblx0XHQgICAgICAgIH1cclxuXHRcdCAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuXHRcdCAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuXHRcdCAgICB9KTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHQvL+eUu0vnur9cclxuICAgIHNlcmllcy5mb3JFYWNoKGZ1bmN0aW9uIChlYWNoU2VyaWVzLCBzZXJpZXNJbmRleCkge1xyXG4gICAgICAgIHZhciBkYXRhID0gZWFjaFNlcmllcy5kYXRhO1xyXG4gICAgICAgIHZhciBwb2ludHMgPSBnZXRDYW5kbGVEYXRhUG9pbnRzKGRhdGEsIG1pblJhbmdlLCBtYXhSYW5nZSwgeEF4aXNQb2ludHMsIGVhY2hTcGFjaW5nLCBvcHRzLCBjb25maWcsIHByb2Nlc3MpO1xyXG4gICAgICAgIGNhbFBvaW50cy5wdXNoKHBvaW50cyk7XHJcbiAgICAgICAgdmFyIHNwbGl0UG9pbnRMaXN0ID0gc3BsaXRQb2ludHMocG9pbnRzKTtcclxuXHRcdHNwbGl0UG9pbnRMaXN0PXNwbGl0UG9pbnRMaXN0WzBdO1xyXG5cdFx0XHJcbiAgICAgICAgc3BsaXRQb2ludExpc3QuZm9yRWFjaChmdW5jdGlvbiAocG9pbnRzLCBpbmRleCkge1xyXG5cdFx0XHRjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHQvL+WmguaenOS4iua2qFxyXG5cdFx0XHRpZihkYXRhW2luZGV4XVsxXS1kYXRhW2luZGV4XVswXT4wKXtcclxuXHRcdFx0XHRjb250ZXh0LnNldFN0cm9rZVN0eWxlKGNhbmRsZU9wdGlvbi5jb2xvci51cExpbmUpO1xyXG5cdFx0XHRcdGNvbnRleHQuc2V0RmlsbFN0eWxlKGNhbmRsZU9wdGlvbi5jb2xvci51cEZpbGwpO1xyXG5cdFx0XHRcdGNvbnRleHQuc2V0TGluZVdpZHRoKDEqb3B0cy5waXhlbFJhdGlvKTtcclxuXHRcdFx0XHRjb250ZXh0Lm1vdmVUbyhwb2ludHNbM10ueCwgcG9pbnRzWzNdLnkpOy8v6aG254K5XHJcblx0XHRcdFx0Y29udGV4dC5saW5lVG8ocG9pbnRzWzFdLngsIHBvaW50c1sxXS55KTsvL+aUtuebmOS4remXtOeCuVxyXG5cdFx0XHRcdGNvbnRleHQubGluZVRvKHBvaW50c1sxXS54LWVhY2hTcGFjaW5nLzQsIHBvaW50c1sxXS55KTsvL+aUtuebmOW3puS+p+eCuVxyXG5cdFx0XHRcdGNvbnRleHQubGluZVRvKHBvaW50c1swXS54LWVhY2hTcGFjaW5nLzQsIHBvaW50c1swXS55KTsvL+W8gOebmOW3puS+p+eCuVxyXG5cdFx0XHRcdGNvbnRleHQubGluZVRvKHBvaW50c1swXS54LCBwb2ludHNbMF0ueSk7Ly/lvIDnm5jkuK3pl7TngrlcclxuXHRcdFx0XHRjb250ZXh0LmxpbmVUbyhwb2ludHNbMl0ueCwgcG9pbnRzWzJdLnkpOy8v5bqV54K5XHJcblx0XHRcdFx0Y29udGV4dC5saW5lVG8ocG9pbnRzWzBdLngsIHBvaW50c1swXS55KTsvL+W8gOebmOS4remXtOeCuVxyXG5cdFx0XHRcdGNvbnRleHQubGluZVRvKHBvaW50c1swXS54K2VhY2hTcGFjaW5nLzQsIHBvaW50c1swXS55KTsvL+W8gOebmOWPs+S+p+eCuVxyXG5cdFx0XHRcdGNvbnRleHQubGluZVRvKHBvaW50c1sxXS54K2VhY2hTcGFjaW5nLzQsIHBvaW50c1sxXS55KTsvL+aUtuebmOWPs+S+p+eCuVxyXG5cdFx0XHRcdGNvbnRleHQubGluZVRvKHBvaW50c1sxXS54LCBwb2ludHNbMV0ueSk7Ly/mlLbnm5jkuK3pl7TngrlcclxuXHRcdFx0XHRjb250ZXh0Lm1vdmVUbyhwb2ludHNbM10ueCwgcG9pbnRzWzNdLnkpOy8v6aG254K5XHJcblx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoY2FuZGxlT3B0aW9uLmNvbG9yLmRvd25MaW5lKTtcclxuXHRcdFx0XHRjb250ZXh0LnNldEZpbGxTdHlsZShjYW5kbGVPcHRpb24uY29sb3IuZG93bkZpbGwpO1xyXG5cdFx0XHRcdGNvbnRleHQuc2V0TGluZVdpZHRoKDEqb3B0cy5waXhlbFJhdGlvKTtcclxuXHRcdFx0XHRjb250ZXh0Lm1vdmVUbyhwb2ludHNbM10ueCwgcG9pbnRzWzNdLnkpOy8v6aG254K5XHJcblx0XHRcdFx0Y29udGV4dC5saW5lVG8ocG9pbnRzWzBdLngsIHBvaW50c1swXS55KTsvL+W8gOebmOS4remXtOeCuVxyXG5cdFx0XHRcdGNvbnRleHQubGluZVRvKHBvaW50c1swXS54LWVhY2hTcGFjaW5nLzQsIHBvaW50c1swXS55KTsvL+W8gOebmOW3puS+p+eCuVxyXG5cdFx0XHRcdGNvbnRleHQubGluZVRvKHBvaW50c1sxXS54LWVhY2hTcGFjaW5nLzQsIHBvaW50c1sxXS55KTsvL+aUtuebmOW3puS+p+eCuVxyXG5cdFx0XHRcdGNvbnRleHQubGluZVRvKHBvaW50c1sxXS54LCBwb2ludHNbMV0ueSk7Ly/mlLbnm5jkuK3pl7TngrlcclxuXHRcdFx0XHRjb250ZXh0LmxpbmVUbyhwb2ludHNbMl0ueCwgcG9pbnRzWzJdLnkpOy8v5bqV54K5XHJcblx0XHRcdFx0Y29udGV4dC5saW5lVG8ocG9pbnRzWzFdLngsIHBvaW50c1sxXS55KTsvL+aUtuebmOS4remXtOeCuVxyXG5cdFx0XHRcdGNvbnRleHQubGluZVRvKHBvaW50c1sxXS54K2VhY2hTcGFjaW5nLzQsIHBvaW50c1sxXS55KTsvL+aUtuebmOWPs+S+p+eCuVxyXG5cdFx0XHRcdGNvbnRleHQubGluZVRvKHBvaW50c1swXS54K2VhY2hTcGFjaW5nLzQsIHBvaW50c1swXS55KTsvL+W8gOebmOWPs+S+p+eCuVxyXG5cdFx0XHRcdGNvbnRleHQubGluZVRvKHBvaW50c1swXS54LCBwb2ludHNbMF0ueSk7Ly/lvIDnm5jkuK3pl7TngrlcclxuXHRcdFx0XHRjb250ZXh0Lm1vdmVUbyhwb2ludHNbM10ueCwgcG9pbnRzWzNdLnkpOy8v6aG254K5XHJcblx0XHRcdH1cclxuXHRcdFx0Y29udGV4dC5jbG9zZVBhdGgoKTtcclxuXHRcdFx0Y29udGV4dC5maWxsKCk7XHJcblx0XHRcdGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHRcclxuXHRcclxuICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG5cdFxyXG5cdFxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgeEF4aXNQb2ludHM6IHhBeGlzUG9pbnRzLFxyXG4gICAgICAgIGNhbFBvaW50czogY2FsUG9pbnRzLFxyXG4gICAgICAgIGVhY2hTcGFjaW5nOiBlYWNoU3BhY2luZ1xyXG4gICAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd0FyZWFEYXRhUG9pbnRzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KSB7XHJcbiAgICB2YXIgcHJvY2VzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogMTtcclxuXHR2YXIgYXJlYU9wdGlvbiA9IG9wdHMuZXh0cmEuYXJlYSB8fCB7dHlwZTonc3RyYWlnaHQnLG9wYWNpdHk6MC41LGFkZExpbmU6ZmFsc2Usd2lkdGg6Mn07XHJcblx0YXJlYU9wdGlvbi50eXBlID0gYXJlYU9wdGlvbi50eXBlPyBhcmVhT3B0aW9uLnR5cGU6ICdzdHJhaWdodCc7XHJcblx0YXJlYU9wdGlvbi5vcGFjaXR5ID0gYXJlYU9wdGlvbi5vcGFjaXR5PyBhcmVhT3B0aW9uLm9wYWNpdHk6IDAuMjtcclxuXHRhcmVhT3B0aW9uLmFkZExpbmUgPSBhcmVhT3B0aW9uLmFkZExpbmU9PXRydWU/IHRydWU6IGZhbHNlO1xyXG5cdGFyZWFPcHRpb24ud2lkdGggPSBhcmVhT3B0aW9uLndpZHRoPyBhcmVhT3B0aW9uLndpZHRoOiAyO1xyXG4gICAgdmFyIF9jYWxZQXhpc0RhdGEyID0gY2FsWUF4aXNEYXRhKHNlcmllcywgb3B0cywgY29uZmlnKSxcclxuICAgICAgICByYW5nZXMgPSBfY2FsWUF4aXNEYXRhMi5yYW5nZXM7XHJcblxyXG4gICAgdmFyIF9nZXRYQXhpc1BvaW50czIgPSBnZXRYQXhpc1BvaW50cyhvcHRzLmNhdGVnb3JpZXMsIG9wdHMsIGNvbmZpZyksXHJcbiAgICAgICAgeEF4aXNQb2ludHMgPSBfZ2V0WEF4aXNQb2ludHMyLnhBeGlzUG9pbnRzLFxyXG4gICAgICAgIGVhY2hTcGFjaW5nID0gX2dldFhBeGlzUG9pbnRzMi5lYWNoU3BhY2luZztcclxuXHJcbiAgICB2YXIgbWluUmFuZ2UgPSByYW5nZXMucG9wKCk7XHJcbiAgICB2YXIgbWF4UmFuZ2UgPSByYW5nZXMuc2hpZnQoKTtcclxuICAgIHZhciBlbmRZID0gb3B0cy5oZWlnaHQgLSBjb25maWcucGFkZGluZyAtIGNvbmZpZy54QXhpc0hlaWdodCAtIGNvbmZpZy5sZWdlbmRIZWlnaHQ7XHJcbiAgICB2YXIgY2FsUG9pbnRzID0gW107XHJcblxyXG4gICAgY29udGV4dC5zYXZlKCk7XHJcbiAgICBpZiAob3B0cy5fc2Nyb2xsRGlzdGFuY2VfICYmIG9wdHMuX3Njcm9sbERpc3RhbmNlXyAhPT0gMCAmJiBvcHRzLmVuYWJsZVNjcm9sbCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIGNvbnRleHQudHJhbnNsYXRlKG9wdHMuX3Njcm9sbERpc3RhbmNlXywgMCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG9wdHMudG9vbHRpcCAmJiBvcHRzLnRvb2x0aXAudGV4dExpc3QgJiYgb3B0cy50b29sdGlwLnRleHRMaXN0Lmxlbmd0aCAmJiBwcm9jZXNzID09PSAxKSB7XHJcbiAgICAgICAgZHJhd1Rvb2xUaXBTcGxpdExpbmUob3B0cy50b29sdGlwLm9mZnNldC54LCBvcHRzLCBjb25maWcsIGNvbnRleHQpO1xyXG4gICAgfVxyXG5cdFxyXG5cdFxyXG4gICAgc2VyaWVzLmZvckVhY2goZnVuY3Rpb24gKGVhY2hTZXJpZXMsIHNlcmllc0luZGV4KSB7XHJcbiAgICAgICAgdmFyIGRhdGEgPSBlYWNoU2VyaWVzLmRhdGE7XHJcbiAgICAgICAgdmFyIHBvaW50cyA9IGdldERhdGFQb2ludHMoZGF0YSwgbWluUmFuZ2UsIG1heFJhbmdlLCB4QXhpc1BvaW50cywgZWFjaFNwYWNpbmcsIG9wdHMsIGNvbmZpZywgcHJvY2Vzcyk7XHJcbiAgICAgICAgY2FsUG9pbnRzLnB1c2gocG9pbnRzKTtcclxuXHJcbiAgICAgICAgdmFyIHNwbGl0UG9pbnRMaXN0ID0gc3BsaXRQb2ludHMocG9pbnRzKTtcclxuXHJcbiAgICAgICAgc3BsaXRQb2ludExpc3QuZm9yRWFjaChmdW5jdGlvbiAocG9pbnRzKSB7XHJcbiAgICAgICAgICAgIC8vIOe7mOWItuWMuuWfn+aVsOaNrlxyXG4gICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKGhleFRvUmdiKGVhY2hTZXJpZXMuY29sb3IsIGFyZWFPcHRpb24ub3BhY2l0eSkpO1xyXG4gICAgICAgICAgICBjb250ZXh0LnNldEZpbGxTdHlsZShoZXhUb1JnYihlYWNoU2VyaWVzLmNvbG9yLCBhcmVhT3B0aW9uLm9wYWNpdHkpKTtcclxuICAgICAgICAgICAgY29udGV4dC5zZXRMaW5lV2lkdGgoYXJlYU9wdGlvbi53aWR0aCpvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgICAgICAgICBpZiAocG9pbnRzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgIHZhciBmaXJzdFBvaW50ID0gcG9pbnRzWzBdO1xyXG4gICAgICAgICAgICAgICAgdmFyIGxhc3RQb2ludCA9IHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV07XHJcblxyXG4gICAgICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8oZmlyc3RQb2ludC54LCBmaXJzdFBvaW50LnkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGFyZWFPcHRpb24udHlwZSA9PT0gJ2N1cnZlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3RybFBvaW50ID0gY3JlYXRlQ3VydmVDb250cm9sUG9pbnRzKHBvaW50cywgaW5kZXggLSAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuYmV6aWVyQ3VydmVUbyhjdHJsUG9pbnQuY3RyQS54LCBjdHJsUG9pbnQuY3RyQS55LCBjdHJsUG9pbnQuY3RyQi54LCBjdHJsUG9pbnQuY3RyQi55LCBpdGVtLngsIGl0ZW0ueSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKGl0ZW0ueCwgaXRlbS55KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKGxhc3RQb2ludC54LCBlbmRZKTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKGZpcnN0UG9pbnQueCwgZW5kWSk7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyhmaXJzdFBvaW50LngsIGZpcnN0UG9pbnQueSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IHBvaW50c1swXTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQubW92ZVRvKGl0ZW0ueCAtIGVhY2hTcGFjaW5nIC8gMiwgaXRlbS55KTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKGl0ZW0ueCArIGVhY2hTcGFjaW5nIC8gMiwgaXRlbS55KTtcclxuICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKGl0ZW0ueCArIGVhY2hTcGFjaW5nIC8gMiwgZW5kWSk7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyhpdGVtLnggLSBlYWNoU3BhY2luZyAvIDIsIGVuZFkpO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8oaXRlbS54IC0gZWFjaFNwYWNpbmcgLyAyLCBpdGVtLnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbCgpO1xyXG5cdFx0XHRcclxuXHRcdFx0XHJcblx0XHRcdC8v55S76L+e57q/XHJcblx0XHRcdGlmKGFyZWFPcHRpb24uYWRkTGluZSl7XHJcblx0XHRcdFx0Y29udGV4dC5iZWdpblBhdGgoKTtcclxuXHRcdFx0XHRjb250ZXh0LnNldFN0cm9rZVN0eWxlKGVhY2hTZXJpZXMuY29sb3IpO1xyXG5cdFx0XHRcdGNvbnRleHQuc2V0TGluZVdpZHRoKGFyZWFPcHRpb24ud2lkdGggKiBvcHRzLnBpeGVsUmF0aW8pO1xyXG5cdFx0XHRcdGlmIChwb2ludHMubGVuZ3RoID09PSAxKSB7XHJcblx0XHRcdFx0XHRjb250ZXh0Lm1vdmVUbyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnkpO1xyXG5cdFx0XHRcdFx0Y29udGV4dC5hcmMocG9pbnRzWzBdLngsIHBvaW50c1swXS55LCAxLCAwLCAyICogTWF0aC5QSSk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdGNvbnRleHQubW92ZVRvKHBvaW50c1swXS54LCBwb2ludHNbMF0ueSk7XHJcblx0XHRcdFx0XHRpZiAoYXJlYU9wdGlvbi50eXBlID09PSAnY3VydmUnKSB7XHJcblx0XHRcdFx0XHRcdHBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xyXG5cdFx0XHRcdFx0XHRcdGlmIChpbmRleCA+IDApIHtcclxuXHRcdFx0XHRcdFx0XHRcdHZhciBjdHJsUG9pbnQgPSBjcmVhdGVDdXJ2ZUNvbnRyb2xQb2ludHMocG9pbnRzLCBpbmRleCAtIDEpO1xyXG5cdFx0XHRcdFx0XHRcdFx0Y29udGV4dC5iZXppZXJDdXJ2ZVRvKGN0cmxQb2ludC5jdHJBLngsIGN0cmxQb2ludC5jdHJBLnksIGN0cmxQb2ludC5jdHJCLngsIGN0cmxQb2ludC5jdHJCLnksIGl0ZW0ueCwgaXRlbS55KTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0cG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKGluZGV4ID4gMCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0Y29udGV4dC5saW5lVG8oaXRlbS54LCBpdGVtLnkpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRjb250ZXh0Lm1vdmVUbyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG5cdFx0XHRcdGNvbnRleHQuc3Ryb2tlKCk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1x0XHJcblx0XHRcclxuXHRcdC8v55S754K5XHJcbiAgICAgICAgaWYgKG9wdHMuZGF0YVBvaW50U2hhcGUgIT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHZhciBzaGFwZSA9IGNvbmZpZy5kYXRhUG9pbnRTaGFwZVtzZXJpZXNJbmRleCAlIGNvbmZpZy5kYXRhUG9pbnRTaGFwZS5sZW5ndGhdO1xyXG4gICAgICAgICAgICBkcmF3UG9pbnRTaGFwZShwb2ludHMsIGVhY2hTZXJpZXMuY29sb3IsIHNoYXBlLCBjb250ZXh0LG9wdHMpO1xyXG4gICAgICAgIH1cclxuXHRcdFxyXG4gICAgfSk7XHJcbiAgICBpZiAob3B0cy5kYXRhTGFiZWwgIT09IGZhbHNlICYmIHByb2Nlc3MgPT09IDEpIHtcclxuICAgICAgICBzZXJpZXMuZm9yRWFjaChmdW5jdGlvbiAoZWFjaFNlcmllcywgc2VyaWVzSW5kZXgpIHtcclxuICAgICAgICAgICAgdmFyIGRhdGEgPSBlYWNoU2VyaWVzLmRhdGE7XHJcbiAgICAgICAgICAgIHZhciBwb2ludHMgPSBnZXREYXRhUG9pbnRzKGRhdGEsIG1pblJhbmdlLCBtYXhSYW5nZSwgeEF4aXNQb2ludHMsIGVhY2hTcGFjaW5nLCBvcHRzLCBjb25maWcsIHByb2Nlc3MpO1xyXG4gICAgICAgICAgICBkcmF3UG9pbnRUZXh0KHBvaW50cywgZWFjaFNlcmllcywgY29uZmlnLCBjb250ZXh0KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjb250ZXh0LnJlc3RvcmUoKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHhBeGlzUG9pbnRzOiB4QXhpc1BvaW50cyxcclxuICAgICAgICBjYWxQb2ludHM6IGNhbFBvaW50cyxcclxuICAgICAgICBlYWNoU3BhY2luZzogZWFjaFNwYWNpbmdcclxuICAgIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdMaW5lRGF0YVBvaW50cyhzZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCkge1xyXG4gICAgdmFyIHByb2Nlc3MgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IDE7XHJcblx0dmFyIGxpbmVPcHRpb24gPSBvcHRzLmV4dHJhLmxpbmUgfHwge3R5cGU6J3N0cmFpZ2h0Jyx3aWR0aDoyfTtcclxuXHRsaW5lT3B0aW9uLnR5cGUgPSBsaW5lT3B0aW9uLnR5cGU/IGxpbmVPcHRpb24udHlwZTogJ3N0cmFpZ2h0JztcclxuXHRsaW5lT3B0aW9uLndpZHRoID0gbGluZU9wdGlvbi53aWR0aD8gbGluZU9wdGlvbi53aWR0aDogMjtcclxuICAgIHZhciBfY2FsWUF4aXNEYXRhMyA9IGNhbFlBeGlzRGF0YShzZXJpZXMsIG9wdHMsIGNvbmZpZyksXHJcbiAgICAgICAgcmFuZ2VzID0gX2NhbFlBeGlzRGF0YTMucmFuZ2VzO1xyXG5cclxuICAgIHZhciBfZ2V0WEF4aXNQb2ludHMzID0gZ2V0WEF4aXNQb2ludHMob3B0cy5jYXRlZ29yaWVzLCBvcHRzLCBjb25maWcpLFxyXG4gICAgICAgIHhBeGlzUG9pbnRzID0gX2dldFhBeGlzUG9pbnRzMy54QXhpc1BvaW50cyxcclxuICAgICAgICBlYWNoU3BhY2luZyA9IF9nZXRYQXhpc1BvaW50czMuZWFjaFNwYWNpbmc7XHJcblxyXG4gICAgdmFyIG1pblJhbmdlID0gcmFuZ2VzLnBvcCgpO1xyXG4gICAgdmFyIG1heFJhbmdlID0gcmFuZ2VzLnNoaWZ0KCk7XHJcbiAgICB2YXIgY2FsUG9pbnRzID0gW107XHJcblxyXG4gICAgY29udGV4dC5zYXZlKCk7XHJcbiAgICBpZiAob3B0cy5fc2Nyb2xsRGlzdGFuY2VfICYmIG9wdHMuX3Njcm9sbERpc3RhbmNlXyAhPT0gMCAmJiBvcHRzLmVuYWJsZVNjcm9sbCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIGNvbnRleHQudHJhbnNsYXRlKG9wdHMuX3Njcm9sbERpc3RhbmNlXywgMCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG9wdHMudG9vbHRpcCAmJiBvcHRzLnRvb2x0aXAudGV4dExpc3QgJiYgb3B0cy50b29sdGlwLnRleHRMaXN0Lmxlbmd0aCAmJiBwcm9jZXNzID09PSAxKSB7XHJcbiAgICAgICAgZHJhd1Rvb2xUaXBTcGxpdExpbmUob3B0cy50b29sdGlwLm9mZnNldC54LCBvcHRzLCBjb25maWcsIGNvbnRleHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHNlcmllcy5mb3JFYWNoKGZ1bmN0aW9uIChlYWNoU2VyaWVzLCBzZXJpZXNJbmRleCkge1xyXG4gICAgICAgIHZhciBkYXRhID0gZWFjaFNlcmllcy5kYXRhO1xyXG4gICAgICAgIHZhciBwb2ludHMgPSBnZXREYXRhUG9pbnRzKGRhdGEsIG1pblJhbmdlLCBtYXhSYW5nZSwgeEF4aXNQb2ludHMsIGVhY2hTcGFjaW5nLCBvcHRzLCBjb25maWcsIHByb2Nlc3MpO1xyXG4gICAgICAgIGNhbFBvaW50cy5wdXNoKHBvaW50cyk7XHJcbiAgICAgICAgdmFyIHNwbGl0UG9pbnRMaXN0ID0gc3BsaXRQb2ludHMocG9pbnRzKTtcclxuXHJcbiAgICAgICAgc3BsaXRQb2ludExpc3QuZm9yRWFjaChmdW5jdGlvbiAocG9pbnRzLCBpbmRleCkge1xyXG4gICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKGVhY2hTZXJpZXMuY29sb3IpO1xyXG4gICAgICAgICAgICBjb250ZXh0LnNldExpbmVXaWR0aChsaW5lT3B0aW9uLndpZHRoKm9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICAgICAgICAgIGlmIChwb2ludHMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnkpO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5hcmMocG9pbnRzWzBdLngsIHBvaW50c1swXS55LCAxLCAwLCAyICogTWF0aC5QSSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGxpbmVPcHRpb24udHlwZSA9PT0gJ2N1cnZlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3RybFBvaW50ID0gY3JlYXRlQ3VydmVDb250cm9sUG9pbnRzKHBvaW50cywgaW5kZXggLSAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuYmV6aWVyQ3VydmVUbyhjdHJsUG9pbnQuY3RyQS54LCBjdHJsUG9pbnQuY3RyQS55LCBjdHJsUG9pbnQuY3RyQi54LCBjdHJsUG9pbnQuY3RyQi55LCBpdGVtLngsIGl0ZW0ueSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQubGluZVRvKGl0ZW0ueCwgaXRlbS55KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8ocG9pbnRzWzBdLngsIHBvaW50c1swXS55KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAob3B0cy5kYXRhUG9pbnRTaGFwZSAhPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgdmFyIHNoYXBlID0gY29uZmlnLmRhdGFQb2ludFNoYXBlW3Nlcmllc0luZGV4ICUgY29uZmlnLmRhdGFQb2ludFNoYXBlLmxlbmd0aF07XHJcbiAgICAgICAgICAgIGRyYXdQb2ludFNoYXBlKHBvaW50cywgZWFjaFNlcmllcy5jb2xvciwgc2hhcGUsIGNvbnRleHQsb3B0cyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBpZiAob3B0cy5kYXRhTGFiZWwgIT09IGZhbHNlICYmIHByb2Nlc3MgPT09IDEpIHtcclxuICAgICAgICBzZXJpZXMuZm9yRWFjaChmdW5jdGlvbiAoZWFjaFNlcmllcywgc2VyaWVzSW5kZXgpIHtcclxuICAgICAgICAgICAgdmFyIGRhdGEgPSBlYWNoU2VyaWVzLmRhdGE7XHJcbiAgICAgICAgICAgIHZhciBwb2ludHMgPSBnZXREYXRhUG9pbnRzKGRhdGEsIG1pblJhbmdlLCBtYXhSYW5nZSwgeEF4aXNQb2ludHMsIGVhY2hTcGFjaW5nLCBvcHRzLCBjb25maWcsIHByb2Nlc3MpO1xyXG4gICAgICAgICAgICBkcmF3UG9pbnRUZXh0KHBvaW50cywgZWFjaFNlcmllcywgY29uZmlnLCBjb250ZXh0KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjb250ZXh0LnJlc3RvcmUoKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHhBeGlzUG9pbnRzOiB4QXhpc1BvaW50cyxcclxuICAgICAgICBjYWxQb2ludHM6IGNhbFBvaW50cyxcclxuICAgICAgICBlYWNoU3BhY2luZzogZWFjaFNwYWNpbmdcclxuICAgIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdNaXhEYXRhUG9pbnRzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KSB7XHJcbiAgICB2YXIgcHJvY2VzcyA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogMTtcclxuXHJcbiAgICB2YXIgX2NhbFlBeGlzRGF0YTYgPSBjYWxZQXhpc0RhdGEoc2VyaWVzLCBvcHRzLCBjb25maWcpLFxyXG4gICAgICAgIHJhbmdlcyA9IF9jYWxZQXhpc0RhdGE2LnJhbmdlcztcclxuXHJcbiAgICB2YXIgX2dldFhBeGlzUG9pbnRzNiA9IGdldFhBeGlzUG9pbnRzKG9wdHMuY2F0ZWdvcmllcywgb3B0cywgY29uZmlnKSxcclxuICAgICAgICB4QXhpc1BvaW50cyA9IF9nZXRYQXhpc1BvaW50czYueEF4aXNQb2ludHMsXHJcbiAgICAgICAgZWFjaFNwYWNpbmcgPSBfZ2V0WEF4aXNQb2ludHM2LmVhY2hTcGFjaW5nO1xyXG5cclxuICAgIHZhciBtaW5SYW5nZSA9IHJhbmdlcy5wb3AoKTtcclxuICAgIHZhciBtYXhSYW5nZSA9IHJhbmdlcy5zaGlmdCgpO1xyXG5cdHZhciBlbmRZID0gb3B0cy5oZWlnaHQgLSBjb25maWcucGFkZGluZyAtIGNvbmZpZy54QXhpc0hlaWdodCAtIGNvbmZpZy5sZWdlbmRIZWlnaHQ7XHJcbiAgICB2YXIgY2FsUG9pbnRzID0gW107XHJcblx0XHJcblx0dmFyIGNvbHVtbkluZGV4PTA7XHJcblx0dmFyIGNvbHVtbkxlbmd0aD0wO1xyXG5cdHNlcmllcy5mb3JFYWNoKGZ1bmN0aW9uIChlYWNoU2VyaWVzLCBzZXJpZXNJbmRleCkge1xyXG5cdFx0aWYoZWFjaFNlcmllcy50eXBlPT0nY29sdW1uJyl7XHJcblx0XHRcdGNvbHVtbkxlbmd0aCs9MTtcclxuXHRcdH1cclxuXHR9KTtcclxuICAgIGNvbnRleHQuc2F2ZSgpO1xyXG4gICAgaWYgKG9wdHMuX3Njcm9sbERpc3RhbmNlXyAmJiBvcHRzLl9zY3JvbGxEaXN0YW5jZV8gIT09IDAgJiYgb3B0cy5lbmFibGVTY3JvbGwgPT09IHRydWUpIHtcclxuICAgICAgICBjb250ZXh0LnRyYW5zbGF0ZShvcHRzLl9zY3JvbGxEaXN0YW5jZV8sIDApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChvcHRzLnRvb2x0aXAgJiYgb3B0cy50b29sdGlwLnRleHRMaXN0ICYmIG9wdHMudG9vbHRpcC50ZXh0TGlzdC5sZW5ndGggJiYgcHJvY2VzcyA9PT0gMSkge1xyXG4gICAgICAgIGRyYXdUb29sVGlwU3BsaXRMaW5lKG9wdHMudG9vbHRpcC5vZmZzZXQueCwgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcclxuICAgIH1cclxuXHJcbiAgICBzZXJpZXMuZm9yRWFjaChmdW5jdGlvbiAoZWFjaFNlcmllcywgc2VyaWVzSW5kZXgpIHtcclxuICAgICAgICB2YXIgZGF0YSA9IGVhY2hTZXJpZXMuZGF0YTtcclxuICAgICAgICB2YXIgcG9pbnRzID0gZ2V0RGF0YVBvaW50cyhkYXRhLCBtaW5SYW5nZSwgbWF4UmFuZ2UsIHhBeGlzUG9pbnRzLCBlYWNoU3BhY2luZywgb3B0cywgY29uZmlnLCBwcm9jZXNzKTtcclxuICAgICAgICBjYWxQb2ludHMucHVzaChwb2ludHMpO1xyXG4gICAgICAgIFxyXG5cdFx0Ly8g57uY5Yi25p+x54q25pWw5o2u5Zu+XHJcblx0XHRpZihlYWNoU2VyaWVzLnR5cGU9PSdjb2x1bW4nKXtcclxuXHRcdFx0cG9pbnRzID0gZml4Q29sdW1lRGF0YShwb2ludHMsIGVhY2hTcGFjaW5nLCBjb2x1bW5MZW5ndGggLCBjb2x1bW5JbmRleCwgY29uZmlnLCBvcHRzKTtcclxuXHRcdFx0cG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XHJcblx0XHRcdCAgICBpZiAoaXRlbSAhPT0gbnVsbCkge1xyXG5cdFx0XHRcdFx0Y29udGV4dC5iZWdpblBhdGgoKTtcclxuXHRcdFx0XHRcdGNvbnRleHQuc2V0RmlsbFN0eWxlKGl0ZW0uY29sb3IgfHwgZWFjaFNlcmllcy5jb2xvcik7XHJcblx0XHRcdCAgICAgICAgdmFyIHN0YXJ0WCA9IGl0ZW0ueCAtIGl0ZW0ud2lkdGggLyAyICsgMTtcclxuXHRcdFx0ICAgICAgICB2YXIgaGVpZ2h0ID0gb3B0cy5oZWlnaHQgLSBpdGVtLnkgLSBjb25maWcucGFkZGluZyAtIGNvbmZpZy54QXhpc0hlaWdodCAtIGNvbmZpZy5sZWdlbmRIZWlnaHQ7XHJcblx0XHRcdCAgICAgICAgY29udGV4dC5tb3ZlVG8oc3RhcnRYLCBpdGVtLnkpO1xyXG5cdFx0XHQgICAgICAgIGNvbnRleHQucmVjdChzdGFydFgsIGl0ZW0ueSwgaXRlbS53aWR0aCAtIDIsIGhlaWdodCk7XHJcblx0XHRcdFx0XHRjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG5cdFx0XHRcdFx0Y29udGV4dC5maWxsKCk7XHJcblx0XHRcdCAgICB9XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRjb2x1bW5JbmRleCs9MTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0Ly/nu5jliLbljLrln5/lm77mlbDmja5cclxuXHRcdFxyXG5cdFx0aWYoZWFjaFNlcmllcy50eXBlPT0nYXJlYScpe1xyXG5cdFx0XHR2YXIgc3BsaXRQb2ludExpc3QgPSBzcGxpdFBvaW50cyhwb2ludHMpO1xyXG5cdFx0XHRzcGxpdFBvaW50TGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChwb2ludHMpIHtcclxuXHRcdFx0XHQvLyDnu5jliLbljLrln5/mlbDmja5cclxuXHRcdFx0XHRjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRcdGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoZWFjaFNlcmllcy5jb2xvcik7XHJcblx0XHRcdFx0Y29udGV4dC5zZXRGaWxsU3R5bGUoZWFjaFNlcmllcy5jb2xvcik7XHJcblx0XHRcdFx0Y29udGV4dC5zZXRHbG9iYWxBbHBoYSgwLjIpO1xyXG5cdFx0XHRcdGNvbnRleHQuc2V0TGluZVdpZHRoKDIqb3B0cy5waXhlbFJhdGlvKTtcclxuXHRcdFx0XHRpZiAocG9pbnRzLmxlbmd0aCA+IDEpIHtcclxuXHRcdFx0XHRcdHZhciBmaXJzdFBvaW50ID0gcG9pbnRzWzBdO1xyXG5cdFx0XHRcdFx0dmFyIGxhc3RQb2ludCA9IHBvaW50c1twb2ludHMubGVuZ3RoIC0gMV07XHJcblx0XHRcdFx0XHRjb250ZXh0Lm1vdmVUbyhmaXJzdFBvaW50LngsIGZpcnN0UG9pbnQueSk7XHJcblx0XHRcdFx0XHRpZiAoZWFjaFNlcmllcy5zdHlsZSA9PT0gJ2N1cnZlJykge1xyXG5cdFx0XHRcdFx0XHRwb2ludHMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoaW5kZXggPiAwKSB7XHJcblx0XHRcdFx0XHRcdFx0XHR2YXIgY3RybFBvaW50ID0gY3JlYXRlQ3VydmVDb250cm9sUG9pbnRzKHBvaW50cywgaW5kZXggLSAxKTtcclxuXHRcdFx0XHRcdFx0XHRcdGNvbnRleHQuYmV6aWVyQ3VydmVUbyhjdHJsUG9pbnQuY3RyQS54LCBjdHJsUG9pbnQuY3RyQS55LCBjdHJsUG9pbnQuY3RyQi54LCBjdHJsUG9pbnQuY3RyQi55LCBpdGVtLngsIGl0ZW0ueSk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHBvaW50cy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xyXG5cdFx0XHRcdFx0XHRcdGlmIChpbmRleCA+IDApIHtcclxuXHRcdFx0XHRcdFx0XHRcdGNvbnRleHQubGluZVRvKGl0ZW0ueCwgaXRlbS55KTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0Y29udGV4dC5saW5lVG8obGFzdFBvaW50LngsIGVuZFkpO1xyXG5cdFx0XHRcdFx0Y29udGV4dC5saW5lVG8oZmlyc3RQb2ludC54LCBlbmRZKTtcclxuXHRcdFx0XHRcdGNvbnRleHQubGluZVRvKGZpcnN0UG9pbnQueCwgZmlyc3RQb2ludC55KTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0dmFyIGl0ZW0gPSBwb2ludHNbMF07XHJcblx0XHRcdFx0XHRjb250ZXh0Lm1vdmVUbyhpdGVtLnggLSBlYWNoU3BhY2luZyAvIDIsIGl0ZW0ueSk7XHJcblx0XHRcdFx0XHRjb250ZXh0LmxpbmVUbyhpdGVtLnggKyBlYWNoU3BhY2luZyAvIDIsIGl0ZW0ueSk7XHJcblx0XHRcdFx0XHRjb250ZXh0LmxpbmVUbyhpdGVtLnggKyBlYWNoU3BhY2luZyAvIDIsIGVuZFkpO1xyXG5cdFx0XHRcdFx0Y29udGV4dC5saW5lVG8oaXRlbS54IC0gZWFjaFNwYWNpbmcgLyAyLCBlbmRZKTtcclxuXHRcdFx0XHRcdGNvbnRleHQubW92ZVRvKGl0ZW0ueCAtIGVhY2hTcGFjaW5nIC8gMiwgaXRlbS55KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Y29udGV4dC5jbG9zZVBhdGgoKTtcclxuXHRcdFx0XHRjb250ZXh0LmZpbGwoKTtcclxuXHRcdFx0XHRjb250ZXh0LnNldEdsb2JhbEFscGhhKDEpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0XHJcblx0XHRcclxuXHRcdC8vIOe7mOWItuaKmOe6v+aVsOaNruWbvlxyXG5cdFx0aWYoZWFjaFNlcmllcy50eXBlPT0nbGluZScpe1xyXG5cdFx0XHR2YXIgc3BsaXRQb2ludExpc3QgPSBzcGxpdFBvaW50cyhwb2ludHMpO1xyXG5cdFx0XHRzcGxpdFBvaW50TGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChwb2ludHMsIGluZGV4KSB7XHJcblx0XHRcdFx0Y29udGV4dC5iZWdpblBhdGgoKTtcclxuXHRcdFx0XHRjb250ZXh0LnNldFN0cm9rZVN0eWxlKGVhY2hTZXJpZXMuY29sb3IpO1xyXG5cdFx0XHRcdGNvbnRleHQuc2V0TGluZVdpZHRoKDIqb3B0cy5waXhlbFJhdGlvKTtcclxuXHRcdFx0XHRpZiAocG9pbnRzLmxlbmd0aCA9PT0gMSkge1xyXG5cdFx0XHRcdFx0Y29udGV4dC5tb3ZlVG8ocG9pbnRzWzBdLngsIHBvaW50c1swXS55KTtcclxuXHRcdFx0XHRcdGNvbnRleHQuYXJjKHBvaW50c1swXS54LCBwb2ludHNbMF0ueSwgMSwgMCwgMiAqIE1hdGguUEkpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRjb250ZXh0Lm1vdmVUbyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnkpO1xyXG5cdFx0XHRcdFx0aWYgKGVhY2hTZXJpZXMuc3R5bGU9PSdjdXJ2ZScpIHtcclxuXHRcdFx0XHRcdFx0cG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKGluZGV4ID4gMCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0dmFyIGN0cmxQb2ludCA9IGNyZWF0ZUN1cnZlQ29udHJvbFBvaW50cyhwb2ludHMsIGluZGV4IC0gMSk7XHJcblx0XHRcdFx0XHRcdFx0XHRjb250ZXh0LmJlemllckN1cnZlVG8oY3RybFBvaW50LmN0ckEueCwgY3RybFBvaW50LmN0ckEueSwgY3RybFBvaW50LmN0ckIueCwgY3RybFBvaW50LmN0ckIueSwgaXRlbS54LCBpdGVtLnkpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRwb2ludHMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoaW5kZXggPiAwKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRjb250ZXh0LmxpbmVUbyhpdGVtLngsIGl0ZW0ueSk7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGNvbnRleHQubW92ZVRvKHBvaW50c1swXS54LCBwb2ludHNbMF0ueSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcblx0XHRcdFx0Y29udGV4dC5zdHJva2UoKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdC8vIOe7mOWItueCueaVsOaNruWbvlxyXG5cdFx0aWYoZWFjaFNlcmllcy50eXBlPT0ncG9pbnQnKXtcclxuXHRcdFx0dmFyIHNwbGl0UG9pbnRMaXN0ID0gc3BsaXRQb2ludHMocG9pbnRzKTtcclxuXHRcdFx0c3BsaXRQb2ludExpc3QuZm9yRWFjaChmdW5jdGlvbiAocG9pbnRzLCBpbmRleCkge1xyXG5cdFx0XHRcdGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcblx0XHRcdFx0Y29udGV4dC5zZXRTdHJva2VTdHlsZShlYWNoU2VyaWVzLmNvbG9yKTtcclxuXHRcdFx0XHRjb250ZXh0LnNldExpbmVXaWR0aCgyKm9wdHMucGl4ZWxSYXRpbyk7XHJcblx0XHRcdFx0Y29udGV4dC5tb3ZlVG8ocG9pbnRzWzBdLngsIHBvaW50c1swXS55KTtcclxuXHRcdFx0XHRjb250ZXh0LmFyYyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnksIDEsIDAsIDIgKiBNYXRoLlBJKTtcclxuXHRcdFx0XHRjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG5cdFx0XHRcdGNvbnRleHQuc3Ryb2tlKCk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdFx0XHJcbiAgICAgICAgaWYgKG9wdHMuZGF0YVBvaW50U2hhcGUgIT09IGZhbHNlICYmIGVhY2hTZXJpZXMudHlwZSE9PSdjb2x1bW4nKSB7XHJcbiAgICAgICAgICAgIHZhciBzaGFwZSA9IGNvbmZpZy5kYXRhUG9pbnRTaGFwZVtzZXJpZXNJbmRleCAlIGNvbmZpZy5kYXRhUG9pbnRTaGFwZS5sZW5ndGhdO1xyXG4gICAgICAgICAgICBkcmF3UG9pbnRTaGFwZShwb2ludHMsIGVhY2hTZXJpZXMuY29sb3IsIHNoYXBlLCBjb250ZXh0LG9wdHMpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgaWYgKG9wdHMuZGF0YUxhYmVsICE9PSBmYWxzZSAmJiBwcm9jZXNzID09PSAxKSB7XHJcblx0XHR2YXIgY29sdW1uSW5kZXg9MDtcclxuICAgICAgICBzZXJpZXMuZm9yRWFjaChmdW5jdGlvbiAoZWFjaFNlcmllcywgc2VyaWVzSW5kZXgpIHtcclxuICAgICAgICAgICAgdmFyIGRhdGEgPSBlYWNoU2VyaWVzLmRhdGE7XHJcblx0XHRcdHZhciBwb2ludHMgPSBnZXREYXRhUG9pbnRzKGRhdGEsIG1pblJhbmdlLCBtYXhSYW5nZSwgeEF4aXNQb2ludHMsIGVhY2hTcGFjaW5nLCBvcHRzLCBjb25maWcsIHByb2Nlc3MpO1xyXG5cdFx0XHRpZihlYWNoU2VyaWVzLnR5cGUhPT0nY29sdW1uJyl7XHJcblx0XHRcdFx0ZHJhd1BvaW50VGV4dChwb2ludHMsIGVhY2hTZXJpZXMsIGNvbmZpZywgY29udGV4dCk7XHJcblx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdHBvaW50cyA9IGZpeENvbHVtZURhdGEocG9pbnRzLCBlYWNoU3BhY2luZywgY29sdW1uTGVuZ3RoLCBjb2x1bW5JbmRleCwgY29uZmlnLCBvcHRzKTtcclxuXHRcdFx0XHRkcmF3UG9pbnRUZXh0KHBvaW50cywgZWFjaFNlcmllcywgY29uZmlnLCBjb250ZXh0KTtcclxuXHRcdFx0XHRjb2x1bW5JbmRleCs9MTtcclxuXHRcdFx0fVxyXG4gICAgICAgICAgICBcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBjb250ZXh0LnJlc3RvcmUoKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHhBeGlzUG9pbnRzOiB4QXhpc1BvaW50cyxcclxuICAgICAgICBjYWxQb2ludHM6IGNhbFBvaW50cyxcclxuICAgICAgICBlYWNoU3BhY2luZzogZWFjaFNwYWNpbmdcclxuICAgIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdUb29sVGlwQnJpZGdlKG9wdHMsIGNvbmZpZywgY29udGV4dCwgcHJvY2VzcywgZWFjaFNwYWNpbmcsIHhBeGlzUG9pbnRzKSB7XHJcblx0dmFyIHRvb2xUaXBPcHRpb24gPSBvcHRzLmV4dHJhLnRvb2x0aXAgfHwge307XHJcblx0aWYodG9vbFRpcE9wdGlvbi5ob3JpemVudGFsTGluZSAmJiBvcHRzLnRvb2x0aXAgJiYgcHJvY2VzcyA9PT0gMSAmJiAob3B0cy50eXBlPT0nbGluZScgfHwgb3B0cy50eXBlPT0nYXJlYScgfHwgb3B0cy50eXBlPT0nY29sdW1uJyB8fCBvcHRzLnR5cGU9PSdjYW5kbGUnIHx8IG9wdHMudHlwZT09J21peCcpKXtcclxuXHRcdGRyYXdUb29sVGlwSG9yaXplbnRhbExpbmUob3B0cywgY29uZmlnLCBjb250ZXh0LCBlYWNoU3BhY2luZywgeEF4aXNQb2ludHMpXHJcblx0fVxyXG4gICAgY29udGV4dC5zYXZlKCk7XHJcbiAgICBpZiAob3B0cy5fc2Nyb2xsRGlzdGFuY2VfICYmIG9wdHMuX3Njcm9sbERpc3RhbmNlXyAhPT0gMCAmJiBvcHRzLmVuYWJsZVNjcm9sbCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIGNvbnRleHQudHJhbnNsYXRlKG9wdHMuX3Njcm9sbERpc3RhbmNlXywgMCk7XHJcbiAgICB9XHJcbiAgICBpZiAob3B0cy50b29sdGlwICYmIG9wdHMudG9vbHRpcC50ZXh0TGlzdCAmJiBvcHRzLnRvb2x0aXAudGV4dExpc3QubGVuZ3RoICYmIHByb2Nlc3MgPT09IDEpIHtcclxuICAgICAgICBkcmF3VG9vbFRpcChvcHRzLnRvb2x0aXAudGV4dExpc3QsIG9wdHMudG9vbHRpcC5vZmZzZXQsIG9wdHMsIGNvbmZpZywgY29udGV4dCwgZWFjaFNwYWNpbmcsIHhBeGlzUG9pbnRzKTtcclxuICAgIH1cclxuICAgIGNvbnRleHQucmVzdG9yZSgpO1xyXG5cdFxyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3WEF4aXMoY2F0ZWdvcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KSB7XHJcblx0XHJcbiAgICB2YXIgX2dldFhBeGlzUG9pbnRzNCA9IGdldFhBeGlzUG9pbnRzKGNhdGVnb3JpZXMsIG9wdHMsIGNvbmZpZyksXHJcbiAgICAgICAgeEF4aXNQb2ludHMgPSBfZ2V0WEF4aXNQb2ludHM0LnhBeGlzUG9pbnRzLFxyXG4gICAgICAgIHN0YXJ0WCA9IF9nZXRYQXhpc1BvaW50czQuc3RhcnRYLFxyXG4gICAgICAgIGVuZFggPSBfZ2V0WEF4aXNQb2ludHM0LmVuZFgsXHJcbiAgICAgICAgZWFjaFNwYWNpbmcgPSBfZ2V0WEF4aXNQb2ludHM0LmVhY2hTcGFjaW5nO1xyXG5cclxuICAgIHZhciBzdGFydFkgPSBvcHRzLmhlaWdodCAtIGNvbmZpZy5wYWRkaW5nIC0gY29uZmlnLnhBeGlzSGVpZ2h0IC0gY29uZmlnLmxlZ2VuZEhlaWdodDtcclxuICAgIHZhciBlbmRZID0gY29uZmlnLnBhZGRpbmc7XHJcblxyXG5cclxuXHQvL+e7mOWItua7muWKqOadoVxyXG5cdGlmKG9wdHMuZW5hYmxlU2Nyb2xsICYmIG9wdHMueEF4aXMuc2Nyb2xsU2hvdyl7XHJcblx0XHR2YXIgc2Nyb2xsWT1vcHRzLmhlaWdodCAtIGNvbmZpZy5wYWRkaW5nIC0gY29uZmlnLmxlZ2VuZEhlaWdodCArIDYqb3B0cy5waXhlbFJhdGlvO1xyXG5cdFx0dmFyIHNjcm9sbFNjcmVlbldpZHRoPWVuZFgtc3RhcnRYO1xyXG5cdFx0dmFyIHNjcm9sbFRvdGFsV2lkdGg9ZWFjaFNwYWNpbmcqKHhBeGlzUG9pbnRzLmxlbmd0aC0xKTtcclxuXHRcdHZhciBzY3JvbGxXaWR0aD1zY3JvbGxTY3JlZW5XaWR0aCpzY3JvbGxTY3JlZW5XaWR0aC9zY3JvbGxUb3RhbFdpZHRoO1xyXG5cdFx0dmFyIHNjcm9sbExlZnQ9MDtcclxuXHRcdGlmIChvcHRzLl9zY3JvbGxEaXN0YW5jZV8pe1xyXG5cdFx0XHRzY3JvbGxMZWZ0PS1vcHRzLl9zY3JvbGxEaXN0YW5jZV8qKHNjcm9sbFNjcmVlbldpZHRoKS9zY3JvbGxUb3RhbFdpZHRoO1xyXG5cdFx0fVxyXG5cdFx0Y29udGV4dC5iZWdpblBhdGgoKTtcclxuXHRcdGNvbnRleHQuc2V0TGluZUNhcCgncm91bmQnKTtcclxuXHRcdGNvbnRleHQuc2V0TGluZVdpZHRoKDYqb3B0cy5waXhlbFJhdGlvKTtcclxuXHRcdGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUob3B0cy54QXhpcy5zY3JvbGxCYWNrZ3JvdW5kQ29sb3IgfHwgXCIjRUZFQkVGXCIpO1xyXG5cdFx0Y29udGV4dC5tb3ZlVG8oc3RhcnRYLCBzY3JvbGxZKTtcclxuXHRcdGNvbnRleHQubGluZVRvKGVuZFgsIHNjcm9sbFkpO1xyXG5cdFx0Y29udGV4dC5zdHJva2UoKTtcclxuXHRcdGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcblx0XHRjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG5cdFx0Y29udGV4dC5zZXRMaW5lQ2FwKCdyb3VuZCcpO1xyXG5cdFx0Y29udGV4dC5zZXRMaW5lV2lkdGgoNipvcHRzLnBpeGVsUmF0aW8pO1xyXG5cdFx0Y29udGV4dC5zZXRTdHJva2VTdHlsZShvcHRzLnhBeGlzLnNjcm9sbENvbG9yIHx8XCIjQTZBNkE2XCIpO1xyXG5cdFx0Y29udGV4dC5tb3ZlVG8oc3RhcnRYK3Njcm9sbExlZnQsIHNjcm9sbFkpO1xyXG5cdFx0Y29udGV4dC5saW5lVG8oc3RhcnRYK3Njcm9sbExlZnQrc2Nyb2xsV2lkdGgsIHNjcm9sbFkpO1xyXG5cdFx0Y29udGV4dC5zdHJva2UoKTtcclxuXHRcdGNvbnRleHQuc2V0TGluZUNhcCgnYnV0dCcpO1xyXG5cdFx0Y29udGV4dC5jbG9zZVBhdGgoKTtcclxuXHR9XHJcblx0XHJcbiAgICBjb250ZXh0LnNhdmUoKTtcclxuXHRcclxuICAgIGlmIChvcHRzLl9zY3JvbGxEaXN0YW5jZV8gJiYgb3B0cy5fc2Nyb2xsRGlzdGFuY2VfICE9PSAwKSB7XHJcbiAgICAgICAgY29udGV4dC50cmFuc2xhdGUob3B0cy5fc2Nyb2xsRGlzdGFuY2VfLCAwKTtcclxuICAgIH1cclxuXHJcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShvcHRzLnhBeGlzLmdyaWRDb2xvciB8fCBcIiNjY2NjY2NcIik7XHJcblx0Y29udGV4dC5zZXRMaW5lQ2FwKCdidXR0Jyk7XHJcblx0Y29udGV4dC5zZXRMaW5lV2lkdGgoMSpvcHRzLnBpeGVsUmF0aW8pO1xyXG5cdGlmKG9wdHMueEF4aXMuZ3JpZFR5cGU9PSdkYXNoJyl7XHJcblx0XHRjb250ZXh0LnNldExpbmVEYXNoKFtvcHRzLnhBeGlzLmRhc2hMZW5ndGgsb3B0cy54QXhpcy5kYXNoTGVuZ3RoXSk7XHJcblx0fVxyXG4gICAgaWYgKG9wdHMueEF4aXMuZGlzYWJsZUdyaWQgIT09IHRydWUpIHtcclxuICAgICAgICBpZiAob3B0cy54QXhpcy50eXBlID09PSAnY2FsaWJyYXRpb24nKSB7XHJcbiAgICAgICAgICAgIHhBeGlzUG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8oaXRlbSAtIGVhY2hTcGFjaW5nIC8gMiwgc3RhcnRZKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyhpdGVtIC0gZWFjaFNwYWNpbmcgLyAyLCBzdGFydFkgKyA0Km9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHhBeGlzUG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0Lm1vdmVUbyhpdGVtLCBzdGFydFkpO1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oaXRlbSwgZW5kWSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG5cdGNvbnRleHQuc2V0TGluZURhc2goW10pO1xyXG5cclxuXHQvL+S4jee7mOWItljovbRcclxuXHRpZiAob3B0cy54QXhpcy5kaXNhYmxlZCAhPT0gdHJ1ZSkge1xyXG5cdFx0Ly8g5a+5WOi9tOWIl+ihqOWBmuaKveeogOWkhOeQhlxyXG5cdFx0bGV0IHZhbGlkV2lkdGggPSBvcHRzLndpZHRoIC0gMiAqIGNvbmZpZy5wYWRkaW5nIC0gY29uZmlnLnlBeGlzV2lkdGggLSBjb25maWcueUF4aXNUaXRsZVdpZHRoO1xyXG5cdFx0Ly/pu5jorqTlhajpg6jmmL7npLpY6L205qCH562+XHJcblx0XHRsZXQgbWF4WEF4aXNMaXN0TGVuZ3RoID0gY2F0ZWdvcmllcy5sZW5ndGg7XHJcblx0XHQvL+WmguaenOS4jeaXi+i9rFjovbTmlofmoYhcclxuXHRcdGlmIChjb25maWcuX3hBeGlzVGV4dEFuZ2xlXyA9PT0gMCkge1xyXG5cdFx0XHQvL+WmguaenOiuvue9ruS6hljovbTljZXlsY/mlbDph49cclxuXHRcdFx0aWYob3B0cy54QXhpcy5sYWJlbENvdW50KXtcclxuXHRcdFx0XHQvL+WmguaenOiuvue9rljovbTlr4bluqZcclxuXHRcdFx0XHRpZihvcHRzLnhBeGlzLml0ZW1Db3VudCl7XHJcblx0XHRcdFx0XHRtYXhYQXhpc0xpc3RMZW5ndGggPSBNYXRoLmNlaWwoY2F0ZWdvcmllcy5sZW5ndGgvb3B0cy54QXhpcy5pdGVtQ291bnQqb3B0cy54QXhpcy5sYWJlbENvdW50KTtcclxuXHRcdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRcdG1heFhBeGlzTGlzdExlbmd0aCA9IG9wdHMueEF4aXMubGFiZWxDb3VudDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0bWF4WEF4aXNMaXN0TGVuZ3RoLT0xO1xyXG5cdFx0XHR9XHJcblx0XHR9ZWxzZXtcclxuXHRcdFx0Ly/ml4vovazmoIfnrb7mlofmoYhcclxuXHRcdFx0bWF4WEF4aXNMaXN0TGVuZ3RoID0gTWF0aC5taW4oY2F0ZWdvcmllcy5sZW5ndGgsIE1hdGguY2VpbCh2YWxpZFdpZHRoIC8gY29uZmlnLmZvbnRTaXplIC8gMS41KSk7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdGxldCByYXRpbyA9IE1hdGguY2VpbChjYXRlZ29yaWVzLmxlbmd0aCAvIG1heFhBeGlzTGlzdExlbmd0aCk7XHJcblx0XHRcclxuXHRcdGxldCBuZXdDYXRlZ29yaWVzID1bXTtcclxuXHRcdGxldCBjZ0xlbmd0aD1jYXRlZ29yaWVzLmxlbmd0aDtcclxuXHRcdGZvcihsZXQgaT0wO2k8Y2dMZW5ndGg7aSsrKXtcclxuXHRcdFx0aWYoaSAlIHJhdGlvICE9PSAwKXtcclxuXHRcdFx0XHRuZXdDYXRlZ29yaWVzLnB1c2goXCJcIik7XHJcblx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdG5ld0NhdGVnb3JpZXMucHVzaChjYXRlZ29yaWVzW2ldKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0bmV3Q2F0ZWdvcmllc1tjZ0xlbmd0aC0xXT1jYXRlZ29yaWVzW2NnTGVuZ3RoLTFdO1xyXG5cdFx0LypcclxuXHRcdGNhdGVnb3JpZXMgPSBjYXRlZ29yaWVzLm1hcChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcclxuXHRcdFx0cmV0dXJuIGluZGV4ICUgcmF0aW8gIT09IDAgPyAnJyA6IGl0ZW07XHJcblx0XHR9KTsqL1xyXG5cdFx0XHJcblx0XHRcclxuXHRcdGlmIChjb25maWcuX3hBeGlzVGV4dEFuZ2xlXyA9PT0gMCkge1xyXG5cdFx0XHRuZXdDYXRlZ29yaWVzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XHJcblx0XHRcdFx0dmFyIG9mZnNldCA9IGVhY2hTcGFjaW5nIC8gMiAtIG1lYXN1cmVUZXh0KGl0ZW0pIC8gMjtcclxuXHRcdFx0XHRjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRcdGNvbnRleHQuc2V0Rm9udFNpemUoY29uZmlnLmZvbnRTaXplKTtcclxuXHRcdFx0XHRjb250ZXh0LnNldEZpbGxTdHlsZShvcHRzLnhBeGlzLmZvbnRDb2xvciB8fCAnIzY2NjY2NicpO1xyXG5cdFx0XHRcdGNvbnRleHQuZmlsbFRleHQoaXRlbSwgeEF4aXNQb2ludHNbaW5kZXhdICsgb2Zmc2V0LCBzdGFydFkgKyBjb25maWcuZm9udFNpemUgKyA1KTtcclxuXHRcdFx0XHRjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG5cdFx0XHRcdGNvbnRleHQuc3Ryb2tlKCk7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdG5ld0NhdGVnb3JpZXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcclxuXHRcdFx0XHRjb250ZXh0LnNhdmUoKTtcclxuXHRcdFx0XHRjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRcdGNvbnRleHQuc2V0Rm9udFNpemUoY29uZmlnLmZvbnRTaXplKTtcclxuXHRcdFx0XHRjb250ZXh0LnNldEZpbGxTdHlsZShvcHRzLnhBeGlzLmZvbnRDb2xvciB8fCAnIzY2NjY2NicpO1xyXG5cdFx0XHRcdHZhciB0ZXh0V2lkdGggPSBtZWFzdXJlVGV4dChpdGVtKTtcclxuXHRcdFx0XHR2YXIgb2Zmc2V0ID0gZWFjaFNwYWNpbmcgLyAyIC0gdGV4dFdpZHRoO1xyXG5cclxuXHRcdFx0XHR2YXIgX2NhbFJvdGF0ZVRyYW5zbGF0ZSA9IGNhbFJvdGF0ZVRyYW5zbGF0ZSh4QXhpc1BvaW50c1tpbmRleF0gKyBlYWNoU3BhY2luZyAvIDIsIHN0YXJ0WSArIGNvbmZpZy5mb250U2l6ZSAvIDIgKyA1LCBvcHRzLmhlaWdodCksXHJcblx0XHRcdFx0XHR0cmFuc1ggPSBfY2FsUm90YXRlVHJhbnNsYXRlLnRyYW5zWCxcclxuXHRcdFx0XHRcdHRyYW5zWSA9IF9jYWxSb3RhdGVUcmFuc2xhdGUudHJhbnNZO1xyXG5cclxuXHRcdFx0XHRjb250ZXh0LnJvdGF0ZSgtMSAqIGNvbmZpZy5feEF4aXNUZXh0QW5nbGVfKTtcclxuXHRcdFx0XHRjb250ZXh0LnRyYW5zbGF0ZSh0cmFuc1gsIHRyYW5zWSk7XHJcblx0XHRcdFx0Y29udGV4dC5maWxsVGV4dChpdGVtLCB4QXhpc1BvaW50c1tpbmRleF0gKyBvZmZzZXQsIHN0YXJ0WSArIGNvbmZpZy5mb250U2l6ZSArIDUpO1xyXG5cdFx0XHRcdGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcblx0XHRcdFx0Y29udGV4dC5zdHJva2UoKTtcclxuXHRcdFx0XHRjb250ZXh0LnJlc3RvcmUoKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVx0XHJcbiAgICBjb250ZXh0LnJlc3RvcmUoKTtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdZQXhpc0dyaWQoY2F0ZWdvcmllcyxvcHRzLCBjb25maWcsIGNvbnRleHQpIHtcclxuXHRpZiAob3B0cy55QXhpcy5kaXNhYmxlR3JpZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHZhciBzcGFjaW5nVmFsaWQgPSBvcHRzLmhlaWdodCAtIDIgKiBjb25maWcucGFkZGluZyAtIGNvbmZpZy54QXhpc0hlaWdodCAtIGNvbmZpZy5sZWdlbmRIZWlnaHQ7XHJcbiAgICB2YXIgZWFjaFNwYWNpbmcgPSBNYXRoLmZsb29yKHNwYWNpbmdWYWxpZCAvIGNvbmZpZy55QXhpc1NwbGl0KTtcclxuICAgIHZhciB5QXhpc1RvdGFsV2lkdGggPSBjb25maWcueUF4aXNXaWR0aCArIGNvbmZpZy55QXhpc1RpdGxlV2lkdGg7XHJcbiAgICB2YXIgc3RhcnRYID0gY29uZmlnLnBhZGRpbmcgKyB5QXhpc1RvdGFsV2lkdGg7XHJcblx0dmFyIF9nZXRYQXhpc1BvaW50czQgPSBnZXRYQXhpc1BvaW50cyhjYXRlZ29yaWVzLCBvcHRzLCBjb25maWcpLFxyXG5cdCAgICB4QXhpc1BvaW50cyA9IF9nZXRYQXhpc1BvaW50czQueEF4aXNQb2ludHMsXHJcblx0ICAgIHhBeGlzZWFjaFNwYWNpbmcgPSBfZ2V0WEF4aXNQb2ludHM0LmVhY2hTcGFjaW5nO1xyXG5cdHZhciBUb3RhbFdpZHRoPXhBeGlzZWFjaFNwYWNpbmcqKHhBeGlzUG9pbnRzLmxlbmd0aC0xKTtcclxuXHR2YXIgZW5kWCA9IHN0YXJ0WCtUb3RhbFdpZHRoO1xyXG5cdFxyXG4gICAgdmFyIHBvaW50cyA9IFtdO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb25maWcueUF4aXNTcGxpdDsgaSsrKSB7XHJcbiAgICAgICAgcG9pbnRzLnB1c2goY29uZmlnLnBhZGRpbmcgKyBlYWNoU3BhY2luZyAqIGkpO1xyXG4gICAgfVxyXG4gICAgcG9pbnRzLnB1c2goY29uZmlnLnBhZGRpbmcgKyBlYWNoU3BhY2luZyAqIGNvbmZpZy55QXhpc1NwbGl0ICsgMik7XHJcblxyXG5cdGNvbnRleHQuc2F2ZSgpO1xyXG4gICAgaWYgKG9wdHMuX3Njcm9sbERpc3RhbmNlXyAmJiBvcHRzLl9zY3JvbGxEaXN0YW5jZV8gIT09IDApIHtcclxuICAgICAgICBjb250ZXh0LnRyYW5zbGF0ZShvcHRzLl9zY3JvbGxEaXN0YW5jZV8sIDApO1xyXG4gICAgfVxyXG5cdFxyXG5cdGlmKG9wdHMueUF4aXMuZ3JpZFR5cGU9PSdkYXNoJyl7XHJcblx0XHRjb250ZXh0LnNldExpbmVEYXNoKFtvcHRzLnlBeGlzLmRhc2hMZW5ndGgsb3B0cy55QXhpcy5kYXNoTGVuZ3RoXSk7XHJcblx0fVxyXG4gICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUob3B0cy55QXhpcy5ncmlkQ29sb3IgfHwgXCIjY2NjY2NjXCIpO1xyXG5cdFxyXG4gICAgY29udGV4dC5zZXRMaW5lV2lkdGgoMSpvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgcG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgY29udGV4dC5tb3ZlVG8oc3RhcnRYLCBpdGVtKTtcclxuICAgICAgICBjb250ZXh0LmxpbmVUbyhlbmRYLCBpdGVtKTtcclxuICAgIH0pO1xyXG4gICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcblx0Y29udGV4dC5zZXRMaW5lRGFzaChbXSk7XHJcblx0XHJcblx0Y29udGV4dC5yZXN0b3JlKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdZQXhpcyhzZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCkge1xyXG4gICAgaWYgKG9wdHMueUF4aXMuZGlzYWJsZWQgPT09IHRydWUpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIF9jYWxZQXhpc0RhdGE0ID0gY2FsWUF4aXNEYXRhKHNlcmllcywgb3B0cywgY29uZmlnKSxcclxuICAgICAgICByYW5nZXNGb3JtYXQgPSBfY2FsWUF4aXNEYXRhNC5yYW5nZXNGb3JtYXQ7XHJcblxyXG4gICAgdmFyIHlBeGlzVG90YWxXaWR0aCA9IGNvbmZpZy55QXhpc1dpZHRoICsgY29uZmlnLnlBeGlzVGl0bGVXaWR0aDtcclxuXHJcbiAgICB2YXIgc3BhY2luZ1ZhbGlkID0gb3B0cy5oZWlnaHQgLSAyICogY29uZmlnLnBhZGRpbmcgLSBjb25maWcueEF4aXNIZWlnaHQgLSBjb25maWcubGVnZW5kSGVpZ2h0O1xyXG4gICAgdmFyIGVhY2hTcGFjaW5nID0gTWF0aC5mbG9vcihzcGFjaW5nVmFsaWQgLyBjb25maWcueUF4aXNTcGxpdCk7XHJcbiAgICB2YXIgc3RhcnRYID0gY29uZmlnLnBhZGRpbmcgKyB5QXhpc1RvdGFsV2lkdGg7XHJcbiAgICB2YXIgZW5kWCA9IG9wdHMud2lkdGggLSBjb25maWcucGFkZGluZztcclxuICAgIHZhciBlbmRZID0gb3B0cy5oZWlnaHQgLSBjb25maWcucGFkZGluZyAtIGNvbmZpZy54QXhpc0hlaWdodCAtIGNvbmZpZy5sZWdlbmRIZWlnaHQrY29uZmlnLnhBeGlzVGV4dFBhZGRpbmc7XHJcblxyXG4gICAgLy8gc2V0IFlBeGlzIGJhY2tncm91bmRcclxuXHRjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgY29udGV4dC5zZXRGaWxsU3R5bGUob3B0cy5iYWNrZ3JvdW5kIHx8ICcjZmZmZmZmJyk7XHJcbiAgICBpZiAob3B0cy5fc2Nyb2xsRGlzdGFuY2VfIDwgMCkge1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFJlY3QoMCwgMCwgc3RhcnRYLCBlbmRZICsgY29uZmlnLnhBeGlzSGVpZ2h0ICk7XHJcbiAgICB9XHJcbiAgICBjb250ZXh0LmZpbGxSZWN0KGVuZFgsIDAsIG9wdHMud2lkdGgsIGVuZFkgKyBjb25maWcueEF4aXNIZWlnaHQgKTtcclxuXHRjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG5cdGNvbnRleHQuc3Ryb2tlKCk7XHJcblxyXG4gICAgdmFyIHBvaW50cyA9IFtdO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gY29uZmlnLnlBeGlzU3BsaXQ7IGkrKykge1xyXG4gICAgICAgIHBvaW50cy5wdXNoKGNvbmZpZy5wYWRkaW5nICsgZWFjaFNwYWNpbmcgKiBpKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgXHJcbiAgICByYW5nZXNGb3JtYXQuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcclxuICAgICAgICB2YXIgcG9zID0gcG9pbnRzW2luZGV4XSA/IHBvaW50c1tpbmRleF0gOiBlbmRZO1xyXG5cdFx0Y29udGV4dC5iZWdpblBhdGgoKTtcclxuXHRcdGNvbnRleHQuc2V0Rm9udFNpemUoY29uZmlnLmZvbnRTaXplKTtcclxuXHRcdGNvbnRleHQuc2V0RmlsbFN0eWxlKG9wdHMueUF4aXMuZm9udENvbG9yIHx8ICcjNjY2NjY2Jyk7XHJcbiAgICAgICAgY29udGV4dC5maWxsVGV4dChpdGVtLCBjb25maWcucGFkZGluZyArIGNvbmZpZy55QXhpc1RpdGxlV2lkdGgsIHBvcyArIGNvbmZpZy5mb250U2l6ZSAvIDIpO1xyXG5cdFx0Y29udGV4dC5jbG9zZVBhdGgoKTtcclxuXHRcdGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICB9KTtcclxuICAgIFxyXG5cclxuICAgIGlmIChvcHRzLnlBeGlzLnRpdGxlKSB7XHJcbiAgICAgICAgZHJhd1lBeGlzVGl0bGUob3B0cy55QXhpcy50aXRsZSwgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd0xlZ2VuZChzZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCkge1xyXG4gICAgaWYgKG9wdHMubGVnZW5kPT09ZmFsc2UpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyBlYWNoIGxlZ2VuZCBzaGFwZSB3aWR0aCAxNXB4XHJcbiAgICAvLyB0aGUgc3BhY2luZyBiZXR3ZWVuIHNoYXBlIGFuZCB0ZXh0IGluIGVhY2ggbGVnZW5kIGlzIHRoZSBgcGFkZGluZ2BcclxuICAgIC8vIGVhY2ggbGVnZW5kIHNwYWNpbmcgaXMgdGhlIGBwYWRkaW5nYFxyXG4gICAgLy8gbGVnZW5kIG1hcmdpbiB0b3AgYGNvbmZpZy5wYWRkaW5nYFxyXG5cclxuICAgIHZhciBfY2FsTGVnZW5kRGF0YSA9IGNhbExlZ2VuZERhdGEoc2VyaWVzLCBvcHRzLCBjb25maWcpLFxyXG4gICAgICAgIGxlZ2VuZExpc3QgPSBfY2FsTGVnZW5kRGF0YS5sZWdlbmRMaXN0O1xyXG5cclxuICAgIHZhciBwYWRkaW5nID0gNSpvcHRzLnBpeGVsUmF0aW87XHJcbiAgICB2YXIgbWFyZ2luVG9wID0gMTAqb3B0cy5waXhlbFJhdGlvO1xyXG4gICAgdmFyIHNoYXBlV2lkdGggPSAxNSpvcHRzLnBpeGVsUmF0aW87XHJcbiAgICBsZWdlbmRMaXN0LmZvckVhY2goZnVuY3Rpb24gKGl0ZW1MaXN0LCBsaXN0SW5kZXgpIHtcclxuICAgICAgICB2YXIgd2lkdGggPSAwO1xyXG4gICAgICAgIGl0ZW1MaXN0LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgaXRlbS5uYW1lID0gaXRlbS5uYW1lIHx8ICd1bmRlZmluZWQnO1xyXG4gICAgICAgICAgICB3aWR0aCArPSAzICogcGFkZGluZyArIG1lYXN1cmVUZXh0KGl0ZW0ubmFtZSkgKyBzaGFwZVdpZHRoO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBzdGFydFggPSAob3B0cy53aWR0aCAtIHdpZHRoKSAvIDIgKyBwYWRkaW5nO1xyXG4gICAgICAgIHZhciBzdGFydFkgPSBvcHRzLmhlaWdodCAtIGNvbmZpZy5wYWRkaW5nIC0gY29uZmlnLmxlZ2VuZEhlaWdodCArIGxpc3RJbmRleCAqIChjb25maWcuZm9udFNpemUgKyBtYXJnaW5Ub3ApICsgcGFkZGluZyArIG1hcmdpblRvcDtcclxuXHJcbiAgICAgICAgY29udGV4dC5zZXRGb250U2l6ZShjb25maWcuZm9udFNpemUpO1xyXG4gICAgICAgIGl0ZW1MaXN0LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgc3dpdGNoIChvcHRzLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2xpbmUnOlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zZXRMaW5lV2lkdGgoMSpvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoaXRlbS5jb2xvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUoaXRlbS5jb2xvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8oc3RhcnRYICsgNy41Km9wdHMucGl4ZWxSYXRpbywgc3RhcnRZICsgNSpvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuYXJjKHN0YXJ0WCArIDcuNSpvcHRzLnBpeGVsUmF0aW8sIHN0YXJ0WSArIDUqb3B0cy5waXhlbFJhdGlvLCA2Km9wdHMucGl4ZWxSYXRpbywgMCwgMiAqIE1hdGguUEkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5maWxsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3BpZSc6XHJcblx0XHRcdFx0XHRjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRcdFx0Y29udGV4dC5zZXRMaW5lV2lkdGgoMSpvcHRzLnBpeGVsUmF0aW8pO1xyXG5cdFx0XHRcdFx0Y29udGV4dC5zZXRTdHJva2VTdHlsZShpdGVtLmNvbG9yKTtcclxuXHRcdFx0XHRcdGNvbnRleHQuc2V0RmlsbFN0eWxlKGl0ZW0uY29sb3IpO1xyXG5cdFx0XHRcdFx0Y29udGV4dC5tb3ZlVG8oc3RhcnRYICsgNy41Km9wdHMucGl4ZWxSYXRpbywgc3RhcnRZICsgNSpvcHRzLnBpeGVsUmF0aW8pO1xyXG5cdFx0XHRcdFx0Y29udGV4dC5hcmMoc3RhcnRYICsgNy41Km9wdHMucGl4ZWxSYXRpbywgc3RhcnRZICsgNSpvcHRzLnBpeGVsUmF0aW8sIDYqb3B0cy5waXhlbFJhdGlvLCAwLCAyICogTWF0aC5QSSk7XHJcblx0XHRcdFx0XHRjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG5cdFx0XHRcdFx0Y29udGV4dC5maWxsKCk7XHJcblx0XHRcdFx0XHRjb250ZXh0LnN0cm9rZSgpO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdyaW5nJzpcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKDEqb3B0cy5waXhlbFJhdGlvKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnNldFN0cm9rZVN0eWxlKGl0ZW0uY29sb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGl0ZW0uY29sb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQubW92ZVRvKHN0YXJ0WCArIDcuNSpvcHRzLnBpeGVsUmF0aW8sIHN0YXJ0WSArIDUqb3B0cy5waXhlbFJhdGlvKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmFyYyhzdGFydFggKyA3LjUqb3B0cy5waXhlbFJhdGlvLCBzdGFydFkgKyA1Km9wdHMucGl4ZWxSYXRpbywgNipvcHRzLnBpeGVsUmF0aW8sIDAsIDIgKiBNYXRoLlBJKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuZmlsbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0XHRcdFx0Ly/lnIblvKfov5vluqblm77kuI3mmL7npLrlm77kvotcclxuXHRcdFx0XHRjYXNlICdnYXVnZSc6XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRjYXNlICdhcmNiYXInOlxyXG5cdFx0XHRcdFx0YnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcblx0XHRcdFx0XHRjb250ZXh0LnNldExpbmVXaWR0aCgxKm9wdHMucGl4ZWxSYXRpbyk7XHJcblx0XHRcdFx0XHRjb250ZXh0LnNldFN0cm9rZVN0eWxlKGl0ZW0uY29sb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc2V0RmlsbFN0eWxlKGl0ZW0uY29sb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQubW92ZVRvKHN0YXJ0WCwgc3RhcnRZKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGxSZWN0KHN0YXJ0WCwgc3RhcnRZLCAxNSpvcHRzLnBpeGVsUmF0aW8sIDEwKm9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmZpbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN0YXJ0WCArPSBwYWRkaW5nICsgc2hhcGVXaWR0aDtcclxuICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuXHRcdFx0Y29udGV4dC5zZXRGb250U2l6ZShjb25maWcuZm9udFNpemUpO1xyXG4gICAgICAgICAgICBjb250ZXh0LnNldEZpbGxTdHlsZShvcHRzLmV4dHJhLmxlZ2VuZFRleHRDb2xvciB8fCAnIzMzMzMzMycpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmZpbGxUZXh0KGl0ZW0ubmFtZSwgc3RhcnRYLCBzdGFydFkgKyA2Km9wdHMucGl4ZWxSYXRpbyszKm9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgICAgICAgIHN0YXJ0WCArPSBtZWFzdXJlVGV4dChpdGVtLm5hbWUpICsgMiAqIHBhZGRpbmc7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd1BpZURhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpIHtcclxuICAgIHZhciBwcm9jZXNzID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiAxO1xyXG5cclxuICAgIHZhciBwaWVPcHRpb24gPSBvcHRzLmV4dHJhLnBpZSB8fCB7fTtcclxuICAgIHNlcmllcyA9IGdldFBpZURhdGFQb2ludHMoc2VyaWVzLCBwcm9jZXNzKTtcclxuICAgIHZhciBjZW50ZXJQb3NpdGlvbiA9IHtcclxuICAgICAgICB4OiBvcHRzLndpZHRoIC8gMixcclxuICAgICAgICB5OiAob3B0cy5oZWlnaHQgLSBjb25maWcubGVnZW5kSGVpZ2h0KSAvIDJcclxuICAgIH07XHJcbiAgICB2YXIgcmFkaXVzID0gTWF0aC5taW4oY2VudGVyUG9zaXRpb24ueCAtIGNvbmZpZy5waWVDaGFydExpbmVQYWRkaW5nIC0gY29uZmlnLnBpZUNoYXJ0VGV4dFBhZGRpbmcgLSBjb25maWcuX3BpZVRleHRNYXhMZW5ndGhfLCBjZW50ZXJQb3NpdGlvbi55IC0gY29uZmlnLnBpZUNoYXJ0TGluZVBhZGRpbmcgLSBjb25maWcucGllQ2hhcnRUZXh0UGFkZGluZyk7XHJcbiAgICBpZiAob3B0cy5kYXRhTGFiZWwpIHtcclxuICAgICAgICByYWRpdXMgLT0gMTA7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJhZGl1cyAtPSAyICogY29uZmlnLnBhZGRpbmc7XHJcbiAgICB9XHJcblx0XHJcblx0dmFyIGFjdGl2ZVJhZGl1cz1yYWRpdXMrY29uZmlnLnBpZUNoYXJ0TGluZVBhZGRpbmcvMjtcclxuXHRcclxuXHRcclxuICAgIHNlcmllcyA9IHNlcmllcy5tYXAoZnVuY3Rpb24gKGVhY2hTZXJpZXMpIHtcclxuICAgICAgICBlYWNoU2VyaWVzLl9zdGFydF8gKz0gKHBpZU9wdGlvbi5vZmZzZXRBbmdsZSB8fCAwKSAqIE1hdGguUEkgLyAxODA7XHJcbiAgICAgICAgcmV0dXJuIGVhY2hTZXJpZXM7XHJcbiAgICB9KTtcclxuICAgIHNlcmllcy5mb3JFYWNoKGZ1bmN0aW9uIChlYWNoU2VyaWVzLHNlcmllc0luZGV4KSB7XHJcblx0XHRpZihvcHRzLnRvb2x0aXApe1xyXG5cdFx0XHRpZihvcHRzLnRvb2x0aXAuaW5kZXg9PXNlcmllc0luZGV4KXtcclxuXHRcdFx0XHRjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG5cdFx0XHRcdGNvbnRleHQuc2V0RmlsbFN0eWxlKGhleFRvUmdiKGVhY2hTZXJpZXMuY29sb3IsIG9wdHMuZXh0cmEucGllLmFjdGl2ZU9wYWNpdHkgfHwgMC41KSk7XHJcblx0XHRcdFx0Y29udGV4dC5tb3ZlVG8oY2VudGVyUG9zaXRpb24ueCwgY2VudGVyUG9zaXRpb24ueSk7XHJcblx0XHRcdFx0Y29udGV4dC5hcmMoY2VudGVyUG9zaXRpb24ueCwgY2VudGVyUG9zaXRpb24ueSwgYWN0aXZlUmFkaXVzLCBlYWNoU2VyaWVzLl9zdGFydF8sIGVhY2hTZXJpZXMuX3N0YXJ0XyArIDIgKiBlYWNoU2VyaWVzLl9wcm9wb3J0aW9uXyAqIE1hdGguUEkpO1xyXG5cdFx0XHRcdGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcblx0XHRcdFx0Y29udGV4dC5maWxsKCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuICAgICAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGNvbnRleHQuc2V0TGluZVdpZHRoKDIqb3B0cy5waXhlbFJhdGlvKTtcclxuXHRcdGNvbnRleHQubGluZUpvaW49XCJyb3VuZFwiO1xyXG4gICAgICAgIGNvbnRleHQuc2V0U3Ryb2tlU3R5bGUoJyNmZmZmZmYnKTtcclxuICAgICAgICBjb250ZXh0LnNldEZpbGxTdHlsZShlYWNoU2VyaWVzLmNvbG9yKTtcclxuICAgICAgICBjb250ZXh0Lm1vdmVUbyhjZW50ZXJQb3NpdGlvbi54LCBjZW50ZXJQb3NpdGlvbi55KTtcclxuICAgICAgICBjb250ZXh0LmFyYyhjZW50ZXJQb3NpdGlvbi54LCBjZW50ZXJQb3NpdGlvbi55LCByYWRpdXMsIGVhY2hTZXJpZXMuX3N0YXJ0XywgZWFjaFNlcmllcy5fc3RhcnRfICsgMiAqIGVhY2hTZXJpZXMuX3Byb3BvcnRpb25fICogTWF0aC5QSSk7XHJcbiAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgICBjb250ZXh0LmZpbGwoKTtcclxuICAgICAgICBpZiAob3B0cy5kaXNhYmxlUGllU3Ryb2tlICE9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKG9wdHMudHlwZSA9PT0gJ3JpbmcnKSB7XHJcbiAgICAgICAgdmFyIGlubmVyUGllV2lkdGggPSByYWRpdXMgKiAwLjY7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRzLmV4dHJhLnBpZS5yaW5nV2lkdGggPT09ICdudW1iZXInICYmIG9wdHMuZXh0cmEucGllLnJpbmdXaWR0aCA+IDApIHtcclxuICAgICAgICAgICAgaW5uZXJQaWVXaWR0aCA9IE1hdGgubWF4KDAsIHJhZGl1cyAtIG9wdHMuZXh0cmEucGllLnJpbmdXaWR0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY29udGV4dC5zZXRGaWxsU3R5bGUob3B0cy5iYWNrZ3JvdW5kIHx8ICcjZmZmZmZmJyk7XHJcbiAgICAgICAgY29udGV4dC5tb3ZlVG8oY2VudGVyUG9zaXRpb24ueCwgY2VudGVyUG9zaXRpb24ueSk7XHJcbiAgICAgICAgY29udGV4dC5hcmMoY2VudGVyUG9zaXRpb24ueCwgY2VudGVyUG9zaXRpb24ueSwgaW5uZXJQaWVXaWR0aCwgMCwgMiAqIE1hdGguUEkpO1xyXG4gICAgICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcbiAgICAgICAgY29udGV4dC5maWxsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG9wdHMuZGF0YUxhYmVsICE9PSBmYWxzZSAmJiBwcm9jZXNzID09PSAxKSB7XHJcbiAgICAgICAgLy8gZml4IGh0dHBzOi8vZ2l0aHViLmNvbS94aWFvbGluMzMwMy93eC1jaGFydHMvaXNzdWVzLzEzMlxyXG4gICAgICAgIHZhciB2YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzZXJpZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHNlcmllc1tpXS5kYXRhID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdmFsaWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICBkcmF3UGllVGV4dChzZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCwgcmFkaXVzLCBjZW50ZXJQb3NpdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChwcm9jZXNzID09PSAxICYmIG9wdHMudHlwZSA9PT0gJ3JpbmcnKSB7XHJcbiAgICAgICAgZHJhd1JpbmdUaXRsZShvcHRzLCBjb25maWcsIGNvbnRleHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgY2VudGVyOiBjZW50ZXJQb3NpdGlvbixcclxuICAgICAgICByYWRpdXM6IHJhZGl1cyxcclxuICAgICAgICBzZXJpZXM6IHNlcmllc1xyXG4gICAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd0FyY2JhckRhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpIHtcclxuICAgIHZhciBwcm9jZXNzID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiAxO1xyXG5cclxuICAgIHZhciBhcmNiYXJPcHRpb24gPSBvcHRzLmV4dHJhLmFyY2JhciB8fCB7fTtcclxuXHRhcmNiYXJPcHRpb24uc3RhcnRBbmdsZT1hcmNiYXJPcHRpb24uc3RhcnRBbmdsZT8gYXJjYmFyT3B0aW9uLnN0YXJ0QW5nbGU6IDAuNzU7XHJcblx0YXJjYmFyT3B0aW9uLmVuZEFuZ2xlPWFyY2Jhck9wdGlvbi5lbmRBbmdsZT8gYXJjYmFyT3B0aW9uLmVuZEFuZ2xlIDogMC4yNTtcclxuXHRhcmNiYXJPcHRpb24udHlwZT1hcmNiYXJPcHRpb24udHlwZT8gYXJjYmFyT3B0aW9uLnR5cGUgOiAnZGVmYXVsdCc7XHJcblx0XHJcbiAgICBzZXJpZXMgPSBnZXRBcmNiYXJEYXRhUG9pbnRzKHNlcmllcywgYXJjYmFyT3B0aW9uLCBwcm9jZXNzKTtcclxuICAgIHZhciBjZW50ZXJQb3NpdGlvbiA9IHtcclxuICAgICAgICB4OiBvcHRzLndpZHRoIC8gMixcclxuICAgICAgICB5OiAob3B0cy5oZWlnaHQpIC8gMlxyXG4gICAgfTtcclxuICAgIHZhciByYWRpdXMgPSBNYXRoLm1pbihjZW50ZXJQb3NpdGlvbi54ICwgY2VudGVyUG9zaXRpb24ueSk7XHJcbiAgIFxyXG5cdGlmICh0eXBlb2YgYXJjYmFyT3B0aW9uLndpZHRoID09PSAnbnVtYmVyJyAmJiBhcmNiYXJPcHRpb24ud2lkdGggPiAwKSB7XHJcblx0ICAgIGFyY2Jhck9wdGlvbi53aWR0aD1hcmNiYXJPcHRpb24ud2lkdGg7XHJcblx0fWVsc2V7XHJcblx0XHRhcmNiYXJPcHRpb24ud2lkdGg9MTIqb3B0cy5waXhlbFJhdGlvO1xyXG5cdH1cclxuXHRyYWRpdXMgLT0gY29uZmlnLnBhZGRpbmcrYXJjYmFyT3B0aW9uLndpZHRoLzI7XHJcblx0XHJcblx0Ly/og4zmma/popzoibJcclxuXHRjb250ZXh0LnNldExpbmVXaWR0aChhcmNiYXJPcHRpb24ud2lkdGgpOyAvLyDorr7nva7lnIbnjq/nmoTlrr3luqZcclxuXHRjb250ZXh0LnNldFN0cm9rZVN0eWxlKGFyY2Jhck9wdGlvbi5iYWNrZ3JvdW5kQ29sb3IgfHwgJyNFOUU5RTknKTsgLy8g6K6+572u5ZyG546v55qE6aKc6ImyXHJcblx0Y29udGV4dC5zZXRMaW5lQ2FwKCdyb3VuZCcpOyAvLyDorr7nva7lnIbnjq/nq6/ngrnnmoTlvaLnirZcclxuXHRjb250ZXh0LmJlZ2luUGF0aCgpOyAvL+W8gOWni+S4gOS4quaWsOeahOi3r+W+hFxyXG5cdGlmKGFyY2Jhck9wdGlvbi50eXBlPT0nZGVmYXVsdCcpe1xyXG5cdFx0Y29udGV4dC5hcmMoY2VudGVyUG9zaXRpb24ueCwgY2VudGVyUG9zaXRpb24ueSwgcmFkaXVzLCBhcmNiYXJPcHRpb24uc3RhcnRBbmdsZSAqIE1hdGguUEksIGFyY2Jhck9wdGlvbi5lbmRBbmdsZSAqIE1hdGguUEksIGZhbHNlKTtcclxuXHR9ZWxzZXtcclxuXHRcdGNvbnRleHQuYXJjKGNlbnRlclBvc2l0aW9uLngsIGNlbnRlclBvc2l0aW9uLnksIHJhZGl1cywgMCwgMiAqIE1hdGguUEksIGZhbHNlKTtcclxuXHR9XHJcblx0XHJcblx0Y29udGV4dC5zdHJva2UoKTsgLy/lr7nlvZPliY3ot6/lvoTov5vooYzmj4/ovrlcclxuXHRcdFxyXG5cdFx0XHRcclxuICAgIHNlcmllcy5mb3JFYWNoKGZ1bmN0aW9uIChlYWNoU2VyaWVzKSB7XHJcblx0XHRjb250ZXh0LnNldExpbmVXaWR0aChhcmNiYXJPcHRpb24ud2lkdGgpO1xyXG5cdFx0Y29udGV4dC5zZXRTdHJva2VTdHlsZShlYWNoU2VyaWVzLmNvbG9yKTtcclxuXHRcdGNvbnRleHQuc2V0TGluZUNhcCgncm91bmQnKTtcclxuXHRcdGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcblx0XHRjb250ZXh0LmFyYyhjZW50ZXJQb3NpdGlvbi54LCBjZW50ZXJQb3NpdGlvbi55LCByYWRpdXMsIGFyY2Jhck9wdGlvbi5zdGFydEFuZ2xlICogTWF0aC5QSSwgZWFjaFNlcmllcy5fcHJvcG9ydGlvbl8gKiBNYXRoLlBJLCBmYWxzZSk7XHJcblx0XHRjb250ZXh0LnN0cm9rZSgpO1xyXG5cdFx0XHJcbiAgICB9KTtcclxuICAgIGRyYXdSaW5nVGl0bGUob3B0cywgY29uZmlnLCBjb250ZXh0KTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgY2VudGVyOiBjZW50ZXJQb3NpdGlvbixcclxuICAgICAgICByYWRpdXM6IHJhZGl1cyxcclxuICAgICAgICBzZXJpZXM6IHNlcmllc1xyXG4gICAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd0dhdWdlRGF0YVBvaW50cyhjYXRlZ29yaWVzLHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KSB7XHJcblx0dmFyIHByb2Nlc3MgPSBhcmd1bWVudHMubGVuZ3RoID4gNSAmJiBhcmd1bWVudHNbNV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s1XSA6IDE7XHJcblx0dmFyIGdhdWdlT3B0aW9uID0gb3B0cy5leHRyYS5nYXVnZSB8fCB7fTtcclxuXHRnYXVnZU9wdGlvbi5zdGFydEFuZ2xlPWdhdWdlT3B0aW9uLnN0YXJ0QW5nbGU/IGdhdWdlT3B0aW9uLnN0YXJ0QW5nbGU6IDAuNzU7XHJcblx0aWYoZ2F1Z2VPcHRpb24ub2xkQW5nbGU9PXVuZGVmaW5lZCl7XHJcblx0XHRnYXVnZU9wdGlvbi5vbGRBbmdsZT1nYXVnZU9wdGlvbi5zdGFydEFuZ2xlO1xyXG5cdH1cclxuXHRpZihnYXVnZU9wdGlvbi5vbGREYXRhPT11bmRlZmluZWQpe1xyXG5cdFx0Z2F1Z2VPcHRpb24ub2xkRGF0YT0wO1xyXG5cdH1cclxuXHRnYXVnZU9wdGlvbi5lbmRBbmdsZT1nYXVnZU9wdGlvbi5lbmRBbmdsZT8gZ2F1Z2VPcHRpb24uZW5kQW5nbGUgOiAwLjI1O1xyXG5cdGNhdGVnb3JpZXMgPSBnZXRHYXVnZUF4aXNQb2ludHMoY2F0ZWdvcmllcyxnYXVnZU9wdGlvbi5zdGFydEFuZ2xlLGdhdWdlT3B0aW9uLmVuZEFuZ2xlKTtcclxuXHR2YXIgY2VudGVyUG9zaXRpb24gPSB7XHJcblx0ICAgIHg6IG9wdHMud2lkdGggLyAyLFxyXG5cdCAgICB5OiAob3B0cy5oZWlnaHQpIC8gMlxyXG5cdH07XHJcblx0dmFyIHJhZGl1cyA9IE1hdGgubWluKGNlbnRlclBvc2l0aW9uLnggLCBjZW50ZXJQb3NpdGlvbi55KTtcclxuXHRpZiAodHlwZW9mIGdhdWdlT3B0aW9uLndpZHRoID09PSAnbnVtYmVyJyAmJiBnYXVnZU9wdGlvbi53aWR0aCA+IDApIHtcclxuXHQgICAgZ2F1Z2VPcHRpb24ud2lkdGg9Z2F1Z2VPcHRpb24ud2lkdGg7XHJcblx0fWVsc2V7XHJcblx0XHRnYXVnZU9wdGlvbi53aWR0aD0xNSpvcHRzLnBpeGVsUmF0aW87XHJcblx0fVxyXG5cdHJhZGl1cyAtPSBjb25maWcucGFkZGluZytnYXVnZU9wdGlvbi53aWR0aC8yO1xyXG5cdHZhciBpbm5lclJhZGl1cyA9IHJhZGl1cy1nYXVnZU9wdGlvbi53aWR0aDtcclxuXHRcclxuXHRcclxuXHRcclxuXHQvL+eUu+iDjOaZr1xyXG5cdGNvbnRleHQuc2V0TGluZVdpZHRoKGdhdWdlT3B0aW9uLndpZHRoKTtcclxuXHRjb250ZXh0LnNldExpbmVDYXAoJ2J1dHQnKTsgXHJcblx0Y2F0ZWdvcmllcy5mb3JFYWNoKGZ1bmN0aW9uIChlYWNoQ2F0ZWdvcmllcykge1xyXG5cdFx0Y29udGV4dC5iZWdpblBhdGgoKTsgXHJcblx0XHRjb250ZXh0LnNldFN0cm9rZVN0eWxlKGVhY2hDYXRlZ29yaWVzLmNvbG9yKTsgXHJcblx0XHRjb250ZXh0LmFyYyhjZW50ZXJQb3NpdGlvbi54LCBjZW50ZXJQb3NpdGlvbi55LCByYWRpdXMsIGVhY2hDYXRlZ29yaWVzLl9zdGFydEFuZ2xlXyAqIE1hdGguUEksIGVhY2hDYXRlZ29yaWVzLl9lbmRBbmdsZV8gKiBNYXRoLlBJLCBmYWxzZSk7XHJcblx0XHRjb250ZXh0LnN0cm9rZSgpOyBcclxuXHR9KTtcclxuXHRjb250ZXh0LnNhdmUoKTtcclxuXHRcclxuXHQvL+eUu+WIu+W6pue6v1xyXG5cdGxldCB0b3RhbEFuZ2xlPWdhdWdlT3B0aW9uLnN0YXJ0QW5nbGUtZ2F1Z2VPcHRpb24uZW5kQW5nbGUrMTtcclxuXHRnYXVnZU9wdGlvbi5zcGxpdExpbmUuZml4UmFkaXVzPWdhdWdlT3B0aW9uLnNwbGl0TGluZS5maXhSYWRpdXM/IGdhdWdlT3B0aW9uLnNwbGl0TGluZS5maXhSYWRpdXMgOiAwO1xyXG5cdGdhdWdlT3B0aW9uLnNwbGl0TGluZS5zcGxpdE51bWJlcj1nYXVnZU9wdGlvbi5zcGxpdExpbmUuc3BsaXROdW1iZXI/IGdhdWdlT3B0aW9uLnNwbGl0TGluZS5zcGxpdE51bWJlciA6IDEwO1xyXG5cdGdhdWdlT3B0aW9uLnNwbGl0TGluZS53aWR0aD1nYXVnZU9wdGlvbi5zcGxpdExpbmUud2lkdGg/IGdhdWdlT3B0aW9uLnNwbGl0TGluZS53aWR0aCA6IDE1Km9wdHMucGl4ZWxSYXRpbyA7XHJcblx0Z2F1Z2VPcHRpb24uc3BsaXRMaW5lLmNvbG9yPWdhdWdlT3B0aW9uLnNwbGl0TGluZS5jb2xvcj8gZ2F1Z2VPcHRpb24uc3BsaXRMaW5lLmNvbG9yIDogJyNGRkZGRkYnO1xyXG5cdGdhdWdlT3B0aW9uLnNwbGl0TGluZS5jaGlsZE51bWJlcj1nYXVnZU9wdGlvbi5zcGxpdExpbmUuY2hpbGROdW1iZXI/IGdhdWdlT3B0aW9uLnNwbGl0TGluZS5jaGlsZE51bWJlciA6IDU7XHJcblx0Z2F1Z2VPcHRpb24uc3BsaXRMaW5lLmNoaWxkV2lkdGg9Z2F1Z2VPcHRpb24uc3BsaXRMaW5lLmNoaWxkV2lkdGg/IGdhdWdlT3B0aW9uLnNwbGl0TGluZS5jaGlsZFdpZHRoIDogNSpvcHRzLnBpeGVsUmF0aW87XHJcblx0XHJcblx0bGV0IHNwbGl0QW5nbGU9dG90YWxBbmdsZS9nYXVnZU9wdGlvbi5zcGxpdExpbmUuc3BsaXROdW1iZXI7XHJcblx0bGV0IGNoaWxkQW5nbGU9dG90YWxBbmdsZS9nYXVnZU9wdGlvbi5zcGxpdExpbmUuc3BsaXROdW1iZXIvZ2F1Z2VPcHRpb24uc3BsaXRMaW5lLmNoaWxkTnVtYmVyO1xyXG5cdGxldCBzdGFydFg9LXJhZGl1cy1nYXVnZU9wdGlvbi53aWR0aCowLjUtZ2F1Z2VPcHRpb24uc3BsaXRMaW5lLmZpeFJhZGl1cztcclxuXHRsZXQgZW5kWD0tcmFkaXVzLWdhdWdlT3B0aW9uLndpZHRoKjAuNS1nYXVnZU9wdGlvbi5zcGxpdExpbmUuZml4UmFkaXVzK2dhdWdlT3B0aW9uLnNwbGl0TGluZS53aWR0aDtcclxuXHRsZXQgY2hpbGRlbmRYPS1yYWRpdXMtZ2F1Z2VPcHRpb24ud2lkdGgqMC41LWdhdWdlT3B0aW9uLnNwbGl0TGluZS5maXhSYWRpdXMrZ2F1Z2VPcHRpb24uc3BsaXRMaW5lLmNoaWxkV2lkdGg7XHJcblx0XHJcblx0Y29udGV4dC50cmFuc2xhdGUoY2VudGVyUG9zaXRpb24ueCwgY2VudGVyUG9zaXRpb24ueSk7XHJcblx0Y29udGV4dC5yb3RhdGUoKGdhdWdlT3B0aW9uLnN0YXJ0QW5nbGUtMSkqIE1hdGguUEkpO1xyXG5cdFxyXG5cdGZvcihsZXQgaT0wIDsgaTwgZ2F1Z2VPcHRpb24uc3BsaXRMaW5lLnNwbGl0TnVtYmVyKzE7IGkrKyl7XHJcblx0XHRjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG5cdFx0Y29udGV4dC5zZXRTdHJva2VTdHlsZShnYXVnZU9wdGlvbi5zcGxpdExpbmUuY29sb3IpO1xyXG5cdFx0Y29udGV4dC5zZXRMaW5lV2lkdGgoMipvcHRzLnBpeGVsUmF0aW8pO1xyXG5cdFx0Y29udGV4dC5tb3ZlVG8oc3RhcnRYLCAwKTtcclxuXHRcdGNvbnRleHQubGluZVRvKGVuZFgsIDApO1xyXG5cdFx0Y29udGV4dC5zdHJva2UoKTtcclxuXHRcdGNvbnRleHQucm90YXRlKHNwbGl0QW5nbGUqIE1hdGguUEkpO1xyXG5cdH1cclxuXHRjb250ZXh0LnJlc3RvcmUoKTtcclxuXHRcclxuXHRjb250ZXh0LnNhdmUoKTtcclxuXHRjb250ZXh0LnRyYW5zbGF0ZShjZW50ZXJQb3NpdGlvbi54LCBjZW50ZXJQb3NpdGlvbi55KTtcclxuXHRjb250ZXh0LnJvdGF0ZSgoZ2F1Z2VPcHRpb24uc3RhcnRBbmdsZS0xKSogTWF0aC5QSSk7XHJcblx0XHJcblx0Zm9yKGxldCBpPTAgOyBpPCBnYXVnZU9wdGlvbi5zcGxpdExpbmUuc3BsaXROdW1iZXIqZ2F1Z2VPcHRpb24uc3BsaXRMaW5lLmNoaWxkTnVtYmVyKzE7IGkrKyl7XHJcblx0XHRjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG5cdFx0Y29udGV4dC5zZXRTdHJva2VTdHlsZShnYXVnZU9wdGlvbi5zcGxpdExpbmUuY29sb3IpO1xyXG5cdFx0Y29udGV4dC5zZXRMaW5lV2lkdGgoMSpvcHRzLnBpeGVsUmF0aW8pO1xyXG5cdFx0Y29udGV4dC5tb3ZlVG8oc3RhcnRYLCAwKTtcclxuXHRcdGNvbnRleHQubGluZVRvKGNoaWxkZW5kWCwgMCk7XHJcblx0XHRjb250ZXh0LnN0cm9rZSgpO1xyXG5cdFx0Y29udGV4dC5yb3RhdGUoY2hpbGRBbmdsZSogTWF0aC5QSSk7XHJcblx0fVxyXG5cdGNvbnRleHQucmVzdG9yZSgpO1xyXG5cdFxyXG5cdC8v55S75oyH6ZKIXHJcblx0Z2F1Z2VPcHRpb24ucG9pbnRlci53aWR0aD1nYXVnZU9wdGlvbi5wb2ludGVyLndpZHRoPyBnYXVnZU9wdGlvbi5wb2ludGVyLndpZHRoIDogMTUqb3B0cy5waXhlbFJhdGlvO1xyXG5cdGlmIChnYXVnZU9wdGlvbi5wb2ludGVyLmNvbG9yID09IHVuZGVmaW5lZCB8fCBnYXVnZU9wdGlvbi5wb2ludGVyLmNvbG9yID09ICdhdXRvJykge1xyXG5cdCAgICBnYXVnZU9wdGlvbi5wb2ludGVyLmNvbG9yID09ICdhdXRvJztcclxuXHR9ZWxzZXtcclxuXHRcdGdhdWdlT3B0aW9uLnBvaW50ZXIuY29sb3IgPT0gZ2F1Z2VPcHRpb24ucG9pbnRlci5jb2xvcjtcclxuXHR9XHJcblx0c2VyaWVzID0gZ2V0R2F1Z2VEYXRhUG9pbnRzKHNlcmllcyxjYXRlZ29yaWVzLGdhdWdlT3B0aW9uLCBwcm9jZXNzKTtcclxuXHRcclxuXHRzZXJpZXMuZm9yRWFjaChmdW5jdGlvbiAoZWFjaFNlcmllcykge1xyXG5cdFx0Y29udGV4dC5zYXZlKCk7XHJcblx0XHRjb250ZXh0LnRyYW5zbGF0ZShjZW50ZXJQb3NpdGlvbi54LCBjZW50ZXJQb3NpdGlvbi55KTtcclxuXHRcdGNvbnRleHQucm90YXRlKChlYWNoU2VyaWVzLl9wcm9wb3J0aW9uXy0xKSogTWF0aC5QSSk7XHJcblx0XHRjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG5cdFx0Y29udGV4dC5zZXRGaWxsU3R5bGUoZWFjaFNlcmllcy5jb2xvcik7XHJcblx0XHRjb250ZXh0Lm1vdmVUbyhnYXVnZU9wdGlvbi5wb2ludGVyLndpZHRoLCAwKTtcclxuXHRcdGNvbnRleHQubGluZVRvKDAsLWdhdWdlT3B0aW9uLnBvaW50ZXIud2lkdGgvMik7XHJcblx0XHRjb250ZXh0LmxpbmVUbygtaW5uZXJSYWRpdXMsMCk7XHJcblx0XHRjb250ZXh0LmxpbmVUbygwLGdhdWdlT3B0aW9uLnBvaW50ZXIud2lkdGgvMik7XHJcblx0XHRjb250ZXh0LmxpbmVUbyhnYXVnZU9wdGlvbi5wb2ludGVyLndpZHRoLDApO1xyXG5cdFx0Y29udGV4dC5jbG9zZVBhdGgoKTtcclxuXHRcdGNvbnRleHQuZmlsbCgpO1xyXG5cdFx0Y29udGV4dC5iZWdpblBhdGgoKTsgXHJcblx0XHRjb250ZXh0LnNldEZpbGxTdHlsZSgnI0ZGRkZGRicpO1xyXG5cdFx0Y29udGV4dC5hcmMoMCwgMCwgZ2F1Z2VPcHRpb24ucG9pbnRlci53aWR0aC82LCAwLDIqIE1hdGguUEksIGZhbHNlKTtcclxuXHRcdGNvbnRleHQuZmlsbCgpO1xyXG5cdFx0Y29udGV4dC5yZXN0b3JlKCk7XHJcblx0fSk7XHJcblx0XHJcblx0aWYgKG9wdHMuZGF0YUxhYmVsICE9PSBmYWxzZSkge1xyXG5cdFx0ZHJhd0dhdWdlTGFiZWwoZ2F1Z2VPcHRpb24sIHJhZGl1cywgY2VudGVyUG9zaXRpb24sIG9wdHMsIGNvbmZpZywgY29udGV4dCk7XHJcblx0fVxyXG5cdFxyXG5cdGRyYXdSaW5nVGl0bGUob3B0cywgY29uZmlnLCBjb250ZXh0KTtcclxuXHRcclxuXHRpZiAocHJvY2VzcyA9PT0gMSAmJiBvcHRzLnR5cGUgPT09ICdnYXVnZScpIHtcclxuXHRcdGdhdWdlT3B0aW9uLm9sZEFuZ2xlPXNlcmllc1swXS5fcHJvcG9ydGlvbl87XHJcblx0XHRnYXVnZU9wdGlvbi5vbGREYXRhPXNlcmllc1swXS5kYXRhO1xyXG5cdH1cclxuXHRyZXR1cm4ge1xyXG5cdCAgICBjZW50ZXI6IGNlbnRlclBvc2l0aW9uLFxyXG5cdCAgICByYWRpdXM6IHJhZGl1cyxcclxuXHRcdGlubmVyUmFkaXVzOmlubmVyUmFkaXVzLFxyXG5cdCAgICBjYXRlZ29yaWVzOiBjYXRlZ29yaWVzLFxyXG5cdFx0dG90YWxBbmdsZTp0b3RhbEFuZ2xlXHJcblx0fTtcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd1JhZGFyRGF0YVBvaW50cyhzZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCkge1xyXG4gICAgdmFyIHByb2Nlc3MgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IDE7XHJcblxyXG4gICAgdmFyIHJhZGFyT3B0aW9uID0gb3B0cy5leHRyYS5yYWRhciB8fCB7fTtcclxuICAgIHZhciBjb29yZGluYXRlQW5nbGUgPSBnZXRSYWRhckNvb3JkaW5hdGVTZXJpZXMob3B0cy5jYXRlZ29yaWVzLmxlbmd0aCk7XHJcbiAgICB2YXIgY2VudGVyUG9zaXRpb24gPSB7XHJcbiAgICAgICAgeDogb3B0cy53aWR0aCAvIDIsXHJcbiAgICAgICAgeTogKG9wdHMuaGVpZ2h0IC0gY29uZmlnLmxlZ2VuZEhlaWdodCkgLyAyXHJcbiAgICB9O1xyXG5cclxuICAgIHZhciByYWRpdXMgPSBNYXRoLm1pbihjZW50ZXJQb3NpdGlvbi54IC0gKGdldE1heFRleHRMaXN0TGVuZ3RoKG9wdHMuY2F0ZWdvcmllcykgKyBjb25maWcucmFkYXJMYWJlbFRleHRNYXJnaW4pLCBjZW50ZXJQb3NpdGlvbi55IC0gY29uZmlnLnJhZGFyTGFiZWxUZXh0TWFyZ2luKTtcclxuXHJcbiAgICByYWRpdXMgLT0gY29uZmlnLnBhZGRpbmc7XHJcblxyXG4gICAgLy8gZHJhdyBncmlkXHJcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgY29udGV4dC5zZXRMaW5lV2lkdGgoMSpvcHRzLnBpeGVsUmF0aW8pO1xyXG4gICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShyYWRhck9wdGlvbi5ncmlkQ29sb3IgfHwgXCIjY2NjY2NjXCIpO1xyXG4gICAgY29vcmRpbmF0ZUFuZ2xlLmZvckVhY2goZnVuY3Rpb24gKGFuZ2xlKSB7XHJcbiAgICAgICAgdmFyIHBvcyA9IGNvbnZlcnRDb29yZGluYXRlT3JpZ2luKHJhZGl1cyAqIE1hdGguY29zKGFuZ2xlKSwgcmFkaXVzICogTWF0aC5zaW4oYW5nbGUpLCBjZW50ZXJQb3NpdGlvbik7XHJcbiAgICAgICAgY29udGV4dC5tb3ZlVG8oY2VudGVyUG9zaXRpb24ueCwgY2VudGVyUG9zaXRpb24ueSk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8ocG9zLngsIHBvcy55KTtcclxuICAgIH0pO1xyXG4gICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgIGNvbnRleHQuY2xvc2VQYXRoKCk7XHJcblxyXG4gICAgLy8gZHJhdyBzcGxpdCBsaW5lIGdyaWRcclxuXHJcbiAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChpKSB7XHJcbiAgICAgICAgdmFyIHN0YXJ0UG9zID0ge307XHJcbiAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICBjb250ZXh0LnNldExpbmVXaWR0aCgxKm9wdHMucGl4ZWxSYXRpbyk7XHJcbiAgICAgICAgY29udGV4dC5zZXRTdHJva2VTdHlsZShyYWRhck9wdGlvbi5ncmlkQ29sb3IgfHwgXCIjY2NjY2NjXCIpO1xyXG4gICAgICAgIGNvb3JkaW5hdGVBbmdsZS5mb3JFYWNoKGZ1bmN0aW9uIChhbmdsZSwgaW5kZXgpIHtcclxuICAgICAgICAgICAgdmFyIHBvcyA9IGNvbnZlcnRDb29yZGluYXRlT3JpZ2luKHJhZGl1cyAvIGNvbmZpZy5yYWRhckdyaWRDb3VudCAqIGkgKiBNYXRoLmNvcyhhbmdsZSksIHJhZGl1cyAvIGNvbmZpZy5yYWRhckdyaWRDb3VudCAqIGkgKiBNYXRoLnNpbihhbmdsZSksIGNlbnRlclBvc2l0aW9uKTtcclxuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBzdGFydFBvcyA9IHBvcztcclxuICAgICAgICAgICAgICAgIGNvbnRleHQubW92ZVRvKHBvcy54LCBwb3MueSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmxpbmVUbyhwb3MueCwgcG9zLnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29udGV4dC5saW5lVG8oc3RhcnRQb3MueCwgc3RhcnRQb3MueSk7XHJcbiAgICAgICAgY29udGV4dC5zdHJva2UoKTtcclxuICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8PSBjb25maWcucmFkYXJHcmlkQ291bnQ7IGkrKykge1xyXG4gICAgICAgIF9sb29wKGkpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciByYWRhckRhdGFQb2ludHMgPSBnZXRSYWRhckRhdGFQb2ludHMoY29vcmRpbmF0ZUFuZ2xlLCBjZW50ZXJQb3NpdGlvbiwgcmFkaXVzLCBzZXJpZXMsIG9wdHMsIHByb2Nlc3MpO1xyXG5cdFxyXG4gICAgcmFkYXJEYXRhUG9pbnRzLmZvckVhY2goZnVuY3Rpb24gKGVhY2hTZXJpZXMsIHNlcmllc0luZGV4KSB7XHJcbiAgICAgICAgLy8g57uY5Yi25Yy65Z+f5pWw5o2uXHJcbiAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcclxuICAgICAgICBjb250ZXh0LnNldEZpbGxTdHlsZShlYWNoU2VyaWVzLmNvbG9yKTtcclxuICAgICAgICBjb250ZXh0LnNldEdsb2JhbEFscGhhKDAuMyk7XHJcbiAgICAgICAgZWFjaFNlcmllcy5kYXRhLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5tb3ZlVG8oaXRlbS5wb3NpdGlvbi54LCBpdGVtLnBvc2l0aW9uLnkpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5saW5lVG8oaXRlbS5wb3NpdGlvbi54LCBpdGVtLnBvc2l0aW9uLnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcclxuICAgICAgICBjb250ZXh0LmZpbGwoKTtcclxuICAgICAgICBjb250ZXh0LnNldEdsb2JhbEFscGhhKDEpO1xyXG5cclxuICAgICAgICBpZiAob3B0cy5kYXRhUG9pbnRTaGFwZSAhPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgdmFyIHNoYXBlID0gY29uZmlnLmRhdGFQb2ludFNoYXBlW3Nlcmllc0luZGV4ICUgY29uZmlnLmRhdGFQb2ludFNoYXBlLmxlbmd0aF07XHJcbiAgICAgICAgICAgIHZhciBwb2ludHMgPSBlYWNoU2VyaWVzLmRhdGEubWFwKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5wb3NpdGlvbjtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGRyYXdQb2ludFNoYXBlKHBvaW50cywgZWFjaFNlcmllcy5jb2xvciwgc2hhcGUsIGNvbnRleHQsb3B0cyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICAvLyBkcmF3IGxhYmVsIHRleHRcclxuICAgIGRyYXdSYWRhckxhYmVsKGNvb3JkaW5hdGVBbmdsZSwgcmFkaXVzLCBjZW50ZXJQb3NpdGlvbiwgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGNlbnRlcjogY2VudGVyUG9zaXRpb24sXHJcbiAgICAgICAgcmFkaXVzOiByYWRpdXMsXHJcbiAgICAgICAgYW5nbGVMaXN0OiBjb29yZGluYXRlQW5nbGVcclxuICAgIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyYXdDYW52YXMob3B0cywgY29udGV4dCkge1xyXG4gICAgY29udGV4dC5kcmF3KCk7XHJcbn1cclxuXHJcbnZhciBUaW1pbmcgPSB7XHJcbiAgICBlYXNlSW46IGZ1bmN0aW9uIGVhc2VJbihwb3MpIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5wb3cocG9zLCAzKTtcclxuICAgIH0sXHJcblxyXG4gICAgZWFzZU91dDogZnVuY3Rpb24gZWFzZU91dChwb3MpIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5wb3cocG9zIC0gMSwgMykgKyAxO1xyXG4gICAgfSxcclxuXHJcbiAgICBlYXNlSW5PdXQ6IGZ1bmN0aW9uIGVhc2VJbk91dChwb3MpIHtcclxuICAgICAgICBpZiAoKHBvcyAvPSAwLjUpIDwgMSkge1xyXG4gICAgICAgICAgICByZXR1cm4gMC41ICogTWF0aC5wb3cocG9zLCAzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gMC41ICogKE1hdGgucG93KHBvcyAtIDIsIDMpICsgMik7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBsaW5lYXI6IGZ1bmN0aW9uIGxpbmVhcihwb3MpIHtcclxuICAgICAgICByZXR1cm4gcG9zO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZnVuY3Rpb24gQW5pbWF0aW9uKG9wdHMpIHtcclxuICAgIHRoaXMuaXNTdG9wID0gZmFsc2U7XHJcbiAgICBvcHRzLmR1cmF0aW9uID0gdHlwZW9mIG9wdHMuZHVyYXRpb24gPT09ICd1bmRlZmluZWQnID8gMTAwMCA6IG9wdHMuZHVyYXRpb247XHJcbiAgICBvcHRzLnRpbWluZyA9IG9wdHMudGltaW5nIHx8ICdsaW5lYXInO1xyXG5cclxuICAgIHZhciBkZWxheSA9IDE3O1xyXG5cclxuICAgIHZhciBjcmVhdGVBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uIGNyZWF0ZUFuaW1hdGlvbkZyYW1lKCkge1xyXG5cdFx0XHJcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgIT09ICd1bmRlZmluZWQnKSB7XHJcblx0XHRcdHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc2V0VGltZW91dCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuXHRcdFx0XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoc3RlcCwgZGVsYXkpIHtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aW1lU3RhbXAgPSArbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBzdGVwKHRpbWVTdGFtcCk7XHJcbiAgICAgICAgICAgICAgICB9LCBkZWxheSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuXHRcdFx0XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoc3RlcCkge1xyXG4gICAgICAgICAgICAgICAgc3RlcChudWxsKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgdmFyIGFuaW1hdGlvbkZyYW1lID0gY3JlYXRlQW5pbWF0aW9uRnJhbWUoKTtcclxuICAgIHZhciBzdGFydFRpbWVTdGFtcCA9IG51bGw7XHJcblx0XHJcbiAgICB2YXIgX3N0ZXAgPSBmdW5jdGlvbiBzdGVwKHRpbWVzdGFtcCkge1xyXG5cdFx0XHJcbiAgICAgICAgaWYgKHRpbWVzdGFtcCA9PT0gbnVsbCB8fCB0aGlzLmlzU3RvcCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBvcHRzLm9uUHJvY2VzcyAmJiBvcHRzLm9uUHJvY2VzcygxKTtcclxuICAgICAgICAgICAgb3B0cy5vbkFuaW1hdGlvbkZpbmlzaCAmJiBvcHRzLm9uQW5pbWF0aW9uRmluaXNoKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHN0YXJ0VGltZVN0YW1wID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHN0YXJ0VGltZVN0YW1wID0gdGltZXN0YW1wO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGltZXN0YW1wIC0gc3RhcnRUaW1lU3RhbXAgPCBvcHRzLmR1cmF0aW9uKSB7XHJcbiAgICAgICAgICAgIHZhciBwcm9jZXNzID0gKHRpbWVzdGFtcCAtIHN0YXJ0VGltZVN0YW1wKSAvIG9wdHMuZHVyYXRpb247XHJcbiAgICAgICAgICAgIHZhciB0aW1pbmdGdW5jdGlvbiA9IFRpbWluZ1tvcHRzLnRpbWluZ107XHJcbiAgICAgICAgICAgIHByb2Nlc3MgPSB0aW1pbmdGdW5jdGlvbihwcm9jZXNzKTtcclxuXHRcdFx0XHJcbiAgICAgICAgICAgIG9wdHMub25Qcm9jZXNzICYmIG9wdHMub25Qcm9jZXNzKHByb2Nlc3MpO1xyXG4gICAgICAgICAgICBhbmltYXRpb25GcmFtZShfc3RlcCwgZGVsYXkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG9wdHMub25Qcm9jZXNzICYmIG9wdHMub25Qcm9jZXNzKDEpO1xyXG4gICAgICAgICAgICBvcHRzLm9uQW5pbWF0aW9uRmluaXNoICYmIG9wdHMub25BbmltYXRpb25GaW5pc2goKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgX3N0ZXAgPSBfc3RlcC5iaW5kKHRoaXMpO1xyXG4gICAgYW5pbWF0aW9uRnJhbWUoX3N0ZXAsIGRlbGF5KTtcclxufVxyXG5cclxuLy8gc3RvcCBhbmltYXRpb24gaW1tZWRpYXRlbHlcclxuLy8gYW5kIHRpZ2dlciBvbkFuaW1hdGlvbkZpbmlzaFxyXG5BbmltYXRpb24ucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLmlzU3RvcCA9IHRydWU7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBkcmF3Q2hhcnRzKHR5cGUsIG9wdHMsIGNvbmZpZywgY29udGV4dCkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICB2YXIgc2VyaWVzID0gb3B0cy5zZXJpZXM7XHJcbiAgICB2YXIgY2F0ZWdvcmllcyA9IG9wdHMuY2F0ZWdvcmllcztcclxuICAgIHNlcmllcyA9IGZpbGxTZXJpZXNDb2xvcihzZXJpZXMsIGNvbmZpZyk7XHJcblx0c2VyaWVzID0gZmlsbFNlcmllc1R5cGUoc2VyaWVzLCBvcHRzKTtcclxuXHRsZXQgc2VyaWVzTUEgPSBudWxsO1xyXG5cdFxyXG5cdFxyXG5cdGlmKHR5cGUgPT0gJ2NhbmRsZScpe1xyXG5cdFx0bGV0IGF2ZXJhZ2UgPSBhc3NpZ24oe30sb3B0cy5leHRyYS5jYW5kbGUuYXZlcmFnZSk7XHJcblx0XHRpZihhdmVyYWdlLnNob3cpe1xyXG5cdFx0XHRzZXJpZXNNQSA9IGNhbENhbmRsZU1BKGF2ZXJhZ2UuZGF5LCBhdmVyYWdlLm5hbWUsIGF2ZXJhZ2UuY29sb3IsIHNlcmllc1swXS5kYXRhKTtcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcbiAgICB2YXIgX2NhbExlZ2VuZERhdGEgPSBjYWxMZWdlbmREYXRhKHNlcmllcywgb3B0cywgY29uZmlnKSxcclxuICAgICAgICBsZWdlbmRIZWlnaHQgPSBfY2FsTGVnZW5kRGF0YS5sZWdlbmRIZWlnaHQ7XHJcblxyXG4gICAgY29uZmlnLmxlZ2VuZEhlaWdodCA9IGxlZ2VuZEhlaWdodDtcclxuXHJcbiAgICB2YXIgX2NhbFlBeGlzRGF0YSA9IGNhbFlBeGlzRGF0YShzZXJpZXMsIG9wdHMsIGNvbmZpZyksXHJcbiAgICAgICAgeUF4aXNXaWR0aCA9IF9jYWxZQXhpc0RhdGEueUF4aXNXaWR0aDtcclxuXHJcbiAgICBjb25maWcueUF4aXNXaWR0aCA9IHlBeGlzV2lkdGg7XHJcbiAgICBpZiAoY2F0ZWdvcmllcyAmJiBjYXRlZ29yaWVzLmxlbmd0aCkge1xyXG4gICAgICAgIHZhciBfY2FsQ2F0ZWdvcmllc0RhdGEgPSBjYWxDYXRlZ29yaWVzRGF0YShjYXRlZ29yaWVzLCBvcHRzLCBjb25maWcpLFxyXG4gICAgICAgICAgICB4QXhpc0hlaWdodCA9IF9jYWxDYXRlZ29yaWVzRGF0YS54QXhpc0hlaWdodCxcclxuICAgICAgICAgICAgYW5nbGUgPSBfY2FsQ2F0ZWdvcmllc0RhdGEuYW5nbGU7XHJcblxyXG4gICAgICAgIGNvbmZpZy54QXhpc0hlaWdodCA9IHhBeGlzSGVpZ2h0O1xyXG4gICAgICAgIGNvbmZpZy5feEF4aXNUZXh0QW5nbGVfID0gYW5nbGU7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZSA9PT0gJ3BpZScgfHwgdHlwZSA9PT0gJ3JpbmcnKSB7XHJcbiAgICAgICAgY29uZmlnLl9waWVUZXh0TWF4TGVuZ3RoXyA9IG9wdHMuZGF0YUxhYmVsID09PSBmYWxzZSA/IDAgOiBnZXRQaWVUZXh0TWF4TGVuZ3RoKHNlcmllcyk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGR1cmF0aW9uID0gb3B0cy5hbmltYXRpb24gPyAxMDAwIDogMDtcclxuICAgIHRoaXMuYW5pbWF0aW9uSW5zdGFuY2UgJiYgdGhpcy5hbmltYXRpb25JbnN0YW5jZS5zdG9wKCk7XHJcblx0XHJcblx0Ly/lhYjmuIXnqbrnlLvluIMs5LiN54S255m+5bqm5ZKM5pSv5LuY5a6dVG9vbFRpcOaciemHjeW9sVxyXG5cdGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIG9wdHMud2lkdGgsIG9wdHMuaGVpZ2h0KTtcclxuXHRcclxuXHRcclxuICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgIGNhc2UgJ2xpbmUnOlxyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbkluc3RhbmNlID0gbmV3IEFuaW1hdGlvbih7XHJcbiAgICAgICAgICAgICAgICB0aW1pbmc6ICdlYXNlSW4nLFxyXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxyXG4gICAgICAgICAgICAgICAgb25Qcm9jZXNzOiBmdW5jdGlvbiBvblByb2Nlc3MocHJvY2Vzcykge1xyXG5cdFx0XHRcdFx0aWYob3B0cy5yb3RhdGUpe1xyXG5cdFx0XHRcdFx0XHRjb250ZXh0Um90YXRlKGNvbnRleHQsb3B0cyk7XHJcblx0XHRcdFx0XHR9XHJcbiAgICAgICAgICAgICAgICAgICAgZHJhd1lBeGlzR3JpZChjYXRlZ29yaWVzLG9wdHMsIGNvbmZpZywgY29udGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZHJhd1hBeGlzKGNhdGVnb3JpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9kcmF3TGluZURhdGFQb2ludHMgPSBkcmF3TGluZURhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIHByb2Nlc3MpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4QXhpc1BvaW50cyA9IF9kcmF3TGluZURhdGFQb2ludHMueEF4aXNQb2ludHMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbFBvaW50cyA9IF9kcmF3TGluZURhdGFQb2ludHMuY2FsUG9pbnRzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlYWNoU3BhY2luZyA9IF9kcmF3TGluZURhdGFQb2ludHMuZWFjaFNwYWNpbmc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNoYXJ0RGF0YS54QXhpc1BvaW50cyA9IHhBeGlzUG9pbnRzO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNoYXJ0RGF0YS5jYWxQb2ludHMgPSBjYWxQb2ludHM7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY2hhcnREYXRhLmVhY2hTcGFjaW5nID0gZWFjaFNwYWNpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgZHJhd0xlZ2VuZChvcHRzLnNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICBkcmF3WUF4aXMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpO1xyXG5cdFx0XHRcdFx0ZHJhd1Rvb2xUaXBCcmlkZ2Uob3B0cywgY29uZmlnLCBjb250ZXh0LCBwcm9jZXNzLCBlYWNoU3BhY2luZywgeEF4aXNQb2ludHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRyYXdDYW52YXMob3B0cywgY29udGV4dCk7XHJcblx0XHRcdFx0XHRcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBvbkFuaW1hdGlvbkZpbmlzaDogZnVuY3Rpb24gb25BbmltYXRpb25GaW5pc2goKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZXZlbnQudHJpZ2dlcigncmVuZGVyQ29tcGxldGUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblx0XHRcdFxyXG4gICAgICAgICAgICBicmVhaztcclxuXHRcdGNhc2UgJ21peCc6XHJcblx0XHQgICAgdGhpcy5hbmltYXRpb25JbnN0YW5jZSA9IG5ldyBBbmltYXRpb24oe1xyXG5cdFx0ICAgICAgICB0aW1pbmc6ICdlYXNlSW4nLFxyXG5cdFx0ICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXHJcblx0XHQgICAgICAgIG9uUHJvY2VzczogZnVuY3Rpb24gb25Qcm9jZXNzKHByb2Nlc3MpIHtcclxuXHRcdFx0XHRcdGlmKG9wdHMucm90YXRlKXtcclxuXHRcdFx0XHRcdFx0Y29udGV4dFJvdGF0ZShjb250ZXh0LG9wdHMpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0ICAgICAgICAgICAgZHJhd1lBeGlzR3JpZChjYXRlZ29yaWVzLG9wdHMsIGNvbmZpZywgY29udGV4dCk7XHJcblx0XHQgICAgICAgICAgICBkcmF3WEF4aXMoY2F0ZWdvcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcclxuXHRcdCAgICAgICAgICAgIHZhciBfZHJhd01peERhdGFQb2ludHMgPSBkcmF3TWl4RGF0YVBvaW50cyhzZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCwgcHJvY2VzcyksXHJcblx0XHQgICAgICAgICAgICAgICAgeEF4aXNQb2ludHMgPSBfZHJhd01peERhdGFQb2ludHMueEF4aXNQb2ludHMsXHJcblx0XHQgICAgICAgICAgICAgICAgY2FsUG9pbnRzID0gX2RyYXdNaXhEYXRhUG9pbnRzLmNhbFBvaW50cyxcclxuXHRcdCAgICAgICAgICAgICAgICBlYWNoU3BhY2luZyA9IF9kcmF3TWl4RGF0YVBvaW50cy5lYWNoU3BhY2luZztcclxuXHRcdFxyXG5cdFx0ICAgICAgICAgICAgX3RoaXMuY2hhcnREYXRhLnhBeGlzUG9pbnRzID0geEF4aXNQb2ludHM7XHJcblx0XHQgICAgICAgICAgICBfdGhpcy5jaGFydERhdGEuY2FsUG9pbnRzID0gY2FsUG9pbnRzO1xyXG5cdFx0ICAgICAgICAgICAgX3RoaXMuY2hhcnREYXRhLmVhY2hTcGFjaW5nID0gZWFjaFNwYWNpbmc7XHJcblx0XHQgICAgICAgICAgICBkcmF3TGVnZW5kKG9wdHMuc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpO1xyXG5cdFx0ICAgICAgICAgICAgZHJhd1lBeGlzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcclxuXHRcdFx0XHRcdGRyYXdUb29sVGlwQnJpZGdlKG9wdHMsIGNvbmZpZywgY29udGV4dCwgcHJvY2VzcywgZWFjaFNwYWNpbmcsIHhBeGlzUG9pbnRzKTtcclxuXHRcdCAgICAgICAgICAgIGRyYXdDYW52YXMob3B0cywgY29udGV4dCk7XHJcblx0XHQgICAgICAgIH0sXHJcblx0XHQgICAgICAgIG9uQW5pbWF0aW9uRmluaXNoOiBmdW5jdGlvbiBvbkFuaW1hdGlvbkZpbmlzaCgpIHtcclxuXHRcdCAgICAgICAgICAgIF90aGlzLmV2ZW50LnRyaWdnZXIoJ3JlbmRlckNvbXBsZXRlJyk7XHJcblx0XHQgICAgICAgIH1cclxuXHRcdCAgICB9KTtcclxuXHRcdFx0XHJcblx0XHQgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnY29sdW1uJzpcclxuXHRcdCAgICB0aGlzLmFuaW1hdGlvbkluc3RhbmNlID0gbmV3IEFuaW1hdGlvbih7XHJcbiAgICAgICAgICAgICAgICB0aW1pbmc6ICdlYXNlSW4nLFxyXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxyXG4gICAgICAgICAgICAgICAgb25Qcm9jZXNzOiBmdW5jdGlvbiBvblByb2Nlc3MocHJvY2Vzcykge1xyXG5cdFx0XHRcdFx0aWYob3B0cy5yb3RhdGUpe1xyXG5cdFx0XHRcdFx0XHRjb250ZXh0Um90YXRlKGNvbnRleHQsb3B0cyk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRkcmF3WUF4aXNHcmlkKGNhdGVnb3JpZXMsb3B0cywgY29uZmlnLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICBkcmF3WEF4aXMoY2F0ZWdvcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgX2RyYXdDb2x1bW5EYXRhUG9pbnRzID0gZHJhd0NvbHVtbkRhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIHByb2Nlc3MpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4QXhpc1BvaW50cyA9IF9kcmF3Q29sdW1uRGF0YVBvaW50cy54QXhpc1BvaW50cyxcclxuXHRcdFx0XHRcdFx0Y2FsUG9pbnRzID0gX2RyYXdDb2x1bW5EYXRhUG9pbnRzLmNhbFBvaW50cyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWFjaFNwYWNpbmcgPSBfZHJhd0NvbHVtbkRhdGFQb2ludHMuZWFjaFNwYWNpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY2hhcnREYXRhLnhBeGlzUG9pbnRzID0geEF4aXNQb2ludHM7XHJcblx0XHRcdFx0XHRfdGhpcy5jaGFydERhdGEuY2FsUG9pbnRzID0gY2FsUG9pbnRzO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNoYXJ0RGF0YS5lYWNoU3BhY2luZyA9IGVhY2hTcGFjaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIGRyYXdMZWdlbmQob3B0cy5zZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZHJhd1lBeGlzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcclxuXHRcdFx0XHRcdGRyYXdUb29sVGlwQnJpZGdlKG9wdHMsIGNvbmZpZywgY29udGV4dCwgcHJvY2VzcywgZWFjaFNwYWNpbmcsIHhBeGlzUG9pbnRzKTtcclxuICAgICAgICAgICAgICAgICAgICBkcmF3Q2FudmFzKG9wdHMsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIG9uQW5pbWF0aW9uRmluaXNoOiBmdW5jdGlvbiBvbkFuaW1hdGlvbkZpbmlzaCgpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5ldmVudC50cmlnZ2VyKCdyZW5kZXJDb21wbGV0ZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnYXJlYSc6XHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uSW5zdGFuY2UgPSBuZXcgQW5pbWF0aW9uKHtcclxuICAgICAgICAgICAgICAgIHRpbWluZzogJ2Vhc2VJbicsXHJcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXHJcbiAgICAgICAgICAgICAgICBvblByb2Nlc3M6IGZ1bmN0aW9uIG9uUHJvY2Vzcyhwcm9jZXNzKSB7XHJcblx0XHRcdFx0XHRpZihvcHRzLnJvdGF0ZSl7XHJcblx0XHRcdFx0XHRcdGNvbnRleHRSb3RhdGUoY29udGV4dCxvcHRzKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGRyYXdZQXhpc0dyaWQoY2F0ZWdvcmllcyxvcHRzLCBjb25maWcsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRyYXdYQXhpcyhjYXRlZ29yaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBfZHJhd0FyZWFEYXRhUG9pbnRzID0gZHJhd0FyZWFEYXRhUG9pbnRzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0LCBwcm9jZXNzKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeEF4aXNQb2ludHMgPSBfZHJhd0FyZWFEYXRhUG9pbnRzLnhBeGlzUG9pbnRzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxQb2ludHMgPSBfZHJhd0FyZWFEYXRhUG9pbnRzLmNhbFBvaW50cyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWFjaFNwYWNpbmcgPSBfZHJhd0FyZWFEYXRhUG9pbnRzLmVhY2hTcGFjaW5nO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jaGFydERhdGEueEF4aXNQb2ludHMgPSB4QXhpc1BvaW50cztcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jaGFydERhdGEuY2FsUG9pbnRzID0gY2FsUG9pbnRzO1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNoYXJ0RGF0YS5lYWNoU3BhY2luZyA9IGVhY2hTcGFjaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIGRyYXdMZWdlbmQob3B0cy5zZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZHJhd1lBeGlzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcclxuXHRcdFx0XHRcdGRyYXdUb29sVGlwQnJpZGdlKG9wdHMsIGNvbmZpZywgY29udGV4dCwgcHJvY2VzcywgZWFjaFNwYWNpbmcsIHhBeGlzUG9pbnRzKTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBkcmF3Q2FudmFzKG9wdHMsIGNvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIG9uQW5pbWF0aW9uRmluaXNoOiBmdW5jdGlvbiBvbkFuaW1hdGlvbkZpbmlzaCgpIHtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5ldmVudC50cmlnZ2VyKCdyZW5kZXJDb21wbGV0ZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAncmluZyc6XHJcbiAgICAgICAgY2FzZSAncGllJzpcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25JbnN0YW5jZSA9IG5ldyBBbmltYXRpb24oe1xyXG4gICAgICAgICAgICAgICAgdGltaW5nOiAnZWFzZUluT3V0JyxcclxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcclxuICAgICAgICAgICAgICAgIG9uUHJvY2VzczogZnVuY3Rpb24gb25Qcm9jZXNzKHByb2Nlc3MpIHtcclxuXHRcdFx0XHRcdGlmKG9wdHMucm90YXRlKXtcclxuXHRcdFx0XHRcdFx0Y29udGV4dFJvdGF0ZShjb250ZXh0LG9wdHMpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0X3RoaXMuY2hhcnREYXRhLnBpZURhdGEgPSBkcmF3UGllRGF0YVBvaW50cyhzZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCwgcHJvY2Vzcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZHJhd0xlZ2VuZChvcHRzLnNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcclxuXHRcdFx0XHRcdGRyYXdUb29sVGlwQnJpZGdlKG9wdHMsIGNvbmZpZywgY29udGV4dCwgcHJvY2Vzcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZHJhd0NhbnZhcyhvcHRzLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBvbkFuaW1hdGlvbkZpbmlzaDogZnVuY3Rpb24gb25BbmltYXRpb25GaW5pc2goKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZXZlbnQudHJpZ2dlcigncmVuZGVyQ29tcGxldGUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3JhZGFyJzpcclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25JbnN0YW5jZSA9IG5ldyBBbmltYXRpb24oe1xyXG4gICAgICAgICAgICAgICAgdGltaW5nOiAnZWFzZUluT3V0JyxcclxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcclxuICAgICAgICAgICAgICAgIG9uUHJvY2VzczogZnVuY3Rpb24gb25Qcm9jZXNzKHByb2Nlc3MpIHtcclxuXHRcdFx0XHRcdGlmKG9wdHMucm90YXRlKXtcclxuXHRcdFx0XHRcdFx0Y29udGV4dFJvdGF0ZShjb250ZXh0LG9wdHMpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0X3RoaXMuY2hhcnREYXRhLnJhZGFyRGF0YSA9IGRyYXdSYWRhckRhdGFQb2ludHMoc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQsIHByb2Nlc3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRyYXdMZWdlbmQob3B0cy5zZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZHJhd0NhbnZhcyhvcHRzLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBvbkFuaW1hdGlvbkZpbmlzaDogZnVuY3Rpb24gb25BbmltYXRpb25GaW5pc2goKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZXZlbnQudHJpZ2dlcigncmVuZGVyQ29tcGxldGUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cdFx0Y2FzZSAnYXJjYmFyJzpcclxuXHRcdFx0dGhpcy5hbmltYXRpb25JbnN0YW5jZSA9IG5ldyBBbmltYXRpb24oe1xyXG5cdFx0XHQgICAgdGltaW5nOiAnZWFzZUluT3V0JyxcclxuXHRcdFx0ICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcclxuXHRcdFx0ICAgIG9uUHJvY2VzczogZnVuY3Rpb24gb25Qcm9jZXNzKHByb2Nlc3MpIHtcclxuXHRcdFx0XHRcdGlmKG9wdHMucm90YXRlKXtcclxuXHRcdFx0XHRcdFx0Y29udGV4dFJvdGF0ZShjb250ZXh0LG9wdHMpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0X3RoaXMuY2hhcnREYXRhLmFyY2JhckRhdGEgPSBkcmF3QXJjYmFyRGF0YVBvaW50cyhzZXJpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCwgcHJvY2Vzcyk7XHJcblx0XHRcdCAgICAgICAgZHJhd0NhbnZhcyhvcHRzLCBjb250ZXh0KTtcclxuXHRcdFx0ICAgIH0sXHJcblx0XHRcdCAgICBvbkFuaW1hdGlvbkZpbmlzaDogZnVuY3Rpb24gb25BbmltYXRpb25GaW5pc2goKSB7XHJcblx0XHRcdCAgICAgICAgX3RoaXMuZXZlbnQudHJpZ2dlcigncmVuZGVyQ29tcGxldGUnKTtcclxuXHRcdFx0ICAgIH1cclxuXHRcdFx0fSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSAnZ2F1Z2UnOlxyXG5cdFx0XHR0aGlzLmFuaW1hdGlvbkluc3RhbmNlID0gbmV3IEFuaW1hdGlvbih7XHJcblx0XHRcdCAgICB0aW1pbmc6ICdlYXNlSW5PdXQnLFxyXG5cdFx0XHQgICAgZHVyYXRpb246IGR1cmF0aW9uLFxyXG5cdFx0XHQgICAgb25Qcm9jZXNzOiBmdW5jdGlvbiBvblByb2Nlc3MocHJvY2Vzcykge1xyXG5cdFx0XHRcdFx0aWYob3B0cy5yb3RhdGUpe1xyXG5cdFx0XHRcdFx0XHRjb250ZXh0Um90YXRlKGNvbnRleHQsb3B0cyk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRfdGhpcy5jaGFydERhdGEuZ2F1Z2VEYXRhID0gZHJhd0dhdWdlRGF0YVBvaW50cyhjYXRlZ29yaWVzLCBzZXJpZXMsb3B0cywgY29uZmlnLCBjb250ZXh0LCBwcm9jZXNzKTtcclxuXHRcdFx0ICAgICAgICBkcmF3Q2FudmFzKG9wdHMsIGNvbnRleHQpO1xyXG5cdFx0XHQgICAgfSxcclxuXHRcdFx0ICAgIG9uQW5pbWF0aW9uRmluaXNoOiBmdW5jdGlvbiBvbkFuaW1hdGlvbkZpbmlzaCgpIHtcclxuXHRcdFx0ICAgICAgICBfdGhpcy5ldmVudC50cmlnZ2VyKCdyZW5kZXJDb21wbGV0ZScpO1xyXG5cdFx0XHQgICAgfVxyXG5cdFx0XHR9KTtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRjYXNlICdjYW5kbGUnOlxyXG5cdFx0ICAgIHRoaXMuYW5pbWF0aW9uSW5zdGFuY2UgPSBuZXcgQW5pbWF0aW9uKHtcclxuXHRcdCAgICAgICAgdGltaW5nOiAnZWFzZUluJyxcclxuXHRcdCAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxyXG5cdFx0ICAgICAgICBvblByb2Nlc3M6IGZ1bmN0aW9uIG9uUHJvY2Vzcyhwcm9jZXNzKSB7XHJcblx0XHRcdFx0XHRpZihvcHRzLnJvdGF0ZSl7XHJcblx0XHRcdFx0XHRcdGNvbnRleHRSb3RhdGUoY29udGV4dCxvcHRzKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGRyYXdZQXhpc0dyaWQoY2F0ZWdvcmllcyxvcHRzLCBjb25maWcsIGNvbnRleHQpO1xyXG5cdFx0XHRcdFx0ZHJhd1hBeGlzKGNhdGVnb3JpZXMsIG9wdHMsIGNvbmZpZywgY29udGV4dCk7XHJcblx0XHRcdFx0XHR2YXIgX2RyYXdDYW5kbGVEYXRhUG9pbnRzID0gZHJhd0NhbmRsZURhdGFQb2ludHMoc2VyaWVzLCBzZXJpZXNNQSwgb3B0cywgY29uZmlnLCBjb250ZXh0LCBwcm9jZXNzKSxcclxuXHRcdFx0XHRcdCAgICB4QXhpc1BvaW50cyA9IF9kcmF3Q2FuZGxlRGF0YVBvaW50cy54QXhpc1BvaW50cyxcclxuXHRcdFx0XHRcdCAgICBjYWxQb2ludHMgPSBfZHJhd0NhbmRsZURhdGFQb2ludHMuY2FsUG9pbnRzLFxyXG5cdFx0XHRcdFx0ICAgIGVhY2hTcGFjaW5nID0gX2RyYXdDYW5kbGVEYXRhUG9pbnRzLmVhY2hTcGFjaW5nO1xyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRfdGhpcy5jaGFydERhdGEueEF4aXNQb2ludHMgPSB4QXhpc1BvaW50cztcclxuXHRcdFx0XHRcdF90aGlzLmNoYXJ0RGF0YS5jYWxQb2ludHMgPSBjYWxQb2ludHM7XHJcblx0XHRcdFx0XHRfdGhpcy5jaGFydERhdGEuZWFjaFNwYWNpbmcgPSBlYWNoU3BhY2luZztcclxuXHRcdFx0XHRcdGlmKHNlcmllc01BKXtcclxuXHRcdFx0XHRcdFx0ZHJhd0xlZ2VuZChzZXJpZXNNQSwgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcclxuXHRcdFx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdFx0XHRkcmF3TGVnZW5kKG9wdHMuc2VyaWVzLCBvcHRzLCBjb25maWcsIGNvbnRleHQpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZHJhd1lBeGlzKHNlcmllcywgb3B0cywgY29uZmlnLCBjb250ZXh0KTtcclxuXHRcdFx0XHRcdGRyYXdUb29sVGlwQnJpZGdlKG9wdHMsIGNvbmZpZywgY29udGV4dCwgcHJvY2VzcywgZWFjaFNwYWNpbmcsIHhBeGlzUG9pbnRzKTtcclxuXHRcdFx0XHRcdGRyYXdDYW52YXMob3B0cywgY29udGV4dCk7XHJcblx0XHQgICAgICAgIH0sXHJcblx0XHQgICAgICAgIG9uQW5pbWF0aW9uRmluaXNoOiBmdW5jdGlvbiBvbkFuaW1hdGlvbkZpbmlzaCgpIHtcclxuXHRcdCAgICAgICAgICAgIF90aGlzLmV2ZW50LnRyaWdnZXIoJ3JlbmRlckNvbXBsZXRlJyk7XHJcblx0XHQgICAgICAgIH1cclxuXHRcdCAgICB9KTtcclxuXHRcdCAgICBicmVhaztcclxuICAgIH1cclxufVxyXG5cclxuLy8gc2ltcGxlIGV2ZW50IGltcGxlbWVudFxyXG5cclxuZnVuY3Rpb24gRXZlbnQoKSB7XHJcblx0dGhpcy5ldmVudHMgPSB7fTtcclxufVxyXG5cclxuRXZlbnQucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAodHlwZSwgbGlzdGVuZXIpIHtcclxuXHR0aGlzLmV2ZW50c1t0eXBlXSA9IHRoaXMuZXZlbnRzW3R5cGVdIHx8IFtdO1xyXG5cdHRoaXMuZXZlbnRzW3R5cGVdLnB1c2gobGlzdGVuZXIpO1xyXG59O1xyXG5cclxuRXZlbnQucHJvdG90eXBlLnRyaWdnZXIgPSBmdW5jdGlvbiAoKSB7XHJcblx0Zm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcclxuXHRcdGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XHJcblx0fVxyXG5cclxuXHR2YXIgdHlwZSA9IGFyZ3NbMF07XHJcblx0dmFyIHBhcmFtcyA9IGFyZ3Muc2xpY2UoMSk7XHJcblx0aWYgKCEhdGhpcy5ldmVudHNbdHlwZV0pIHtcclxuXHRcdHRoaXMuZXZlbnRzW3R5cGVdLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0bGlzdGVuZXIuYXBwbHkobnVsbCwgcGFyYW1zKTtcclxuXHRcdFx0fSBjYXRjaCAoZSkge1xyXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoZSk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH1cclxufTtcclxuXHJcbnZhciBDaGFydHMgPSBmdW5jdGlvbiBDaGFydHMob3B0cykge1xyXG5cdG9wdHMuZm9udFNpemU9b3B0cy5mb250U2l6ZSA/IG9wdHMuZm9udFNpemUqb3B0cy5waXhlbFJhdGlvIDogMTMqb3B0cy5waXhlbFJhdGlvO1xyXG4gICAgb3B0cy50aXRsZSA9IG9wdHMudGl0bGUgfHwge307XHJcbiAgICBvcHRzLnN1YnRpdGxlID0gb3B0cy5zdWJ0aXRsZSB8fCB7fTtcclxuICAgIG9wdHMueUF4aXMgPSBvcHRzLnlBeGlzIHx8IHt9O1xyXG5cdG9wdHMueUF4aXMuZ3JpZFR5cGU9b3B0cy55QXhpcy5ncmlkVHlwZT8gb3B0cy55QXhpcy5ncmlkVHlwZSA6ICdzb2xpZCc7XHJcblx0b3B0cy55QXhpcy5kYXNoTGVuZ3RoPW9wdHMueUF4aXMuZGFzaExlbmd0aD8gb3B0cy55QXhpcy5kYXNoTGVuZ3RoIDogNCpvcHRzLnBpeGVsUmF0aW87XHJcbiAgICBvcHRzLnhBeGlzID0gb3B0cy54QXhpcyB8fCB7fTtcclxuXHRvcHRzLnhBeGlzLnJvdGF0ZUxhYmVsID0gb3B0cy54QXhpcy5yb3RhdGVMYWJlbCA/IHRydWUgOiBmYWxzZTtcclxuXHRvcHRzLnhBeGlzLnR5cGU9b3B0cy54QXhpcy50eXBlPyBvcHRzLnhBeGlzLnR5cGUgOiAnY2FsaWJyYXRpb24nO1xyXG5cdG9wdHMueEF4aXMuZ3JpZFR5cGU9b3B0cy54QXhpcy5ncmlkVHlwZT8gb3B0cy54QXhpcy5ncmlkVHlwZSA6ICdzb2xpZCc7XHJcblx0b3B0cy54QXhpcy5kYXNoTGVuZ3RoPW9wdHMueEF4aXMuZGFzaExlbmd0aD8gb3B0cy54QXhpcy5kYXNoTGVuZ3RoIDogNCpvcHRzLnBpeGVsUmF0aW87XHJcblx0b3B0cy54QXhpcy5pdGVtQ291bnQgPSBvcHRzLnhBeGlzLml0ZW1Db3VudCA/IG9wdHMueEF4aXMuaXRlbUNvdW50IDogNTtcclxuXHRvcHRzLnhBeGlzLnNjcm9sbEFsaWduID0gb3B0cy54QXhpcy5zY3JvbGxBbGlnbiA/IG9wdHMueEF4aXMuc2Nyb2xsQWxpZ24gOiAnbGVmdCc7XHJcbiAgICBvcHRzLmV4dHJhID0gb3B0cy5leHRyYSB8fCB7fTtcclxuXHRcclxuICAgIG9wdHMubGVnZW5kID0gb3B0cy5sZWdlbmQgPT09IGZhbHNlID8gZmFsc2UgOiB0cnVlO1xyXG5cdG9wdHMucm90YXRlID0gb3B0cy5yb3RhdGUgPyB0cnVlIDogZmFsc2U7XHJcbiAgICBvcHRzLmFuaW1hdGlvbiA9IG9wdHMuYW5pbWF0aW9uID09PSBmYWxzZSA/IGZhbHNlIDogdHJ1ZTtcclxuICAgIHZhciBjb25maWckJDEgPSBhc3NpZ24oe30sIGNvbmZpZyk7XHJcbiAgICBjb25maWckJDEueUF4aXNUaXRsZVdpZHRoID0gb3B0cy55QXhpcy5kaXNhYmxlZCAhPT0gdHJ1ZSAmJiBvcHRzLnlBeGlzLnRpdGxlID8gY29uZmlnJCQxLnlBeGlzVGl0bGVXaWR0aCA6IDA7XHJcbiAgICBpZihvcHRzLnR5cGUgPT0gJ3BpZScgfHwgb3B0cy50eXBlID09ICdyaW5nJyApe1xyXG4gICAgXHQgY29uZmlnJCQxLnBpZUNoYXJ0TGluZVBhZGRpbmcgPSBvcHRzLmRhdGFMYWJlbCA9PT0gZmFsc2UgPyAwIDogb3B0cy5leHRyYS5waWUubGFibGVXaWR0aCB8fCBjb25maWckJDEucGllQ2hhcnRMaW5lUGFkZGluZypvcHRzLnBpeGVsUmF0aW87XHJcbiAgICB9XHJcbiAgICBjb25maWckJDEucGllQ2hhcnRUZXh0UGFkZGluZyA9IG9wdHMuZGF0YUxhYmVsID09PSBmYWxzZSA/IDAgOiBjb25maWckJDEucGllQ2hhcnRUZXh0UGFkZGluZypvcHRzLnBpeGVsUmF0aW87XHJcblx0Y29uZmlnJCQxLnlBeGlzU3BsaXQgPSBvcHRzLnlBeGlzLnNwbGl0TnVtYmVyPyBvcHRzLnlBeGlzLnNwbGl0TnVtYmVyIDogY29uZmlnLnlBeGlzU3BsaXQ7XHJcblx0Ly/lsY/luZXml4vovaxcclxuXHRjb25maWckJDEucm90YXRlPW9wdHMucm90YXRlO1xyXG5cdGlmKG9wdHMucm90YXRlKXtcclxuXHRcdGxldCB0ZW1wV2lkdGg9b3B0cy53aWR0aDtcclxuXHRcdGxldCB0ZW1wSGVpZ2h0PW9wdHMuaGVpZ2h0O1xyXG5cdFx0b3B0cy53aWR0aD10ZW1wSGVpZ2h0O1xyXG5cdFx0b3B0cy5oZWlnaHQ9dGVtcFdpZHRoO1xyXG5cdH1cclxuXHRcclxuXHQvL+mAgumFjUg16auY5YiG5bGPXHJcblx0Y29uZmlnJCQxLnlBeGlzV2lkdGg9Y29uZmlnLnlBeGlzV2lkdGgqb3B0cy5waXhlbFJhdGlvO1xyXG5cdGNvbmZpZyQkMS54QXhpc0hlaWdodD1jb25maWcueEF4aXNIZWlnaHQqb3B0cy5waXhlbFJhdGlvO1xyXG5cdGlmKG9wdHMuZW5hYmxlU2Nyb2xsICYmIG9wdHMueEF4aXMuc2Nyb2xsU2hvdyl7XHJcblx0XHRjb25maWckJDEueEF4aXNIZWlnaHQrPTYqb3B0cy5waXhlbFJhdGlvO1xyXG5cdH1cclxuXHRjb25maWckJDEueEF4aXNMaW5lSGVpZ2h0PWNvbmZpZy54QXhpc0xpbmVIZWlnaHQqb3B0cy5waXhlbFJhdGlvO1xyXG5cdGNvbmZpZyQkMS5sZWdlbmRIZWlnaHQ9Y29uZmlnLmxlZ2VuZEhlaWdodCpvcHRzLnBpeGVsUmF0aW87XHJcblx0Ly9jb25maWckJDEueUF4aXNUaXRsZVdpZHRoPWNvbmZpZy55QXhpc1RpdGxlV2lkdGgqb3B0cy5waXhlbFJhdGlvO1xyXG5cdGNvbmZpZyQkMS5wYWRkaW5nPWNvbmZpZy5wYWRkaW5nKm9wdHMucGl4ZWxSYXRpbztcclxuXHRjb25maWckJDEuZm9udFNpemU9b3B0cy5mb250U2l6ZTtcclxuXHRjb25maWckJDEudGl0bGVGb250U2l6ZT1jb25maWcudGl0bGVGb250U2l6ZSpvcHRzLnBpeGVsUmF0aW87XHJcblx0Y29uZmlnJCQxLnN1YnRpdGxlRm9udFNpemU9Y29uZmlnLnN1YnRpdGxlRm9udFNpemUqb3B0cy5waXhlbFJhdGlvO1xyXG5cdGNvbmZpZyQkMS50b29sVGlwUGFkZGluZz1jb25maWcudG9vbFRpcFBhZGRpbmcqb3B0cy5waXhlbFJhdGlvO1xyXG5cdGNvbmZpZyQkMS50b29sVGlwTGluZUhlaWdodD1jb25maWcudG9vbFRpcExpbmVIZWlnaHQqb3B0cy5waXhlbFJhdGlvO1xyXG5cdGNvbmZpZyQkMS5jb2x1bWVQYWRkaW5nPWNvbmZpZy5jb2x1bWVQYWRkaW5nKm9wdHMucGl4ZWxSYXRpbztcclxuXHQvL2NvbmZpZyQkMS54QXhpc1RleHRQYWRkaW5nPWNvbmZpZy54QXhpc1RleHRQYWRkaW5nKm9wdHMucGl4ZWxSYXRpbztcclxuXHRcclxuXHQvL+WQkemFjee9ruS4reS8oOWFpeW9k+WJjXBpeGVsUmF0aW/lj4rlrZfkvZPlpKflsI9cclxuXHRjb25maWcucGl4ZWxSYXRpbz1vcHRzLnBpeGVsUmF0aW87XHJcblx0Y29uZmlnLmZvbnRTaXplPW9wdHMuZm9udFNpemU7XHJcblx0Y29uZmlnLnJvdGF0ZT1vcHRzLnJvdGF0ZTtcclxuXHRcclxuICAgIHRoaXMub3B0cyA9IG9wdHM7XHJcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZyQkMTtcclxuXHRvcHRzLiR0aGlzID0gb3B0cy4kdGhpcz8gb3B0cy4kdGhpcyA6IHRoaXM7XHJcbiAgICB0aGlzLmNvbnRleHQgPSB1bmkuY3JlYXRlQ2FudmFzQ29udGV4dChvcHRzLmNhbnZhc0lkLCBvcHRzLiR0aGlzKTtcclxuICAgIC8vIHN0b3JlIGNhbGN1YXRlZCBjaGFydCBkYXRhXHJcbiAgICAvLyBzdWNoIGFzIGNoYXJ0IHBvaW50IGNvb3JkaW5hdGVcclxuICAgIHRoaXMuY2hhcnREYXRhID0ge307XHJcbiAgICB0aGlzLmV2ZW50ID0gbmV3IEV2ZW50KCk7XHJcblx0XHJcbiAgICB0aGlzLnNjcm9sbE9wdGlvbiA9IHtcclxuICAgICAgICBjdXJyZW50T2Zmc2V0OiAwLFxyXG4gICAgICAgIHN0YXJ0VG91Y2hYOiAwLFxyXG4gICAgICAgIGRpc3RhbmNlOiAwLFxyXG5cdFx0bGFzdE1vdmVUaW1lOjBcclxuICAgIH07XHJcblx0XHJcblx0Ly/orqHnrpflj7Plr7npvZDlgY/np7vot53nprtcclxuXHRpZihvcHRzLmVuYWJsZVNjcm9sbCAmJiBvcHRzLnhBeGlzLnNjcm9sbEFsaWduPT0ncmlnaHQnKXtcclxuXHRcdGxldCBfY2FsWUF4aXNEYXRhID0gY2FsWUF4aXNEYXRhKG9wdHMuc2VyaWVzLCBvcHRzLCBjb25maWckJDEpLFxyXG5cdFx0ICAgIHlBeGlzV2lkdGggPSBfY2FsWUF4aXNEYXRhLnlBeGlzV2lkdGg7XHJcblx0XHRjb25maWckJDEueUF4aXNXaWR0aCA9IHlBeGlzV2lkdGg7XHJcblx0XHRsZXQgb2Zmc2V0TGVmdD0wO1xyXG5cdFx0bGV0IF9nZXRYQXhpc1BvaW50czAgPSBnZXRYQXhpc1BvaW50cyhvcHRzLmNhdGVnb3JpZXMsIG9wdHMsIGNvbmZpZyQkMSksXHJcblx0XHQgICAgeEF4aXNQb2ludHMgPSBfZ2V0WEF4aXNQb2ludHMwLnhBeGlzUG9pbnRzLFxyXG5cdFx0ICAgIHN0YXJ0WCA9IF9nZXRYQXhpc1BvaW50czAuc3RhcnRYLFxyXG5cdFx0ICAgIGVuZFggPSBfZ2V0WEF4aXNQb2ludHMwLmVuZFgsXHJcblx0XHQgICAgZWFjaFNwYWNpbmcgPSBfZ2V0WEF4aXNQb2ludHMwLmVhY2hTcGFjaW5nO1xyXG5cdFx0bGV0IHRvdGFsV2lkdGg9ZWFjaFNwYWNpbmcqKHhBeGlzUG9pbnRzLmxlbmd0aC0xKTtcclxuXHRcdGxldCBzY3JlZW5XaWR0aD1lbmRYLXN0YXJ0WDtcclxuXHRcdG9mZnNldExlZnQ9c2NyZWVuV2lkdGgtdG90YWxXaWR0aDtcclxuXHRcdHRoaXMuc2Nyb2xsT3B0aW9uID0ge1xyXG5cdFx0ICAgIGN1cnJlbnRPZmZzZXQ6IG9mZnNldExlZnQsXHJcblx0XHQgICAgc3RhcnRUb3VjaFg6IG9mZnNldExlZnQsXHJcblx0XHQgICAgZGlzdGFuY2U6IDAsXHJcblx0XHRcdGxhc3RNb3ZlVGltZTowXHJcblx0XHR9O1xyXG5cdFx0b3B0cy5fc2Nyb2xsRGlzdGFuY2VfPSBvZmZzZXRMZWZ0O1xyXG5cdH1cclxuXHRcclxuICAgIGRyYXdDaGFydHMuY2FsbCh0aGlzLCBvcHRzLnR5cGUsIG9wdHMsIGNvbmZpZyQkMSwgdGhpcy5jb250ZXh0KTtcclxufTtcclxuXHJcbkNoYXJ0cy5wcm90b3R5cGUudXBkYXRlRGF0YSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGxldCBkYXRhID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcclxuICAgIHRoaXMub3B0cy5zZXJpZXMgPSBkYXRhLnNlcmllcyB8fCB0aGlzLm9wdHMuc2VyaWVzO1xyXG4gICAgdGhpcy5vcHRzLmNhdGVnb3JpZXMgPSBkYXRhLmNhdGVnb3JpZXMgfHwgdGhpcy5vcHRzLmNhdGVnb3JpZXM7XHJcblx0bGV0IHNjcm9sbFBvc2l0aW9uID0gZGF0YS5zY3JvbGxQb3NpdGlvbiB8fCAnY3VycmVudCc7XHJcblx0c3dpdGNoIChzY3JvbGxQb3NpdGlvbikge1xyXG5cdCAgICBjYXNlICdjdXJyZW50JzpcclxuXHRcdFx0dGhpcy5vcHRzLl9zY3JvbGxEaXN0YW5jZV89IHRoaXMuc2Nyb2xsT3B0aW9uLmN1cnJlbnRPZmZzZXQ7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSAnbGVmdCc6XHJcblx0XHRcdHRoaXMub3B0cy5fc2Nyb2xsRGlzdGFuY2VfPSAwO1xyXG5cdFx0XHR0aGlzLnNjcm9sbE9wdGlvbiA9IHtcclxuXHRcdFx0ICAgIGN1cnJlbnRPZmZzZXQ6IDAsXHJcblx0XHRcdCAgICBzdGFydFRvdWNoWDogMCxcclxuXHRcdFx0ICAgIGRpc3RhbmNlOiAwLFxyXG5cdFx0XHRcdGxhc3RNb3ZlVGltZTowXHJcblx0XHRcdH07XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0Y2FzZSAncmlnaHQnOlxyXG5cdFx0XHRsZXQgX2NhbFlBeGlzRGF0YSA9IGNhbFlBeGlzRGF0YSh0aGlzLm9wdHMuc2VyaWVzLCB0aGlzLm9wdHMsIHRoaXMuY29uZmlnKSxcclxuXHRcdFx0XHR5QXhpc1dpZHRoID0gX2NhbFlBeGlzRGF0YS55QXhpc1dpZHRoO1xyXG5cdFx0XHR0aGlzLmNvbmZpZy55QXhpc1dpZHRoID0geUF4aXNXaWR0aDtcclxuXHRcdFx0bGV0IG9mZnNldExlZnQ9MDtcclxuXHRcdFx0bGV0IF9nZXRYQXhpc1BvaW50czAgPSBnZXRYQXhpc1BvaW50cyh0aGlzLm9wdHMuY2F0ZWdvcmllcywgdGhpcy5vcHRzLCB0aGlzLmNvbmZpZyksXHJcblx0XHRcdFx0eEF4aXNQb2ludHMgPSBfZ2V0WEF4aXNQb2ludHMwLnhBeGlzUG9pbnRzLFxyXG5cdFx0XHRcdHN0YXJ0WCA9IF9nZXRYQXhpc1BvaW50czAuc3RhcnRYLFxyXG5cdFx0XHRcdGVuZFggPSBfZ2V0WEF4aXNQb2ludHMwLmVuZFgsXHJcblx0XHRcdFx0ZWFjaFNwYWNpbmcgPSBfZ2V0WEF4aXNQb2ludHMwLmVhY2hTcGFjaW5nO1xyXG5cdFx0XHRsZXQgdG90YWxXaWR0aD1lYWNoU3BhY2luZyooeEF4aXNQb2ludHMubGVuZ3RoLTEpO1xyXG5cdFx0XHRsZXQgc2NyZWVuV2lkdGg9ZW5kWC1zdGFydFg7XHJcblx0XHRcdG9mZnNldExlZnQ9c2NyZWVuV2lkdGgtdG90YWxXaWR0aDtcclxuXHRcdFx0dGhpcy5zY3JvbGxPcHRpb24gPSB7XHJcblx0XHRcdFx0Y3VycmVudE9mZnNldDogb2Zmc2V0TGVmdCxcclxuXHRcdFx0XHRzdGFydFRvdWNoWDogb2Zmc2V0TGVmdCxcclxuXHRcdFx0XHRkaXN0YW5jZTogMCxcclxuXHRcdFx0XHRsYXN0TW92ZVRpbWU6MFxyXG5cdFx0XHR9O1xyXG5cdFx0XHR0aGlzLm9wdHMuX3Njcm9sbERpc3RhbmNlXz0gb2Zmc2V0TGVmdDtcclxuXHRcdFx0YnJlYWs7XHJcblx0fVxyXG5cdGxldCBhbmltYXRpb249IGRhdGEuYW5pbWF0aW9uPT11bmRlZmluZWQ/IHRoaXMub3B0cy5hbmltYXRpb246ZGF0YS5hbmltYXRpb247XHJcblx0dGhpcy5vcHRzLmFuaW1hdGlvbiA9IGFuaW1hdGlvbjtcclxuICAgIHRoaXMub3B0cy50aXRsZSA9IGFzc2lnbih7fSwgdGhpcy5vcHRzLnRpdGxlLCBkYXRhLnRpdGxlIHx8IHt9KTtcclxuICAgIHRoaXMub3B0cy5zdWJ0aXRsZSA9IGFzc2lnbih7fSwgdGhpcy5vcHRzLnN1YnRpdGxlLCBkYXRhLnN1YnRpdGxlIHx8IHt9KTtcclxuICAgIGRyYXdDaGFydHMuY2FsbCh0aGlzLCB0aGlzLm9wdHMudHlwZSwgdGhpcy5vcHRzLCB0aGlzLmNvbmZpZywgdGhpcy5jb250ZXh0KTtcclxufTtcclxuXHJcbkNoYXJ0cy5wcm90b3R5cGUuem9vbSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB2YWwgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHRoaXMub3B0cy54QXhpcy5pdGVtQ291bnQ7XHJcblx0aWYodGhpcy5vcHRzLmVuYWJsZVNjcm9sbCE9PXRydWUpe1xyXG5cdFx0Y29uc29sZS5sb2coJ+ivt+WQr+eUqOa7muWKqOadoeWQjuS9v+eUqO+8gScpXHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cdC8v5b2T5YmN5bGP5bmV5Lit6Ze054K5XHJcblx0bGV0IGNlbnRlclBvaW50ID0gTWF0aC5yb3VuZChNYXRoLmFicyh0aGlzLnNjcm9sbE9wdGlvbi5jdXJyZW50T2Zmc2V0KS90aGlzLmNoYXJ0RGF0YS5lYWNoU3BhY2luZykrTWF0aC5yb3VuZCh0aGlzLm9wdHMueEF4aXMuaXRlbUNvdW50LzIpO1xyXG5cdHRoaXMub3B0cy5hbmltYXRpb249ZmFsc2U7XHJcblx0dGhpcy5vcHRzLnhBeGlzLml0ZW1Db3VudCA9IHZhbC5pdGVtQ291bnQ7XHJcblx0Ly/ph43mlrDorqHnrpd46L205YGP56e76Led56a7XHJcblx0bGV0IF9jYWxZQXhpc0RhdGEgPSBjYWxZQXhpc0RhdGEodGhpcy5vcHRzLnNlcmllcywgdGhpcy5vcHRzLCB0aGlzLmNvbmZpZyksXHJcblx0XHR5QXhpc1dpZHRoID0gX2NhbFlBeGlzRGF0YS55QXhpc1dpZHRoO1xyXG5cdHRoaXMuY29uZmlnLnlBeGlzV2lkdGggPSB5QXhpc1dpZHRoO1xyXG5cdGxldCBvZmZzZXRMZWZ0PTA7XHJcblx0bGV0IF9nZXRYQXhpc1BvaW50czAgPSBnZXRYQXhpc1BvaW50cyh0aGlzLm9wdHMuY2F0ZWdvcmllcywgdGhpcy5vcHRzLCB0aGlzLmNvbmZpZyksXHJcblx0XHR4QXhpc1BvaW50cyA9IF9nZXRYQXhpc1BvaW50czAueEF4aXNQb2ludHMsXHJcblx0XHRzdGFydFggPSBfZ2V0WEF4aXNQb2ludHMwLnN0YXJ0WCxcclxuXHRcdGVuZFggPSBfZ2V0WEF4aXNQb2ludHMwLmVuZFgsXHJcblx0XHRlYWNoU3BhY2luZyA9IF9nZXRYQXhpc1BvaW50czAuZWFjaFNwYWNpbmc7XHJcblx0bGV0IGNlbnRlckxlZnQ9ZWFjaFNwYWNpbmcqY2VudGVyUG9pbnQ7XHJcblx0bGV0IHNjcmVlbldpZHRoPWVuZFgtc3RhcnRYO1xyXG5cdGxldCBNYXhMZWZ0PXNjcmVlbldpZHRoLWVhY2hTcGFjaW5nKih4QXhpc1BvaW50cy5sZW5ndGgtMSk7XHJcblx0b2Zmc2V0TGVmdD1zY3JlZW5XaWR0aC8yLWNlbnRlckxlZnQ7XHJcblx0aWYgKG9mZnNldExlZnQ+MCl7XHJcblx0XHRvZmZzZXRMZWZ0PTA7XHJcblx0fVxyXG5cdGlmIChvZmZzZXRMZWZ0PE1heExlZnQpe1xyXG5cdFx0b2Zmc2V0TGVmdD1NYXhMZWZ0O1xyXG5cdH1cclxuXHR0aGlzLnNjcm9sbE9wdGlvbiA9IHtcclxuXHRcdGN1cnJlbnRPZmZzZXQ6IG9mZnNldExlZnQsXHJcblx0XHRzdGFydFRvdWNoWDogb2Zmc2V0TGVmdCxcclxuXHRcdGRpc3RhbmNlOiAwLFxyXG5cdFx0bGFzdE1vdmVUaW1lOjBcclxuXHR9O1xyXG5cdHRoaXMub3B0cy5fc2Nyb2xsRGlzdGFuY2VfPSBvZmZzZXRMZWZ0O1xyXG5cdFxyXG4gICAgZHJhd0NoYXJ0cy5jYWxsKHRoaXMsIHRoaXMub3B0cy50eXBlLCB0aGlzLm9wdHMsIHRoaXMuY29uZmlnLCB0aGlzLmNvbnRleHQpO1xyXG59O1xyXG5cclxuQ2hhcnRzLnByb3RvdHlwZS5zdG9wQW5pbWF0aW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5hbmltYXRpb25JbnN0YW5jZSAmJiB0aGlzLmFuaW1hdGlvbkluc3RhbmNlLnN0b3AoKTtcclxufTtcclxuXHJcbkNoYXJ0cy5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uICh0eXBlLCBsaXN0ZW5lcikge1xyXG4gICAgdGhpcy5ldmVudC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKTtcclxufTtcclxuXHJcbkNoYXJ0cy5wcm90b3R5cGUuZ2V0Q3VycmVudERhdGFJbmRleCA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICB2YXIgdG91Y2hlcz0gZS5tcC5jaGFuZ2VkVG91Y2hlc1swXTtcclxuICAgIGlmICh0b3VjaGVzKSB7XHJcbiAgICAgICAgdmFyIF90b3VjaGVzJD0gZ2V0VG91Y2hlcyh0b3VjaGVzLCB0aGlzLm9wdHMsIGUpO1xyXG4gICAgICAgIGlmICh0aGlzLm9wdHMudHlwZSA9PT0gJ3BpZScgfHwgdGhpcy5vcHRzLnR5cGUgPT09ICdyaW5nJykge1xyXG4gICAgICAgICAgICByZXR1cm4gZmluZFBpZUNoYXJ0Q3VycmVudEluZGV4KHsgeDogX3RvdWNoZXMkLngsIHk6IF90b3VjaGVzJC55IH0sIHRoaXMuY2hhcnREYXRhLnBpZURhdGEpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRzLnR5cGUgPT09ICdyYWRhcicpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZpbmRSYWRhckNoYXJ0Q3VycmVudEluZGV4KHsgeDogX3RvdWNoZXMkLngsIHk6IF90b3VjaGVzJC55IH0sIHRoaXMuY2hhcnREYXRhLnJhZGFyRGF0YSwgdGhpcy5vcHRzLmNhdGVnb3JpZXMubGVuZ3RoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmluZEN1cnJlbnRJbmRleCh7IHg6IF90b3VjaGVzJC54LCB5OiBfdG91Y2hlcyQueSB9LCB0aGlzLmNoYXJ0RGF0YS54QXhpc1BvaW50cywgdGhpcy5vcHRzLCB0aGlzLmNvbmZpZywgTWF0aC5hYnModGhpcy5zY3JvbGxPcHRpb24uY3VycmVudE9mZnNldCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiAtMTtcclxufTtcclxuXHJcbkNoYXJ0cy5wcm90b3R5cGUuc2hvd1Rvb2xUaXAgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgdmFyIG9wdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XHJcblx0dmFyIHRvdWNoZXM9IGUubXAuY2hhbmdlZFRvdWNoZXNbMF07XHJcblx0dmFyIF90b3VjaGVzJD0gZ2V0VG91Y2hlcyh0b3VjaGVzLCB0aGlzLm9wdHMsIGUpO1xyXG5cdFxyXG4gICAgaWYgKHRoaXMub3B0cy50eXBlID09PSAnbGluZScgfHwgdGhpcy5vcHRzLnR5cGUgPT09ICdhcmVhJyB8fCB0aGlzLm9wdHMudHlwZSA9PT0gJ2NvbHVtbicpIHtcclxuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmdldEN1cnJlbnREYXRhSW5kZXgoZSk7XHJcbiAgICAgICAgdmFyIGN1cnJlbnRPZmZzZXQgPSB0aGlzLnNjcm9sbE9wdGlvbi5jdXJyZW50T2Zmc2V0O1xyXG5cdFx0XHJcbiAgICAgICAgdmFyIG9wdHMgPSBhc3NpZ24oe30sIHRoaXMub3B0cywge1xyXG4gICAgICAgICAgICBfc2Nyb2xsRGlzdGFuY2VfOiBjdXJyZW50T2Zmc2V0LFxyXG4gICAgICAgICAgICBhbmltYXRpb246IGZhbHNlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcclxuXHRcdFx0XHJcbiAgICAgICAgICAgIHZhciBzZXJpZXNEYXRhID0gZ2V0U2VyaWVzRGF0YUl0ZW0odGhpcy5vcHRzLnNlcmllcywgaW5kZXgpO1xyXG4gICAgICAgICAgICBpZiAoc2VyaWVzRGF0YS5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgICAgIHZhciBfZ2V0VG9vbFRpcERhdGEgPSBnZXRUb29sVGlwRGF0YShzZXJpZXNEYXRhLCB0aGlzLmNoYXJ0RGF0YS5jYWxQb2ludHMsIGluZGV4LCB0aGlzLm9wdHMuY2F0ZWdvcmllcywgb3B0aW9uKSxcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0TGlzdCA9IF9nZXRUb29sVGlwRGF0YS50ZXh0TGlzdCxcclxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSBfZ2V0VG9vbFRpcERhdGEub2Zmc2V0O1xyXG5cdFx0XHRcdG9mZnNldC55PV90b3VjaGVzJC55O1xyXG4gICAgICAgICAgICAgICAgb3B0cy50b29sdGlwID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHRMaXN0OiB0ZXh0TGlzdCxcclxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IG9mZnNldCxcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb246IG9wdGlvbixcclxuXHRcdFx0XHRcdGluZGV4OiBpbmRleFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBkcmF3Q2hhcnRzLmNhbGwodGhpcywgb3B0cy50eXBlLCBvcHRzLCB0aGlzLmNvbmZpZywgdGhpcy5jb250ZXh0KTtcclxuICAgIH1cclxuXHRpZiAodGhpcy5vcHRzLnR5cGUgPT09ICdtaXgnKSB7XHJcblx0XHRcclxuXHQgICAgdmFyIGluZGV4ID0gdGhpcy5nZXRDdXJyZW50RGF0YUluZGV4KGUpO1xyXG5cdCAgICB2YXIgY3VycmVudE9mZnNldCA9IHRoaXMuc2Nyb2xsT3B0aW9uLmN1cnJlbnRPZmZzZXQ7XHJcblx0XHRcclxuXHQgICAgdmFyIG9wdHMgPSBhc3NpZ24oe30sIHRoaXMub3B0cywge1xyXG5cdCAgICAgICAgX3Njcm9sbERpc3RhbmNlXzogY3VycmVudE9mZnNldCxcclxuXHQgICAgICAgIGFuaW1hdGlvbjogZmFsc2VcclxuXHQgICAgfSk7XHJcblx0ICAgIGlmIChpbmRleCA+IC0xKSB7XHJcblx0ICAgICAgICB2YXIgc2VyaWVzRGF0YSA9IGdldFNlcmllc0RhdGFJdGVtKHRoaXMub3B0cy5zZXJpZXMsIGluZGV4KTtcclxuXHQgICAgICAgIGlmIChzZXJpZXNEYXRhLmxlbmd0aCAhPT0gMCkge1xyXG5cdCAgICAgICAgICAgIHZhciBfZ2V0TWl4VG9vbFRpcERhdGEgPSBnZXRNaXhUb29sVGlwRGF0YShzZXJpZXNEYXRhLCB0aGlzLmNoYXJ0RGF0YS5jYWxQb2ludHMsIGluZGV4LCB0aGlzLm9wdHMuY2F0ZWdvcmllcywgb3B0aW9uKSxcclxuXHQgICAgICAgICAgICAgICAgdGV4dExpc3QgPSBfZ2V0TWl4VG9vbFRpcERhdGEudGV4dExpc3QsXHJcblx0ICAgICAgICAgICAgICAgIG9mZnNldCA9IF9nZXRNaXhUb29sVGlwRGF0YS5vZmZzZXQ7XHJcblx0XHRcdFx0b2Zmc2V0Lnk9X3RvdWNoZXMkLnk7XHJcblx0ICAgICAgICAgICAgb3B0cy50b29sdGlwID0ge1xyXG5cdCAgICAgICAgICAgICAgICB0ZXh0TGlzdDogdGV4dExpc3QsXHJcblx0ICAgICAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0LFxyXG5cdCAgICAgICAgICAgICAgICBvcHRpb246IG9wdGlvbixcclxuXHRcdFx0XHRcdGluZGV4OiBpbmRleFxyXG5cdCAgICAgICAgICAgIH07XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH1cclxuXHQgICAgZHJhd0NoYXJ0cy5jYWxsKHRoaXMsIG9wdHMudHlwZSwgb3B0cywgdGhpcy5jb25maWcsIHRoaXMuY29udGV4dCk7XHJcblx0fVxyXG5cdGlmICh0aGlzLm9wdHMudHlwZSA9PT0gJ2NhbmRsZScpIHtcclxuXHRcdFxyXG5cdCAgICB2YXIgaW5kZXggPSB0aGlzLmdldEN1cnJlbnREYXRhSW5kZXgoZSk7XHJcblx0ICAgIHZhciBjdXJyZW50T2Zmc2V0ID0gdGhpcy5zY3JvbGxPcHRpb24uY3VycmVudE9mZnNldDtcclxuXHRcdFxyXG5cdCAgICB2YXIgb3B0cyA9IGFzc2lnbih7fSwgdGhpcy5vcHRzLCB7XHJcblx0ICAgICAgICBfc2Nyb2xsRGlzdGFuY2VfOiBjdXJyZW50T2Zmc2V0LFxyXG5cdCAgICAgICAgYW5pbWF0aW9uOiBmYWxzZVxyXG5cdCAgICB9KTtcclxuXHQgICAgaWYgKGluZGV4ID4gLTEpIHtcclxuXHQgICAgICAgIHZhciBzZXJpZXNEYXRhID0gZ2V0U2VyaWVzRGF0YUl0ZW0odGhpcy5vcHRzLnNlcmllcywgaW5kZXgpO1xyXG5cdCAgICAgICAgaWYgKHNlcmllc0RhdGEubGVuZ3RoICE9PSAwKSB7XHJcblx0ICAgICAgICAgICAgdmFyIF9nZXRUb29sVGlwRGF0YSA9IGdldENhbmRsZVRvb2xUaXBEYXRhKHRoaXMub3B0cy5zZXJpZXNbMF0uZGF0YSxzZXJpZXNEYXRhLCB0aGlzLmNoYXJ0RGF0YS5jYWxQb2ludHMsIGluZGV4LCB0aGlzLm9wdHMuY2F0ZWdvcmllcywgdGhpcy5vcHRzLmV4dHJhLmNhbmRsZSwgb3B0aW9uKSxcclxuXHQgICAgICAgICAgICAgICAgdGV4dExpc3QgPSBfZ2V0VG9vbFRpcERhdGEudGV4dExpc3QsXHJcblx0ICAgICAgICAgICAgICAgIG9mZnNldCA9IF9nZXRUb29sVGlwRGF0YS5vZmZzZXQ7XHJcblx0XHRcdFx0b2Zmc2V0Lnk9X3RvdWNoZXMkLnk7XHJcblx0ICAgICAgICAgICAgb3B0cy50b29sdGlwID0ge1xyXG5cdCAgICAgICAgICAgICAgICB0ZXh0TGlzdDogdGV4dExpc3QsXHJcblx0ICAgICAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0LFxyXG5cdCAgICAgICAgICAgICAgICBvcHRpb246IG9wdGlvbixcclxuXHRcdFx0XHRcdGluZGV4OiBpbmRleFxyXG5cdCAgICAgICAgICAgIH07XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH1cclxuXHQgICAgZHJhd0NoYXJ0cy5jYWxsKHRoaXMsIG9wdHMudHlwZSwgb3B0cywgdGhpcy5jb25maWcsIHRoaXMuY29udGV4dCk7XHJcblx0fVxyXG5cdGlmICh0aGlzLm9wdHMudHlwZSA9PT0gJ3BpZScgfHwgdGhpcy5vcHRzLnR5cGUgPT09ICdyaW5nJykge1xyXG5cdCAgICB2YXIgaW5kZXggPSB0aGlzLmdldEN1cnJlbnREYXRhSW5kZXgoZSk7XHJcblx0ICAgIHZhciBjdXJyZW50T2Zmc2V0ID0gdGhpcy5zY3JvbGxPcHRpb24uY3VycmVudE9mZnNldDtcclxuXHRcdFxyXG5cdCAgICB2YXIgb3B0cyA9IGFzc2lnbih7fSwgdGhpcy5vcHRzLCB7XHJcblx0ICAgICAgICBfc2Nyb2xsRGlzdGFuY2VfOiBjdXJyZW50T2Zmc2V0LFxyXG5cdCAgICAgICAgYW5pbWF0aW9uOiBmYWxzZVxyXG5cdCAgICB9KTtcclxuXHQgICAgaWYgKGluZGV4ID4gLTEpIHtcclxuXHRcdFx0XHJcblx0ICAgICAgICB2YXIgc2VyaWVzRGF0YSA9IHRoaXMub3B0cy5zZXJpZXNbaW5kZXhdO1xyXG5cdFx0XHR2YXIgdGV4dExpc3QgPVt7XHJcblx0XHRcdFx0dGV4dDogb3B0aW9uLmZvcm1hdCA/IG9wdGlvbi5mb3JtYXQoc2VyaWVzRGF0YSkgOiBzZXJpZXNEYXRhLm5hbWUgKyAnOiAnICsgc2VyaWVzRGF0YS5kYXRhLFxyXG5cdFx0XHRcdGNvbG9yOiBzZXJpZXNEYXRhLmNvbG9yXHJcblx0XHRcdH1dO1xyXG5cdFx0XHR2YXIgb2Zmc2V0ID0ge3g6X3RvdWNoZXMkLngseTpfdG91Y2hlcyQueX07XHJcblx0XHRcdFxyXG5cdFx0XHRvcHRzLnRvb2x0aXAgPSB7XHJcblx0XHRcdFx0dGV4dExpc3Q6IHRleHRMaXN0LFxyXG5cdFx0XHRcdG9mZnNldDogb2Zmc2V0LFxyXG5cdFx0XHRcdG9wdGlvbjogb3B0aW9uLFxyXG5cdFx0XHRcdGluZGV4OiBpbmRleFxyXG5cdFx0XHR9O1xyXG5cdCAgICB9XHJcblx0ICAgIGRyYXdDaGFydHMuY2FsbCh0aGlzLCBvcHRzLnR5cGUsIG9wdHMsIHRoaXMuY29uZmlnLCB0aGlzLmNvbnRleHQpO1xyXG5cdH1cclxufTtcclxuXHJcbkNoYXJ0cy5wcm90b3R5cGUudHJhbnNsYXRlID0gZnVuY3Rpb24gKGRpc3RhbmNlKSB7XHJcblx0dGhpcy5zY3JvbGxPcHRpb24gPSB7XHJcblx0XHRjdXJyZW50T2Zmc2V0OiBkaXN0YW5jZSxcclxuXHRcdHN0YXJ0VG91Y2hYOiBkaXN0YW5jZSxcclxuXHRcdGRpc3RhbmNlOiAwLFxyXG5cdFx0bGFzdE1vdmVUaW1lOjBcclxuXHR9O1xyXG5cdGxldCBvcHRzID0gYXNzaWduKHt9LCB0aGlzLm9wdHMsIHtcclxuXHQgICAgX3Njcm9sbERpc3RhbmNlXzogZGlzdGFuY2UsXHJcblx0ICAgIGFuaW1hdGlvbjogZmFsc2VcclxuXHR9KTtcclxuXHRkcmF3Q2hhcnRzLmNhbGwodGhpcywgdGhpcy5vcHRzLnR5cGUsIG9wdHMsIHRoaXMuY29uZmlnLCB0aGlzLmNvbnRleHQpO1xyXG59O1xyXG5cclxuQ2hhcnRzLnByb3RvdHlwZS5zY3JvbGxTdGFydCA9IGZ1bmN0aW9uIChlKSB7XHJcblx0dmFyIHRvdWNoZXM9IGUubXAuY2hhbmdlZFRvdWNoZXNbMF07XHJcblx0dmFyIF90b3VjaGVzJD0gZ2V0VG91Y2hlcyh0b3VjaGVzLCB0aGlzLm9wdHMsIGUpO1xyXG4gICAgaWYgKHRvdWNoZXMgJiYgdGhpcy5vcHRzLmVuYWJsZVNjcm9sbCA9PT0gdHJ1ZSkge1xyXG5cdFx0aWYodG91Y2hlcy54KXtcclxuXHRcdFx0dGhpcy5zY3JvbGxPcHRpb24uc3RhcnRUb3VjaFggPSBfdG91Y2hlcyQueDtcclxuXHRcdH1lbHNle1xyXG5cdFx0XHR0aGlzLnNjcm9sbE9wdGlvbi5zdGFydFRvdWNoWCA9IF90b3VjaGVzJC5jbGllbnRYO1xyXG5cdFx0fVxyXG4gICAgfVxyXG59O1xyXG5cclxuQ2hhcnRzLnByb3RvdHlwZS5zY3JvbGwgPSBmdW5jdGlvbiAoZSkge1xyXG5cdGlmKHRoaXMuc2Nyb2xsT3B0aW9uLmxhc3RNb3ZlVGltZSA9PT0gMCl7XHJcblx0XHR0aGlzLnNjcm9sbE9wdGlvbi5sYXN0TW92ZVRpbWUgPSBEYXRlLm5vdygpO1xyXG5cdH1cclxuICAgIGxldCBMaW1pdCA9IHRoaXMub3B0cy5leHRyYS50b3VjaE1vdmVMaW1pdCB8fCAyMDtcclxuXHRsZXQgY3Vyck1vdmVUaW1lID0gRGF0ZS5ub3coKTtcclxuXHRsZXQgZHVyYXRpb24gPSBjdXJyTW92ZVRpbWUgLSB0aGlzLnNjcm9sbE9wdGlvbi5sYXN0TW92ZVRpbWUgO1xyXG5cdGlmKGR1cmF0aW9uIDwgTWF0aC5mbG9vcigxMDAwL0xpbWl0KSkgcmV0dXJuO1xyXG5cdFxyXG5cdHRoaXMuc2Nyb2xsT3B0aW9uLmxhc3RNb3ZlVGltZSA9IGN1cnJNb3ZlVGltZTtcclxuXHRcclxuXHR2YXIgdG91Y2hlcz0gZS5tcC5jaGFuZ2VkVG91Y2hlc1swXTtcclxuXHR2YXIgX3RvdWNoZXMkPSBnZXRUb3VjaGVzKHRvdWNoZXMsIHRoaXMub3B0cywgZSk7XHJcbiAgICBpZiAodG91Y2hlcyAmJiB0aGlzLm9wdHMuZW5hYmxlU2Nyb2xsID09PSB0cnVlKSB7XHJcblx0XHR2YXIgX2Rpc3RhbmNlO1xyXG5cdFx0aWYodG91Y2hlcy54KXtcclxuXHRcdFx0X2Rpc3RhbmNlID0gX3RvdWNoZXMkLnggLSB0aGlzLnNjcm9sbE9wdGlvbi5zdGFydFRvdWNoWDtcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRfZGlzdGFuY2UgPSBfdG91Y2hlcyQuY2xpZW50WCAtIHRoaXMuc2Nyb2xsT3B0aW9uLnN0YXJ0VG91Y2hYO1xyXG5cdFx0fVxyXG4gICAgICAgIHZhciBjdXJyZW50T2Zmc2V0ID0gdGhpcy5zY3JvbGxPcHRpb24uY3VycmVudE9mZnNldDtcclxuXHJcbiAgICAgICAgdmFyIHZhbGlkRGlzdGFuY2UgPSBjYWxWYWxpZERpc3RhbmNlKGN1cnJlbnRPZmZzZXQgKyBfZGlzdGFuY2UsIHRoaXMuY2hhcnREYXRhLCB0aGlzLmNvbmZpZywgdGhpcy5vcHRzKTtcclxuXHJcbiAgICAgICAgdGhpcy5zY3JvbGxPcHRpb24uZGlzdGFuY2UgPSBfZGlzdGFuY2UgPSB2YWxpZERpc3RhbmNlIC0gY3VycmVudE9mZnNldDtcclxuICAgICAgICB2YXIgb3B0cyA9IGFzc2lnbih7fSwgdGhpcy5vcHRzLCB7XHJcbiAgICAgICAgICAgIF9zY3JvbGxEaXN0YW5jZV86IGN1cnJlbnRPZmZzZXQgKyBfZGlzdGFuY2UsXHJcbiAgICAgICAgICAgIGFuaW1hdGlvbjogZmFsc2VcclxuICAgICAgICB9KTtcclxuICAgICAgICBkcmF3Q2hhcnRzLmNhbGwodGhpcywgb3B0cy50eXBlLCBvcHRzLCB0aGlzLmNvbmZpZywgdGhpcy5jb250ZXh0KTtcclxuXHRcdHJldHVybiBjdXJyZW50T2Zmc2V0ICsgX2Rpc3RhbmNlO1xyXG4gICAgfVxyXG59O1xyXG5cclxuQ2hhcnRzLnByb3RvdHlwZS5zY3JvbGxFbmQgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgaWYgKHRoaXMub3B0cy5lbmFibGVTY3JvbGwgPT09IHRydWUpIHtcclxuICAgICAgICB2YXIgX3Njcm9sbE9wdGlvbiA9IHRoaXMuc2Nyb2xsT3B0aW9uLFxyXG4gICAgICAgICAgICBjdXJyZW50T2Zmc2V0ID0gX3Njcm9sbE9wdGlvbi5jdXJyZW50T2Zmc2V0LFxyXG4gICAgICAgICAgICBkaXN0YW5jZSA9IF9zY3JvbGxPcHRpb24uZGlzdGFuY2U7XHJcblxyXG4gICAgICAgIHRoaXMuc2Nyb2xsT3B0aW9uLmN1cnJlbnRPZmZzZXQgPSBjdXJyZW50T2Zmc2V0ICsgZGlzdGFuY2U7XHJcbiAgICAgICAgdGhpcy5zY3JvbGxPcHRpb24uZGlzdGFuY2UgPSAwO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ2hhcnRzOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///28\n");

/***/ }),
/* 29 */
/*!***********************************************************!*\
  !*** C:/Users/W/Desktop/remotecontrol/static/wxcharts.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {/*\r\n * charts for WeChat small app v1.0\r\n *\r\n * https://github.com/xiaolin3303/wx-charts\r\n * 2016-11-28\r\n *\r\n * Designed and built with all the love of Web\r\n * \r\n * 【秋云科技】修改为uni-app跨全端图表\r\n * https://github.com/16cheng/uni-wx-charts\r\n * 插件市场地址：\r\n * http://ext.dcloud.net.cn/plugin?id=271\r\n * \r\n * 2019-04-01\r\n * 修改为兼容uni-wx-charts\r\n * 2019-04-14\r\n * 支持支付宝/百度/头条小程序实现跨全端\r\n * 2019-04-15\r\n * 支持横屏模式，新增rotate参数，默认flase\r\n * 2019-04-16\r\n * 新增圆弧进度图，图表类型gauge\r\n * 2019-04-22\r\n * 修改图表拖拽功能夸端支持，增加拖拽时显示滚动条\r\n * \r\n * \r\n * \r\n */\n\n\n\nvar config = {\n  yAxisWidth: 15,\n  yAxisSplit: 5,\n  xAxisHeight: 15,\n  xAxisLineHeight: 15,\n  legendHeight: 15,\n  yAxisTitleWidth: 15,\n  padding: 12,\n  pixelRatio: 1,\n  //适配H5高分屏\n  rotate: false,\n  //横屏模式\n  columePadding: 3,\n  fontSize: 13,\n  //dataPointShape: ['diamond', 'circle', 'triangle', 'rect'],\n  dataPointShape: ['circle', 'circle', 'circle', 'circle'],\n  //仿F2图例样式改为圆点\n  colors: ['#1890ff', '#2fc25b', '#facc14', '#f04864', '#8543e0', '#90ed7d'],\n  pieChartLinePadding: 15,\n  pieChartTextPadding: 5,\n  xAxisTextPadding: 3,\n  titleColor: '#333333',\n  titleFontSize: 20,\n  subtitleColor: '#999999',\n  subtitleFontSize: 15,\n  toolTipPadding: 3,\n  toolTipBackground: '#000000',\n  toolTipOpacity: 0.7,\n  toolTipLineHeight: 20,\n  radarGridCount: 3,\n  radarLabelTextMargin: 15\n};\n\n// Object.assign polyfill\n// https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\nfunction assign(target, varArgs) {\n  if (target == null) {\n    // TypeError if undefined or null\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n  var to = Object(target);\n  for (var index = 1; index < arguments.length; index++) {\n    var nextSource = arguments[index];\n    if (nextSource != null) {\n      // Skip over if undefined or null\n      for (var nextKey in nextSource) {\n        // Avoid bugs when hasOwnProperty is shadowed\n        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n          to[nextKey] = nextSource[nextKey];\n        }\n      }\n    }\n  }\n  return to;\n}\nvar util = {\n  toFixed: function toFixed(num, limit) {\n    limit = limit || 2;\n    if (this.isFloat(num)) {\n      num = num.toFixed(limit);\n    }\n    return num;\n  },\n  isFloat: function isFloat(num) {\n    return num % 1 !== 0;\n  },\n  approximatelyEqual: function approximatelyEqual(num1, num2) {\n    return Math.abs(num1 - num2) < 1e-10;\n  },\n  isSameSign: function isSameSign(num1, num2) {\n    return Math.abs(num1) === num1 && Math.abs(num2) === num2 || Math.abs(num1) !== num1 && Math.abs(num2) !== num2;\n  },\n  isSameXCoordinateArea: function isSameXCoordinateArea(p1, p2) {\n    return this.isSameSign(p1.x, p2.x);\n  },\n  isCollision: function isCollision(obj1, obj2) {\n    obj1.end = {};\n    obj1.end.x = obj1.start.x + obj1.width;\n    obj1.end.y = obj1.start.y - obj1.height;\n    obj2.end = {};\n    obj2.end.x = obj2.start.x + obj2.width;\n    obj2.end.y = obj2.start.y - obj2.height;\n    var flag = obj2.start.x > obj1.end.x || obj2.end.x < obj1.start.x || obj2.end.y > obj1.start.y || obj2.start.y < obj1.end.y;\n    return !flag;\n  }\n};\nfunction findRange(num, type, limit) {\n  if (isNaN(num)) {\n    throw new Error('[wxCharts] unvalid series data!');\n  }\n  limit = limit || 10;\n  type = type ? type : 'upper';\n  var multiple = 1;\n  while (limit < 1) {\n    limit *= 10;\n    multiple *= 10;\n  }\n  if (type === 'upper') {\n    num = Math.ceil(num * multiple);\n  } else {\n    num = Math.floor(num * multiple);\n  }\n  while (num % limit !== 0) {\n    if (type === 'upper') {\n      num++;\n    } else {\n      num--;\n    }\n  }\n  return num / multiple;\n}\nfunction calValidDistance(distance, chartData, config, opts) {\n  var dataChartAreaWidth = opts.width - config.padding - chartData.xAxisPoints[0];\n  var dataChartWidth = chartData.eachSpacing * opts.categories.length;\n  var validDistance = distance;\n  if (distance >= 0) {\n    validDistance = 0;\n  } else if (Math.abs(distance) >= dataChartWidth - dataChartAreaWidth) {\n    validDistance = dataChartAreaWidth - dataChartWidth;\n  }\n  return validDistance;\n}\nfunction isInAngleRange(angle, startAngle, endAngle) {\n  function adjust(angle) {\n    while (angle < 0) {\n      angle += 2 * Math.PI;\n    }\n    while (angle > 2 * Math.PI) {\n      angle -= 2 * Math.PI;\n    }\n    return angle;\n  }\n  angle = adjust(angle);\n  startAngle = adjust(startAngle);\n  endAngle = adjust(endAngle);\n  if (startAngle > endAngle) {\n    endAngle += 2 * Math.PI;\n    if (angle < startAngle) {\n      angle += 2 * Math.PI;\n    }\n  }\n  return angle >= startAngle && angle <= endAngle;\n}\nfunction calRotateTranslate(x, y, h) {\n  var xv = x;\n  var yv = h - y;\n  var transX = xv + (h - yv - xv) / Math.sqrt(2);\n  transX *= -1;\n  var transY = (h - yv) * (Math.sqrt(2) - 1) - (h - yv - xv) / Math.sqrt(2);\n  return {\n    transX: transX,\n    transY: transY\n  };\n}\nfunction createCurveControlPoints(points, i) {\n  function isNotMiddlePoint(points, i) {\n    if (points[i - 1] && points[i + 1]) {\n      return points[i].y >= Math.max(points[i - 1].y, points[i + 1].y) || points[i].y <= Math.min(points[i - 1].y, points[i + 1].y);\n    } else {\n      return false;\n    }\n  }\n  var a = 0.2;\n  var b = 0.2;\n  var pAx = null;\n  var pAy = null;\n  var pBx = null;\n  var pBy = null;\n  if (i < 1) {\n    pAx = points[0].x + (points[1].x - points[0].x) * a;\n    pAy = points[0].y + (points[1].y - points[0].y) * a;\n  } else {\n    pAx = points[i].x + (points[i + 1].x - points[i - 1].x) * a;\n    pAy = points[i].y + (points[i + 1].y - points[i - 1].y) * a;\n  }\n  if (i > points.length - 3) {\n    var last = points.length - 1;\n    pBx = points[last].x - (points[last].x - points[last - 1].x) * b;\n    pBy = points[last].y - (points[last].y - points[last - 1].y) * b;\n  } else {\n    pBx = points[i + 1].x - (points[i + 2].x - points[i].x) * b;\n    pBy = points[i + 1].y - (points[i + 2].y - points[i].y) * b;\n  }\n\n  // fix issue https://github.com/xiaolin3303/wx-charts/issues/79\n  if (isNotMiddlePoint(points, i + 1)) {\n    pBy = points[i + 1].y;\n  }\n  if (isNotMiddlePoint(points, i)) {\n    pAy = points[i].y;\n  }\n  return {\n    ctrA: {\n      x: pAx,\n      y: pAy\n    },\n    ctrB: {\n      x: pBx,\n      y: pBy\n    }\n  };\n}\nfunction convertCoordinateOrigin(x, y, center) {\n  return {\n    x: center.x + x,\n    y: center.y - y\n  };\n}\nfunction avoidCollision(obj, target) {\n  if (target) {\n    // is collision test\n    while (util.isCollision(obj, target)) {\n      if (obj.start.x > 0) {\n        obj.start.y--;\n      } else if (obj.start.x < 0) {\n        obj.start.y++;\n      } else {\n        if (obj.start.y > 0) {\n          obj.start.y++;\n        } else {\n          obj.start.y--;\n        }\n      }\n    }\n  }\n  return obj;\n}\nfunction fillSeriesColor(series, config) {\n  var index = 0;\n  return series.map(function (item) {\n    if (!item.color) {\n      item.color = config.colors[index];\n      index = (index + 1) % config.colors.length;\n    }\n    return item;\n  });\n}\nfunction getDataRange(minData, maxData) {\n  var limit = 0;\n  var range = maxData - minData;\n  if (range >= 10000) {\n    limit = 1000;\n  } else if (range >= 1000) {\n    limit = 100;\n  } else if (range >= 100) {\n    limit = 10;\n  } else if (range >= 10) {\n    limit = 5;\n  } else if (range >= 1) {\n    limit = 1;\n  } else if (range >= 0.1) {\n    limit = 0.1;\n  } else {\n    limit = 0.01;\n  }\n  return {\n    minRange: findRange(minData, 'lower', limit),\n    maxRange: findRange(maxData, 'upper', limit)\n  };\n}\nfunction measureText(text) {\n  var fontSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : config.fontSize;\n\n  // wx canvas 未实现measureText方法, 此处自行实现\n  // 适配修改初始字体10px为其他大小的方法\n  text = String(text);\n  var text = text.split('');\n  var width = 0;\n  text.forEach(function (item) {\n    if (/[a-zA-Z]/.test(item)) {\n      width += 7;\n    } else if (/[0-9]/.test(item)) {\n      width += 5.5;\n    } else if (/\\./.test(item)) {\n      width += 2.7;\n    } else if (/-/.test(item)) {\n      width += 3.25;\n    } else if (/[\\u4e00-\\u9fa5]/.test(item)) {\n      width += 10;\n    } else if (/\\(|\\)/.test(item)) {\n      width += 3.73;\n    } else if (/\\s/.test(item)) {\n      width += 2.5;\n    } else if (/%/.test(item)) {\n      width += 8;\n    } else {\n      width += 10;\n    }\n  });\n  return width * fontSize / 10;\n}\nfunction dataCombine(series) {\n  return series.reduce(function (a, b) {\n    return (a.data ? a.data : a).concat(b.data);\n  }, []);\n}\nfunction getSeriesDataItem(series, index) {\n  var data = [];\n  series.forEach(function (item) {\n    if (item.data[index] !== null && typeof item.data[index] !== 'undefined') {\n      var seriesItem = {};\n      seriesItem.color = item.color;\n      seriesItem.name = item.name;\n      seriesItem.data = item.format ? item.format(item.data[index]) : item.data[index];\n      data.push(seriesItem);\n    }\n  });\n  return data;\n}\nfunction getMaxTextListLength(list) {\n  var lengthList = list.map(function (item) {\n    return measureText(item);\n  });\n  return Math.max.apply(null, lengthList);\n}\nfunction getRadarCoordinateSeries(length) {\n  var eachAngle = 2 * Math.PI / length;\n  var CoordinateSeries = [];\n  for (var i = 0; i < length; i++) {\n    CoordinateSeries.push(eachAngle * i);\n  }\n  return CoordinateSeries.map(function (item) {\n    return -1 * item + Math.PI / 2;\n  });\n}\nfunction getToolTipData(seriesData, calPoints, index, categories) {\n  var option = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  var textList = seriesData.map(function (item) {\n    return {\n      text: option.format ? option.format(item, categories[index]) : item.name + ': ' + item.data,\n      color: item.color\n    };\n  });\n  var validCalPoints = [];\n  var offset = {\n    x: 0,\n    y: 0\n  };\n  calPoints.forEach(function (points) {\n    if (typeof points[index] !== 'undefined' && points[index] !== null) {\n      validCalPoints.push(points[index]);\n    }\n  });\n  validCalPoints.forEach(function (item) {\n    offset.x = Math.round(item.x);\n    offset.y += item.y;\n  });\n  offset.y /= validCalPoints.length;\n  return {\n    textList: textList,\n    offset: offset\n  };\n}\nfunction findCurrentIndex(currentPoints, xAxisPoints, opts, config) {\n  var offset = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  var currentIndex = -1;\n  if (isInExactChartArea(currentPoints, opts, config)) {\n    xAxisPoints.forEach(function (item, index) {\n      if (currentPoints.x + offset > item) {\n        currentIndex = index;\n      }\n    });\n  }\n  return currentIndex;\n}\nfunction isInExactChartArea(currentPoints, opts, config) {\n  return currentPoints.x < opts.width - config.padding && currentPoints.x > config.padding + config.yAxisWidth + config.yAxisTitleWidth && currentPoints.y > config.padding && currentPoints.y < opts.height - config.legendHeight - config.xAxisHeight - config.padding;\n}\nfunction findRadarChartCurrentIndex(currentPoints, radarData, count) {\n  var eachAngleArea = 2 * Math.PI / count;\n  var currentIndex = -1;\n  if (isInExactPieChartArea(currentPoints, radarData.center, radarData.radius)) {\n    var fixAngle = function fixAngle(angle) {\n      if (angle < 0) {\n        angle += 2 * Math.PI;\n      }\n      if (angle > 2 * Math.PI) {\n        angle -= 2 * Math.PI;\n      }\n      return angle;\n    };\n    var angle = Math.atan2(radarData.center.y - currentPoints.y, currentPoints.x - radarData.center.x);\n    angle = -1 * angle;\n    if (angle < 0) {\n      angle += 2 * Math.PI;\n    }\n    var angleList = radarData.angleList.map(function (item) {\n      item = fixAngle(-1 * item);\n      return item;\n    });\n    angleList.forEach(function (item, index) {\n      var rangeStart = fixAngle(item - eachAngleArea / 2);\n      var rangeEnd = fixAngle(item + eachAngleArea / 2);\n      if (rangeEnd < rangeStart) {\n        rangeEnd += 2 * Math.PI;\n      }\n      if (angle >= rangeStart && angle <= rangeEnd || angle + 2 * Math.PI >= rangeStart && angle + 2 * Math.PI <= rangeEnd) {\n        currentIndex = index;\n      }\n    });\n  }\n  return currentIndex;\n}\nfunction findPieChartCurrentIndex(currentPoints, pieData) {\n  var currentIndex = -1;\n  if (isInExactPieChartArea(currentPoints, pieData.center, pieData.radius)) {\n    var angle = Math.atan2(pieData.center.y - currentPoints.y, currentPoints.x - pieData.center.x);\n    angle = -angle;\n    for (var i = 0, len = pieData.series.length; i < len; i++) {\n      var item = pieData.series[i];\n      if (isInAngleRange(angle, item._start_, item._start_ + item._proportion_ * 2 * Math.PI)) {\n        currentIndex = i;\n        break;\n      }\n    }\n  }\n  return currentIndex;\n}\nfunction isInExactPieChartArea(currentPoints, center, radius) {\n  return Math.pow(currentPoints.x - center.x, 2) + Math.pow(currentPoints.y - center.y, 2) <= Math.pow(radius, 2);\n}\nfunction splitPoints(points) {\n  var newPoints = [];\n  var items = [];\n  points.forEach(function (item, index) {\n    if (item !== null) {\n      items.push(item);\n    } else {\n      if (items.length) {\n        newPoints.push(items);\n      }\n      items = [];\n    }\n  });\n  if (items.length) {\n    newPoints.push(items);\n  }\n  return newPoints;\n}\nfunction calLegendData(series, opts, config) {\n  if (opts.legend === false) {\n    return {\n      legendList: [],\n      legendHeight: 0\n    };\n  }\n  //适配H5高分屏\n  var padding = 5 * opts.pixelRatio;\n  var marginTop = 8 * opts.pixelRatio;\n  var shapeWidth = 15 * opts.pixelRatio;\n  var legendList = [];\n  var widthCount = 0;\n  var currentRow = [];\n  series.forEach(function (item) {\n    var itemWidth = 3 * padding + shapeWidth + measureText(item.name || 'undefined');\n    if (widthCount + itemWidth > opts.width) {\n      legendList.push(currentRow);\n      widthCount = itemWidth;\n      currentRow = [item];\n    } else {\n      widthCount += itemWidth;\n      currentRow.push(item);\n    }\n  });\n  if (currentRow.length) {\n    legendList.push(currentRow);\n  }\n  return {\n    legendList: legendList,\n    legendHeight: legendList.length * (config.fontSize + marginTop) + padding\n  };\n}\nfunction calCategoriesData(categories, opts, config) {\n  var result = {\n    angle: 0,\n    xAxisHeight: config.xAxisHeight\n  };\n  var _getXAxisPoints = getXAxisPoints(categories, opts, config),\n    eachSpacing = _getXAxisPoints.eachSpacing;\n\n  // get max length of categories text\n\n  var categoriesTextLenth = categories.map(function (item) {\n    return measureText(item);\n  });\n  var maxTextLength = Math.max.apply(this, categoriesTextLenth);\n  if (maxTextLength + 2 * config.xAxisTextPadding > eachSpacing) {\n    result.angle = 45 * Math.PI / 180;\n    result.xAxisHeight = 2 * config.xAxisTextPadding + maxTextLength * Math.sin(result.angle);\n  }\n  return result;\n}\nfunction getRadarDataPoints(angleList, center, radius, series, opts) {\n  var process = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  var radarOption = opts.extra.radar || {};\n  radarOption.max = radarOption.max || 0;\n  var maxData = Math.max(radarOption.max, Math.max.apply(null, dataCombine(series)));\n  var data = [];\n  series.forEach(function (each) {\n    var listItem = {};\n    listItem.color = each.color;\n    listItem.data = [];\n    each.data.forEach(function (item, index) {\n      var tmp = {};\n      tmp.angle = angleList[index];\n      tmp.proportion = item / maxData;\n      tmp.position = convertCoordinateOrigin(radius * tmp.proportion * process * Math.cos(tmp.angle), radius * tmp.proportion * process * Math.sin(tmp.angle), center);\n      listItem.data.push(tmp);\n    });\n    data.push(listItem);\n  });\n  return data;\n}\nfunction getPieDataPoints(series) {\n  var process = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var count = 0;\n  var _start_ = 0;\n  series.forEach(function (item) {\n    item.data = item.data === null ? 0 : item.data;\n    count += item.data;\n  });\n  series.forEach(function (item) {\n    item.data = item.data === null ? 0 : item.data;\n    item._proportion_ = item.data / count * process;\n  });\n  series.forEach(function (item) {\n    item._start_ = _start_;\n    _start_ += 2 * item._proportion_ * Math.PI;\n  });\n  return series;\n}\nfunction getGaugeDataPoints(series) {\n  var process = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  series.forEach(function (item) {\n    item.data = item.data === null ? 0 : item.data;\n    item._proportion_ = 1.5 * item.data * process + 0.75;\n    if (item._proportion_ >= 2) {\n      item._proportion_ = item._proportion_ % 2;\n    }\n  });\n  return series;\n}\nfunction getPieTextMaxLength(series) {\n  series = getPieDataPoints(series);\n  var maxLength = 0;\n  series.forEach(function (item) {\n    var text = item.format ? item.format(+item._proportion_.toFixed(2)) : util.toFixed(item._proportion_ * 100) + '%';\n    maxLength = Math.max(maxLength, measureText(text));\n  });\n  return maxLength;\n}\nfunction fixColumeData(points, eachSpacing, columnLen, index, config, opts) {\n  return points.map(function (item) {\n    if (item === null) {\n      return null;\n    }\n    item.width = (eachSpacing - 2 * config.columePadding) / columnLen;\n    if (opts.extra.column && opts.extra.column.width && +opts.extra.column.width > 0) {\n      // customer column width\n      item.width = Math.min(item.width, +opts.extra.column.width);\n    } else {\n      // default width should less tran 25px\n      // don't ask me why, I don't know\n      item.width = Math.min(item.width, 25);\n    }\n    item.x += (index + 0.5 - columnLen / 2) * item.width;\n    return item;\n  });\n}\nfunction getXAxisPoints(categories, opts, config) {\n  var yAxisTotalWidth = config.yAxisWidth + config.yAxisTitleWidth;\n  var spacingValid = opts.width - 2 * config.padding - yAxisTotalWidth;\n  var dataCount = opts.enableScroll ? Math.min(opts.xAxis.itemCount, categories.length) : categories.length;\n  var eachSpacing = spacingValid / dataCount;\n  var xAxisPoints = [];\n  var startX = config.padding + yAxisTotalWidth;\n  var endX = opts.width - config.padding;\n  categories.forEach(function (item, index) {\n    xAxisPoints.push(startX + index * eachSpacing);\n  });\n  if (opts.enableScroll === true) {\n    xAxisPoints.push(startX + categories.length * eachSpacing);\n  } else {\n    xAxisPoints.push(endX);\n  }\n  return {\n    xAxisPoints: xAxisPoints,\n    startX: startX,\n    endX: endX,\n    eachSpacing: eachSpacing\n  };\n}\nfunction getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config) {\n  var process = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1;\n  var points = [];\n  var validHeight = opts.height - 2 * config.padding - config.xAxisHeight - config.legendHeight;\n  data.forEach(function (item, index) {\n    if (item === null) {\n      points.push(null);\n    } else {\n      var point = {};\n      point.x = xAxisPoints[index] + Math.round(eachSpacing / 2);\n      var height = validHeight * (item - minRange) / (maxRange - minRange);\n      height *= process;\n      point.y = opts.height - config.xAxisHeight - config.legendHeight - Math.round(height) - config.padding;\n      points.push(point);\n    }\n  });\n  return points;\n}\nfunction getYAxisTextList(series, opts, config) {\n  var data = dataCombine(series);\n  // remove null from data\n  data = data.filter(function (item) {\n    return item !== null;\n  });\n  var minData = Math.min.apply(this, data);\n  var maxData = Math.max.apply(this, data);\n  if (typeof opts.yAxis.min === 'number') {\n    minData = Math.min(opts.yAxis.min, minData);\n  }\n  if (typeof opts.yAxis.max === 'number') {\n    maxData = Math.max(opts.yAxis.max, maxData);\n  }\n\n  // fix issue https://github.com/xiaolin3303/wx-charts/issues/9\n  if (minData === maxData) {\n    var rangeSpan = maxData || 1;\n    minData -= rangeSpan;\n    maxData += rangeSpan;\n  }\n  var dataRange = getDataRange(minData, maxData);\n  var minRange = dataRange.minRange;\n  var maxRange = dataRange.maxRange;\n  var range = [];\n  var eachRange = (maxRange - minRange) / config.yAxisSplit;\n  for (var i = 0; i <= config.yAxisSplit; i++) {\n    range.push(minRange + eachRange * i);\n  }\n  return range.reverse();\n}\nfunction calYAxisData(series, opts, config) {\n  var ranges = getYAxisTextList(series, opts, config);\n  var yAxisWidth = config.yAxisWidth;\n  var rangesFormat = ranges.map(function (item) {\n    item = util.toFixed(item, 2);\n    item = opts.yAxis.format ? opts.yAxis.format(Number(item)) : item;\n    yAxisWidth = Math.max(yAxisWidth, measureText(item) + 5);\n    return item;\n  });\n  if (opts.yAxis.disabled === true) {\n    yAxisWidth = 0;\n  }\n  return {\n    rangesFormat: rangesFormat,\n    ranges: ranges,\n    yAxisWidth: yAxisWidth\n  };\n}\nfunction drawPointShape(points, color, shape, context, opts) {\n  context.beginPath();\n  context.setStrokeStyle(\"#ffffff\");\n  context.setLineWidth(1 * opts.pixelRatio);\n  context.setFillStyle(color);\n  if (shape === 'diamond') {\n    points.forEach(function (item, index) {\n      if (item !== null) {\n        context.moveTo(item.x, item.y - 4.5);\n        context.lineTo(item.x - 4.5, item.y);\n        context.lineTo(item.x, item.y + 4.5);\n        context.lineTo(item.x + 4.5, item.y);\n        context.lineTo(item.x, item.y - 4.5);\n      }\n    });\n  } else if (shape === 'circle') {\n    points.forEach(function (item, index) {\n      if (item !== null) {\n        context.moveTo(item.x + 3.5 * opts.pixelRatio, item.y);\n        context.arc(item.x, item.y, 4 * opts.pixelRatio, 0, 2 * Math.PI, false);\n      }\n    });\n  } else if (shape === 'rect') {\n    points.forEach(function (item, index) {\n      if (item !== null) {\n        context.moveTo(item.x - 3.5, item.y - 3.5);\n        context.rect(item.x - 3.5, item.y - 3.5, 7, 7);\n      }\n    });\n  } else if (shape === 'triangle') {\n    points.forEach(function (item, index) {\n      if (item !== null) {\n        context.moveTo(item.x, item.y - 4.5);\n        context.lineTo(item.x - 4.5, item.y + 4.5);\n        context.lineTo(item.x + 4.5, item.y + 4.5);\n        context.lineTo(item.x, item.y - 4.5);\n      }\n    });\n  }\n  context.closePath();\n  context.fill();\n  context.stroke();\n}\nfunction drawRingTitle(opts, config, context) {\n  var titlefontSize = opts.title.fontSize || config.titleFontSize;\n  var subtitlefontSize = opts.subtitle.fontSize || config.subtitleFontSize;\n  var title = opts.title.name || '';\n  var subtitle = opts.subtitle.name || '';\n  var titleFontColor = opts.title.color || config.titleColor;\n  var subtitleFontColor = opts.subtitle.color || config.subtitleColor;\n  var titleHeight = title ? titlefontSize : 0;\n  var subtitleHeight = subtitle ? subtitlefontSize : 0;\n  var margin = 5;\n  if (subtitle) {\n    var textWidth = measureText(subtitle, subtitlefontSize);\n    var startX = (opts.width - textWidth) / 2 + (opts.subtitle.offsetX || 0);\n    var startY = (opts.height - config.legendHeight + subtitlefontSize) / 2;\n    if (title) {\n      startY -= (titleHeight + margin) / 2;\n    }\n    context.beginPath();\n    context.setFontSize(subtitlefontSize);\n    context.setFillStyle(subtitleFontColor);\n    context.fillText(subtitle, startX, startY);\n    context.stroke();\n    context.closePath();\n  }\n  if (title) {\n    var _textWidth = measureText(title, titlefontSize);\n    var _startX = (opts.width - _textWidth) / 2 + (opts.title.offsetX || 0);\n    var _startY = (opts.height - config.legendHeight + titlefontSize) / 2;\n    if (subtitle) {\n      _startY += (subtitleHeight + margin) / 2;\n    }\n    context.beginPath();\n    context.setFontSize(titlefontSize);\n    context.setFillStyle(titleFontColor);\n    context.fillText(title, _startX, _startY);\n    context.stroke();\n    context.closePath();\n  }\n}\nfunction drawPointText(points, series, config, context) {\n  // 绘制数据文案\n  var data = series.data;\n  context.beginPath();\n  context.setFontSize(config.fontSize);\n  context.setFillStyle('#666666');\n  points.forEach(function (item, index) {\n    if (item !== null) {\n      var formatVal = series.format ? series.format(data[index]) : data[index];\n      context.fillText(formatVal, item.x - measureText(formatVal) / 2, item.y - 2);\n    }\n  });\n  context.closePath();\n  context.stroke();\n}\nfunction drawRadarLabel(angleList, radius, centerPosition, opts, config, context) {\n  var radarOption = opts.extra.radar || {};\n  radius += config.radarLabelTextMargin;\n  context.beginPath();\n  context.setFontSize(config.fontSize);\n  context.setFillStyle(radarOption.labelColor || '#666666');\n  angleList.forEach(function (angle, index) {\n    var pos = {\n      x: radius * Math.cos(angle),\n      y: radius * Math.sin(angle)\n    };\n    var posRelativeCanvas = convertCoordinateOrigin(pos.x, pos.y, centerPosition);\n    var startX = posRelativeCanvas.x;\n    var startY = posRelativeCanvas.y;\n    if (util.approximatelyEqual(pos.x, 0)) {\n      startX -= measureText(opts.categories[index] || '') / 2;\n    } else if (pos.x < 0) {\n      startX -= measureText(opts.categories[index] || '');\n    }\n    context.fillText(opts.categories[index] || '', startX, startY + config.fontSize / 2);\n  });\n  context.stroke();\n  context.closePath();\n}\nfunction drawPieText(series, opts, config, context, radius, center) {\n  var lineRadius = radius + config.pieChartLinePadding;\n  var textObjectCollection = [];\n  var lastTextObject = null;\n  var seriesConvert = series.map(function (item) {\n    var arc = 2 * Math.PI - (item._start_ + 2 * Math.PI * item._proportion_ / 2);\n    var text = item.format ? item.format(+item._proportion_.toFixed(2)) : util.toFixed(item._proportion_ * 100) + '%';\n    var color = item.color;\n    return {\n      arc: arc,\n      text: text,\n      color: color\n    };\n  });\n  seriesConvert.forEach(function (item) {\n    // line end\n    var orginX1 = Math.cos(item.arc) * lineRadius;\n    var orginY1 = Math.sin(item.arc) * lineRadius;\n\n    // line start\n    var orginX2 = Math.cos(item.arc) * radius;\n    var orginY2 = Math.sin(item.arc) * radius;\n\n    // text start\n    var orginX3 = orginX1 >= 0 ? orginX1 + config.pieChartTextPadding : orginX1 - config.pieChartTextPadding;\n    var orginY3 = orginY1;\n    var textWidth = measureText(item.text);\n    var startY = orginY3;\n    if (lastTextObject && util.isSameXCoordinateArea(lastTextObject.start, {\n      x: orginX3\n    })) {\n      if (orginX3 > 0) {\n        startY = Math.min(orginY3, lastTextObject.start.y);\n      } else if (orginX1 < 0) {\n        startY = Math.max(orginY3, lastTextObject.start.y);\n      } else {\n        if (orginY3 > 0) {\n          startY = Math.max(orginY3, lastTextObject.start.y);\n        } else {\n          startY = Math.min(orginY3, lastTextObject.start.y);\n        }\n      }\n    }\n    if (orginX3 < 0) {\n      orginX3 -= textWidth;\n    }\n    var textObject = {\n      lineStart: {\n        x: orginX2,\n        y: orginY2\n      },\n      lineEnd: {\n        x: orginX1,\n        y: orginY1\n      },\n      start: {\n        x: orginX3,\n        y: startY\n      },\n      width: textWidth,\n      height: config.fontSize,\n      text: item.text,\n      color: item.color\n    };\n    lastTextObject = avoidCollision(textObject, lastTextObject);\n    textObjectCollection.push(lastTextObject);\n  });\n  textObjectCollection.forEach(function (item) {\n    var lineStartPoistion = convertCoordinateOrigin(item.lineStart.x, item.lineStart.y, center);\n    var lineEndPoistion = convertCoordinateOrigin(item.lineEnd.x, item.lineEnd.y, center);\n    var textPosition = convertCoordinateOrigin(item.start.x, item.start.y, center);\n    context.setLineWidth(1 * opts.pixelRatio);\n    context.setFontSize(config.fontSize);\n    context.beginPath();\n    context.setStrokeStyle(item.color);\n    context.setFillStyle(item.color);\n    context.moveTo(lineStartPoistion.x, lineStartPoistion.y);\n    var curveStartX = item.start.x < 0 ? textPosition.x + item.width : textPosition.x;\n    var textStartX = item.start.x < 0 ? textPosition.x - 5 : textPosition.x + 5;\n    context.quadraticCurveTo(lineEndPoistion.x, lineEndPoistion.y, curveStartX, textPosition.y);\n    context.moveTo(lineStartPoistion.x, lineStartPoistion.y);\n    context.stroke();\n    context.closePath();\n    context.beginPath();\n    context.moveTo(textPosition.x + item.width, textPosition.y);\n    context.arc(curveStartX, textPosition.y, 2, 0, 2 * Math.PI);\n    context.closePath();\n    context.fill();\n    context.beginPath();\n    context.setFillStyle('#666666');\n    context.fillText(item.text, textStartX, textPosition.y + 3);\n    context.closePath();\n    context.stroke();\n    context.closePath();\n  });\n}\nfunction drawToolTipSplitLine(offsetX, opts, config, context) {\n  var startY = config.padding;\n  var endY = opts.height - config.padding - config.xAxisHeight - config.legendHeight;\n  context.beginPath();\n  context.setStrokeStyle('#cccccc');\n  context.setLineWidth(1 * opts.pixelRatio);\n  context.moveTo(offsetX, startY);\n  context.lineTo(offsetX, endY);\n  context.stroke();\n  context.closePath();\n}\nfunction drawToolTip(textList, offset, opts, config, context) {\n  var legendWidth = 4 * opts.pixelRatio;\n  var legendMarginRight = 5 * opts.pixelRatio;\n  var arrowWidth = 8 * opts.pixelRatio;\n  var isOverRightBorder = false;\n  offset = assign({\n    x: 0,\n    y: 0\n  }, offset);\n  offset.y -= 8 * opts.pixelRatio;\n  var textWidth = textList.map(function (item) {\n    return measureText(item.text);\n  });\n  var toolTipWidth = legendWidth + legendMarginRight + 4 * config.toolTipPadding + Math.max.apply(null, textWidth);\n  var toolTipHeight = 2 * config.toolTipPadding + textList.length * config.toolTipLineHeight;\n\n  // if beyond the right border\n  if (offset.x - Math.abs(opts._scrollDistance_) + arrowWidth + toolTipWidth > opts.width) {\n    isOverRightBorder = true;\n  }\n\n  // draw background rect\n  context.beginPath();\n  context.setFillStyle(opts.tooltip.option.background || config.toolTipBackground);\n  context.setGlobalAlpha(config.toolTipOpacity);\n  if (isOverRightBorder) {\n    context.moveTo(offset.x, offset.y + 10 * opts.pixelRatio);\n    context.lineTo(offset.x - arrowWidth, offset.y + 10 * opts.pixelRatio - 5 * opts.pixelRatio);\n    context.lineTo(offset.x - arrowWidth, offset.y + 10 * opts.pixelRatio + 5 * opts.pixelRatio);\n    context.moveTo(offset.x, offset.y + 10 * opts.pixelRatio);\n    context.fillRect(offset.x - toolTipWidth - arrowWidth, offset.y, toolTipWidth, toolTipHeight);\n  } else {\n    context.moveTo(offset.x, offset.y + 10 * opts.pixelRatio);\n    context.lineTo(offset.x + arrowWidth, offset.y + 10 * opts.pixelRatio - 5 * opts.pixelRatio);\n    context.lineTo(offset.x + arrowWidth, offset.y + 10 * opts.pixelRatio + 5 * opts.pixelRatio);\n    context.moveTo(offset.x, offset.y + 10 * opts.pixelRatio);\n    context.fillRect(offset.x + arrowWidth, offset.y, toolTipWidth, toolTipHeight);\n  }\n  context.closePath();\n  context.fill();\n  context.setGlobalAlpha(1);\n\n  // draw legend\n  textList.forEach(function (item, index) {\n    context.beginPath();\n    context.setFillStyle(item.color);\n    var startX = offset.x + arrowWidth + 2 * config.toolTipPadding;\n    var startY = offset.y + (config.toolTipLineHeight - config.fontSize) / 2 + config.toolTipLineHeight * index + config.toolTipPadding;\n    if (isOverRightBorder) {\n      startX = offset.x - toolTipWidth - arrowWidth + 2 * config.toolTipPadding;\n    }\n    context.fillRect(startX, startY, legendWidth, config.fontSize);\n    context.closePath();\n  });\n\n  // draw text list\n  context.beginPath();\n  context.setFontSize(config.fontSize);\n  context.setFillStyle('#ffffff');\n  textList.forEach(function (item, index) {\n    var startX = offset.x + arrowWidth + 2 * config.toolTipPadding + legendWidth + legendMarginRight;\n    if (isOverRightBorder) {\n      startX = offset.x - toolTipWidth - arrowWidth + 2 * config.toolTipPadding + +legendWidth + legendMarginRight;\n    }\n    var startY = offset.y + (config.toolTipLineHeight - config.fontSize) / 2 + config.toolTipLineHeight * index + config.toolTipPadding;\n    context.fillText(item.text, startX, startY + config.fontSize);\n  });\n  context.stroke();\n  context.closePath();\n}\nfunction drawYAxisTitle(title, opts, config, context) {\n  var startX = config.xAxisHeight + (opts.height - config.xAxisHeight - measureText(title)) / 2;\n  context.save();\n  context.beginPath();\n  context.setFontSize(config.fontSize);\n  context.setFillStyle(opts.yAxis.titleFontColor || '#333333');\n  context.translate(0, opts.height);\n  context.rotate(-90 * Math.PI / 180);\n  context.fillText(title, startX, config.padding + 0.5 * config.fontSize);\n  context.stroke();\n  context.closePath();\n  context.restore();\n}\nfunction drawColumnDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var _calYAxisData = calYAxisData(series, opts, config),\n    ranges = _calYAxisData.ranges;\n  var _getXAxisPoints = getXAxisPoints(opts.categories, opts, config),\n    xAxisPoints = _getXAxisPoints.xAxisPoints,\n    eachSpacing = _getXAxisPoints.eachSpacing;\n  var minRange = ranges.pop();\n  var maxRange = ranges.shift();\n  context.save();\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n  series.forEach(function (eachSeries, seriesIndex) {\n    var data = eachSeries.data;\n    var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n    points = fixColumeData(points, eachSpacing, series.length, seriesIndex, config, opts);\n\n    // 绘制柱状数据图\n    context.beginPath();\n    context.setFillStyle(eachSeries.color);\n    points.forEach(function (item, index) {\n      if (item !== null) {\n        var startX = item.x - item.width / 2 + 1;\n        var height = opts.height - item.y - config.padding - config.xAxisHeight - config.legendHeight;\n        context.moveTo(startX, item.y);\n        context.rect(startX, item.y, item.width - 2, height);\n      }\n    });\n    context.closePath();\n    context.fill();\n  });\n  series.forEach(function (eachSeries, seriesIndex) {\n    var data = eachSeries.data;\n    var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n    points = fixColumeData(points, eachSpacing, series.length, seriesIndex, config, opts);\n    if (opts.dataLabel !== false && process === 1) {\n      drawPointText(points, eachSeries, config, context);\n    }\n  });\n  context.restore();\n  return {\n    xAxisPoints: xAxisPoints,\n    eachSpacing: eachSpacing\n  };\n}\nfunction drawAreaDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var _calYAxisData2 = calYAxisData(series, opts, config),\n    ranges = _calYAxisData2.ranges;\n  var _getXAxisPoints2 = getXAxisPoints(opts.categories, opts, config),\n    xAxisPoints = _getXAxisPoints2.xAxisPoints,\n    eachSpacing = _getXAxisPoints2.eachSpacing;\n  var minRange = ranges.pop();\n  var maxRange = ranges.shift();\n  var endY = opts.height - config.padding - config.xAxisHeight - config.legendHeight;\n  var calPoints = [];\n  context.save();\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n  if (opts.tooltip && opts.tooltip.textList && opts.tooltip.textList.length && process === 1) {\n    drawToolTipSplitLine(opts.tooltip.offset.x, opts, config, context);\n  }\n  series.forEach(function (eachSeries, seriesIndex) {\n    var data = eachSeries.data;\n    var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n    calPoints.push(points);\n    var splitPointList = splitPoints(points);\n    splitPointList.forEach(function (points) {\n      // 绘制区域数据\n      context.beginPath();\n      context.setStrokeStyle(eachSeries.color);\n      context.setFillStyle(eachSeries.color);\n      context.setGlobalAlpha(0.2);\n      context.setLineWidth(2 * opts.pixelRatio);\n      if (points.length > 1) {\n        var firstPoint = points[0];\n        var lastPoint = points[points.length - 1];\n        context.moveTo(firstPoint.x, firstPoint.y);\n        if (opts.extra.lineStyle === 'curve') {\n          points.forEach(function (item, index) {\n            if (index > 0) {\n              var ctrlPoint = createCurveControlPoints(points, index - 1);\n              context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, item.x, item.y);\n            }\n          });\n        } else {\n          points.forEach(function (item, index) {\n            if (index > 0) {\n              context.lineTo(item.x, item.y);\n            }\n          });\n        }\n        context.lineTo(lastPoint.x, endY);\n        context.lineTo(firstPoint.x, endY);\n        context.lineTo(firstPoint.x, firstPoint.y);\n      } else {\n        var item = points[0];\n        context.moveTo(item.x - eachSpacing / 2, item.y);\n        context.lineTo(item.x + eachSpacing / 2, item.y);\n        context.lineTo(item.x + eachSpacing / 2, endY);\n        context.lineTo(item.x - eachSpacing / 2, endY);\n        context.moveTo(item.x - eachSpacing / 2, item.y);\n      }\n      context.closePath();\n      context.fill();\n      context.setGlobalAlpha(1);\n\n      //画连线\n      context.beginPath();\n      context.setStrokeStyle(eachSeries.color);\n      context.setLineWidth(2 * opts.pixelRatio);\n      if (points.length === 1) {\n        context.moveTo(points[0].x, points[0].y);\n        context.arc(points[0].x, points[0].y, 1, 0, 2 * Math.PI);\n      } else {\n        context.moveTo(points[0].x, points[0].y);\n        points.forEach(function (item, index) {\n          if (index > 0) {\n            context.lineTo(item.x, item.y);\n          }\n        });\n        context.moveTo(points[0].x, points[0].y);\n      }\n      context.closePath();\n      context.stroke();\n    });\n\n    //画点\n    if (opts.dataPointShape !== false) {\n      var shape = config.dataPointShape[seriesIndex % config.dataPointShape.length];\n      drawPointShape(points, eachSeries.color, shape, context, opts);\n    }\n  });\n  if (opts.dataLabel !== false && process === 1) {\n    series.forEach(function (eachSeries, seriesIndex) {\n      var data = eachSeries.data;\n      var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n      drawPointText(points, eachSeries, config, context);\n    });\n  }\n  context.restore();\n  return {\n    xAxisPoints: xAxisPoints,\n    calPoints: calPoints,\n    eachSpacing: eachSpacing\n  };\n}\nfunction drawLineDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var _calYAxisData3 = calYAxisData(series, opts, config),\n    ranges = _calYAxisData3.ranges;\n  var _getXAxisPoints3 = getXAxisPoints(opts.categories, opts, config),\n    xAxisPoints = _getXAxisPoints3.xAxisPoints,\n    eachSpacing = _getXAxisPoints3.eachSpacing;\n  var minRange = ranges.pop();\n  var maxRange = ranges.shift();\n  var calPoints = [];\n  context.save();\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n  if (opts.tooltip && opts.tooltip.textList && opts.tooltip.textList.length && process === 1) {\n    drawToolTipSplitLine(opts.tooltip.offset.x, opts, config, context);\n  }\n  series.forEach(function (eachSeries, seriesIndex) {\n    var data = eachSeries.data;\n    var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n    calPoints.push(points);\n    var splitPointList = splitPoints(points);\n    splitPointList.forEach(function (points, index) {\n      context.beginPath();\n      context.setStrokeStyle(eachSeries.color);\n      context.setLineWidth(2 * opts.pixelRatio);\n      if (points.length === 1) {\n        context.moveTo(points[0].x, points[0].y);\n        context.arc(points[0].x, points[0].y, 1, 0, 2 * Math.PI);\n      } else {\n        context.moveTo(points[0].x, points[0].y);\n        if (opts.extra.lineStyle === 'curve') {\n          points.forEach(function (item, index) {\n            if (index > 0) {\n              var ctrlPoint = createCurveControlPoints(points, index - 1);\n              context.bezierCurveTo(ctrlPoint.ctrA.x, ctrlPoint.ctrA.y, ctrlPoint.ctrB.x, ctrlPoint.ctrB.y, item.x, item.y);\n            }\n          });\n        } else {\n          points.forEach(function (item, index) {\n            if (index > 0) {\n              context.lineTo(item.x, item.y);\n            }\n          });\n        }\n        context.moveTo(points[0].x, points[0].y);\n      }\n      context.closePath();\n      context.stroke();\n    });\n    if (opts.dataPointShape !== false) {\n      var shape = config.dataPointShape[seriesIndex % config.dataPointShape.length];\n      drawPointShape(points, eachSeries.color, shape, context, opts);\n    }\n  });\n  if (opts.dataLabel !== false && process === 1) {\n    series.forEach(function (eachSeries, seriesIndex) {\n      var data = eachSeries.data;\n      var points = getDataPoints(data, minRange, maxRange, xAxisPoints, eachSpacing, opts, config, process);\n      drawPointText(points, eachSeries, config, context);\n    });\n  }\n  context.restore();\n  return {\n    xAxisPoints: xAxisPoints,\n    calPoints: calPoints,\n    eachSpacing: eachSpacing\n  };\n}\nfunction drawToolTipBridge(opts, config, context, process) {\n  context.save();\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0 && opts.enableScroll === true) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n  if (opts.tooltip && opts.tooltip.textList && opts.tooltip.textList.length && process === 1) {\n    drawToolTip(opts.tooltip.textList, opts.tooltip.offset, opts, config, context);\n  }\n  context.restore();\n}\nfunction drawXAxis(categories, opts, config, context) {\n  var _getXAxisPoints4 = getXAxisPoints(categories, opts, config),\n    xAxisPoints = _getXAxisPoints4.xAxisPoints,\n    startX = _getXAxisPoints4.startX,\n    endX = _getXAxisPoints4.endX,\n    eachSpacing = _getXAxisPoints4.eachSpacing;\n  var startY = opts.height - config.padding - config.xAxisHeight - config.legendHeight;\n  var endY = startY + config.xAxisLineHeight;\n\n  //绘制滚动条\n  if (opts.enableScroll) {\n    var scrollStartX = startX + 3 * opts.pixelRatio;\n    var scrollendX = endX - 3 * opts.pixelRatio;\n    var scrollY = endY + 8 * opts.pixelRatio;\n    var scrollScreenWidth = scrollendX - scrollStartX;\n    var scrollTotalWidth = eachSpacing * (xAxisPoints.length - 1);\n    var scrollWidth = scrollScreenWidth * scrollScreenWidth / scrollTotalWidth;\n    var scrollLeft = 0;\n    if (opts._scrollDistance_) {\n      scrollLeft = -opts._scrollDistance_ * scrollScreenWidth / scrollTotalWidth;\n    }\n    context.beginPath();\n    context.setLineCap('round');\n    context.setLineWidth(6 * opts.pixelRatio);\n    context.setStrokeStyle(opts.xAxis.scrollBackgroundColor || \"#EFEBEF\");\n    context.moveTo(scrollStartX, scrollY);\n    context.lineTo(scrollendX, scrollY);\n    context.stroke();\n    context.closePath();\n    context.beginPath();\n    context.setLineCap('round');\n    context.setLineWidth(6 * opts.pixelRatio);\n    context.setStrokeStyle(opts.xAxis.scrollColor || \"#A6A6A6\");\n    context.moveTo(scrollStartX + scrollLeft, scrollY);\n    context.lineTo(scrollStartX + scrollLeft + scrollWidth, scrollY);\n    context.stroke();\n    context.closePath();\n  }\n  context.save();\n  if (opts._scrollDistance_ && opts._scrollDistance_ !== 0) {\n    context.translate(opts._scrollDistance_, 0);\n  }\n  context.beginPath();\n  context.setStrokeStyle(opts.xAxis.gridColor || \"#cccccc\");\n  if (opts.xAxis.disableGrid !== true) {\n    if (opts.xAxis.type === 'calibration') {\n      xAxisPoints.forEach(function (item, index) {\n        if (index > 0) {\n          context.moveTo(item - eachSpacing / 2, startY);\n          context.lineTo(item - eachSpacing / 2, startY + 4);\n        }\n      });\n    } else {\n      xAxisPoints.forEach(function (item, index) {\n        context.moveTo(item, startY);\n        context.lineTo(item, endY);\n      });\n    }\n  }\n  context.closePath();\n  context.stroke();\n\n  // 对X轴列表做抽稀处理\n  var validWidth = opts.width - 2 * config.padding - config.yAxisWidth - config.yAxisTitleWidth;\n  var maxXAxisListLength = Math.min(categories.length, Math.ceil(validWidth / config.fontSize / 1.5));\n  var ratio = Math.ceil(categories.length / maxXAxisListLength);\n  categories = categories.map(function (item, index) {\n    return index % ratio !== 0 ? '' : item;\n  });\n  if (config._xAxisTextAngle_ === 0) {\n    context.beginPath();\n    context.setFontSize(config.fontSize);\n    context.setFillStyle(opts.xAxis.fontColor || '#666666');\n    categories.forEach(function (item, index) {\n      var offset = eachSpacing / 2 - measureText(item) / 2;\n      context.fillText(item, xAxisPoints[index] + offset, startY + config.fontSize + 5);\n    });\n    context.closePath();\n    context.stroke();\n  } else {\n    categories.forEach(function (item, index) {\n      context.save();\n      context.beginPath();\n      context.setFontSize(config.fontSize);\n      context.setFillStyle(opts.xAxis.fontColor || '#666666');\n      var textWidth = measureText(item);\n      var offset = eachSpacing / 2 - textWidth;\n      var _calRotateTranslate = calRotateTranslate(xAxisPoints[index] + eachSpacing / 2, startY + config.fontSize / 2 + 5, opts.height),\n        transX = _calRotateTranslate.transX,\n        transY = _calRotateTranslate.transY;\n      context.rotate(-1 * config._xAxisTextAngle_);\n      context.translate(transX, transY);\n      context.fillText(item, xAxisPoints[index] + offset, startY + config.fontSize + 5);\n      context.closePath();\n      context.stroke();\n      context.restore();\n    });\n  }\n  context.restore();\n}\nfunction drawYAxisGrid(opts, config, context) {\n  var spacingValid = opts.height - 2 * config.padding - config.xAxisHeight - config.legendHeight;\n  var eachSpacing = Math.floor(spacingValid / config.yAxisSplit);\n  var yAxisTotalWidth = config.yAxisWidth + config.yAxisTitleWidth;\n  var startX = config.padding + yAxisTotalWidth;\n  var endX = opts.width - config.padding;\n  var points = [];\n  for (var i = 0; i < config.yAxisSplit; i++) {\n    points.push(config.padding + eachSpacing * i);\n  }\n  points.push(config.padding + eachSpacing * config.yAxisSplit + 2);\n  context.beginPath();\n  context.setStrokeStyle(opts.yAxis.gridColor || \"#cccccc\");\n  context.setLineWidth(1 * opts.pixelRatio);\n  points.forEach(function (item, index) {\n    context.moveTo(startX, item);\n    context.lineTo(endX, item);\n  });\n  context.closePath();\n  context.stroke();\n}\nfunction drawYAxis(series, opts, config, context) {\n  if (opts.yAxis.disabled === true) {\n    return;\n  }\n  var _calYAxisData4 = calYAxisData(series, opts, config),\n    rangesFormat = _calYAxisData4.rangesFormat;\n  var yAxisTotalWidth = config.yAxisWidth + config.yAxisTitleWidth;\n  var spacingValid = opts.height - 2 * config.padding - config.xAxisHeight - config.legendHeight;\n  var eachSpacing = Math.floor(spacingValid / config.yAxisSplit);\n  var startX = config.padding + yAxisTotalWidth;\n  var endX = opts.width - config.padding;\n  var endY = opts.height - config.padding - config.xAxisHeight - config.legendHeight;\n\n  // set YAxis background\n  context.setFillStyle(opts.background || '#ffffff');\n  if (opts._scrollDistance_ < 0) {\n    context.fillRect(0, 0, startX, endY + config.xAxisHeight + 5);\n  }\n  context.fillRect(endX, 0, opts.width, endY + config.xAxisHeight + 5);\n  var points = [];\n  for (var i = 0; i <= config.yAxisSplit; i++) {\n    points.push(config.padding + eachSpacing * i);\n  }\n  context.stroke();\n  context.beginPath();\n  context.setFontSize(config.fontSize);\n  context.setFillStyle(opts.yAxis.fontColor || '#666666');\n  rangesFormat.forEach(function (item, index) {\n    var pos = points[index] ? points[index] : endY;\n    context.fillText(item, config.padding + config.yAxisTitleWidth, pos + config.fontSize / 2);\n  });\n  context.closePath();\n  context.stroke();\n  if (opts.yAxis.title) {\n    drawYAxisTitle(opts.yAxis.title, opts, config, context);\n  }\n}\nfunction drawLegend(series, opts, config, context) {\n  if (!opts.legend) {\n    return;\n  }\n  // each legend shape width 15px\n  // the spacing between shape and text in each legend is the `padding`\n  // each legend spacing is the `padding`\n  // legend margin top `config.padding`\n\n  var _calLegendData = calLegendData(series, opts, config),\n    legendList = _calLegendData.legendList;\n  var padding = 5 * opts.pixelRatio;\n  var marginTop = 10 * opts.pixelRatio;\n  var shapeWidth = 15 * opts.pixelRatio;\n  legendList.forEach(function (itemList, listIndex) {\n    var width = 0;\n    itemList.forEach(function (item) {\n      item.name = item.name || 'undefined';\n      width += 3 * padding + measureText(item.name) + shapeWidth;\n    });\n    var startX = (opts.width - width) / 2 + padding;\n    var startY = opts.height - config.padding - config.legendHeight + listIndex * (config.fontSize + marginTop) + padding + marginTop;\n    context.setFontSize(config.fontSize);\n    itemList.forEach(function (item) {\n      switch (opts.type) {\n        case 'line':\n          context.beginPath();\n          /*\r\n                         context.setLineWidth(1*opts.pixelRatio);\r\n                         context.setStrokeStyle(item.color);\r\n                         context.moveTo(startX - 2, startY + 5);\r\n                         context.lineTo(startX + 17, startY + 5);\r\n                         context.stroke();\r\n                         context.closePath();\r\n                         context.beginPath();\r\n          */\n          context.setLineWidth(1 * opts.pixelRatio);\n          context.setStrokeStyle(item.color);\n          context.setFillStyle(item.color);\n          context.moveTo(startX + 7.5 * opts.pixelRatio, startY + 5 * opts.pixelRatio);\n          context.arc(startX + 7.5 * opts.pixelRatio, startY + 5 * opts.pixelRatio, 6 * opts.pixelRatio, 0, 2 * Math.PI);\n          context.fill();\n          context.stroke();\n          context.closePath();\n          break;\n        case 'pie':\n          context.beginPath();\n          context.setLineWidth(1 * opts.pixelRatio);\n          context.setStrokeStyle(item.color);\n          context.setFillStyle(item.color);\n          context.moveTo(startX + 7.5 * opts.pixelRatio, startY + 5 * opts.pixelRatio);\n          context.arc(startX + 7.5 * opts.pixelRatio, startY + 5 * opts.pixelRatio, 6 * opts.pixelRatio, 0, 2 * Math.PI);\n          context.fill();\n          context.stroke();\n          context.closePath();\n          break;\n        case 'ring':\n          context.beginPath();\n          context.setLineWidth(1 * opts.pixelRatio);\n          context.setStrokeStyle(item.color);\n          context.setFillStyle(item.color);\n          context.moveTo(startX + 7.5 * opts.pixelRatio, startY + 5 * opts.pixelRatio);\n          context.arc(startX + 7.5 * opts.pixelRatio, startY + 5 * opts.pixelRatio, 6 * opts.pixelRatio, 0, 2 * Math.PI);\n          context.fill();\n          context.stroke();\n          context.closePath();\n          break;\n        //圆弧进度图不显示图例\n        case 'gauge':\n          break;\n        default:\n          context.beginPath();\n          context.setFillStyle(item.color);\n          context.moveTo(startX, startY);\n          context.rect(startX, startY, 15 * opts.pixelRatio, 10 * opts.pixelRatio);\n          context.closePath();\n          context.fill();\n      }\n      startX += padding + shapeWidth;\n      context.beginPath();\n      context.setFillStyle(opts.extra.legendTextColor || '#333333');\n      context.fillText(item.name, startX, startY + 6 * opts.pixelRatio + 3 * opts.pixelRatio);\n      context.closePath();\n      context.stroke();\n      startX += measureText(item.name) + 2 * padding;\n    });\n  });\n}\nfunction drawPieDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var pieOption = opts.extra.pie || {};\n  series = getPieDataPoints(series, process);\n  var centerPosition = {\n    x: opts.width / 2,\n    y: (opts.height - config.legendHeight) / 2\n  };\n  var radius = Math.min(centerPosition.x - config.pieChartLinePadding - config.pieChartTextPadding - config._pieTextMaxLength_, centerPosition.y - config.pieChartLinePadding - config.pieChartTextPadding);\n  if (opts.dataLabel) {\n    radius -= 10;\n  } else {\n    radius -= 2 * config.padding;\n  }\n  series = series.map(function (eachSeries) {\n    eachSeries._start_ += (pieOption.offsetAngle || 0) * Math.PI / 180;\n    return eachSeries;\n  });\n  series.forEach(function (eachSeries) {\n    context.beginPath();\n    context.setLineWidth(2 * opts.pixelRatio);\n    context.setStrokeStyle('#ffffff');\n    context.setFillStyle(eachSeries.color);\n    context.moveTo(centerPosition.x, centerPosition.y);\n    context.arc(centerPosition.x, centerPosition.y, radius, eachSeries._start_, eachSeries._start_ + 2 * eachSeries._proportion_ * Math.PI);\n    context.closePath();\n    context.fill();\n    if (opts.disablePieStroke !== true) {\n      context.stroke();\n    }\n  });\n  if (opts.type === 'ring') {\n    var innerPieWidth = radius * 0.6;\n    if (typeof opts.extra.ringWidth === 'number' && opts.extra.ringWidth > 0) {\n      innerPieWidth = Math.max(0, radius - opts.extra.ringWidth);\n    }\n    context.beginPath();\n    context.setFillStyle(opts.background || '#ffffff');\n    context.moveTo(centerPosition.x, centerPosition.y);\n    context.arc(centerPosition.x, centerPosition.y, innerPieWidth, 0, 2 * Math.PI);\n    context.closePath();\n    context.fill();\n  }\n  if (opts.dataLabel !== false && process === 1) {\n    // fix https://github.com/xiaolin3303/wx-charts/issues/132\n    var valid = false;\n    for (var i = 0, len = series.length; i < len; i++) {\n      if (series[i].data > 0) {\n        valid = true;\n        break;\n      }\n    }\n    if (valid) {\n      drawPieText(series, opts, config, context, radius, centerPosition);\n    }\n  }\n  if (process === 1 && opts.type === 'ring') {\n    drawRingTitle(opts, config, context);\n  }\n  return {\n    center: centerPosition,\n    radius: radius,\n    series: series\n  };\n}\nfunction drawGaugeDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var pieOption = opts.extra.pie || {};\n  series = getGaugeDataPoints(series, process);\n  var centerPosition = {\n    x: opts.width / 2,\n    y: opts.height / 2\n  };\n  var radius = Math.min(centerPosition.x, centerPosition.y);\n  if (typeof opts.extra.gaugeWidth === 'number' && opts.extra.gaugeWidth > 0) {\n    opts.extra.gaugeWidth = opts.extra.gaugeWidth;\n  } else {\n    opts.extra.gaugeWidth = 12 * opts.pixelRatio;\n  }\n  radius -= config.padding + opts.extra.gaugeWidth / 2;\n  var innerPieWidth = radius - opts.extra.gaugeWidth;\n\n  //背景颜色\n  context.setLineWidth(opts.extra.gaugeWidth); // 设置圆环的宽度\n  context.setStrokeStyle('#E9E9E9'); // 设置圆环的颜色\n  context.setLineCap('round'); // 设置圆环端点的形状\n  context.beginPath(); //开始一个新的路径\n  context.arc(centerPosition.x, centerPosition.y, radius, 0.75 * Math.PI, 0.25 * Math.PI, false);\n  context.stroke(); //对当前路径进行描边\n\n  series.forEach(function (eachSeries) {\n    context.setLineWidth(opts.extra.gaugeWidth);\n    context.setStrokeStyle(eachSeries.color);\n    context.setLineCap('round');\n    context.beginPath();\n    context.arc(centerPosition.x, centerPosition.y, radius, 0.75 * Math.PI, eachSeries._proportion_ * Math.PI, false);\n    context.stroke();\n  });\n  drawRingTitle(opts, config, context);\n  return {\n    center: centerPosition,\n    radius: radius,\n    series: series\n  };\n}\nfunction drawRadarDataPoints(series, opts, config, context) {\n  var process = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var radarOption = opts.extra.radar || {};\n  var coordinateAngle = getRadarCoordinateSeries(opts.categories.length);\n  var centerPosition = {\n    x: opts.width / 2,\n    y: (opts.height - config.legendHeight) / 2\n  };\n  var radius = Math.min(centerPosition.x - (getMaxTextListLength(opts.categories) + config.radarLabelTextMargin), centerPosition.y - config.radarLabelTextMargin);\n  radius -= config.padding;\n\n  // draw grid\n  context.beginPath();\n  context.setLineWidth(1 * opts.pixelRatio);\n  context.setStrokeStyle(radarOption.gridColor || \"#cccccc\");\n  coordinateAngle.forEach(function (angle) {\n    var pos = convertCoordinateOrigin(radius * Math.cos(angle), radius * Math.sin(angle), centerPosition);\n    context.moveTo(centerPosition.x, centerPosition.y);\n    context.lineTo(pos.x, pos.y);\n  });\n  context.stroke();\n  context.closePath();\n\n  // draw split line grid\n\n  var _loop = function _loop(i) {\n    var startPos = {};\n    context.beginPath();\n    context.setLineWidth(1 * opts.pixelRatio);\n    context.setStrokeStyle(radarOption.gridColor || \"#cccccc\");\n    coordinateAngle.forEach(function (angle, index) {\n      var pos = convertCoordinateOrigin(radius / config.radarGridCount * i * Math.cos(angle), radius / config.radarGridCount * i * Math.sin(angle), centerPosition);\n      if (index === 0) {\n        startPos = pos;\n        context.moveTo(pos.x, pos.y);\n      } else {\n        context.lineTo(pos.x, pos.y);\n      }\n    });\n    context.lineTo(startPos.x, startPos.y);\n    context.stroke();\n    context.closePath();\n  };\n  for (var i = 1; i <= config.radarGridCount; i++) {\n    _loop(i);\n  }\n  var radarDataPoints = getRadarDataPoints(coordinateAngle, centerPosition, radius, series, opts, process);\n  radarDataPoints.forEach(function (eachSeries, seriesIndex) {\n    // 绘制区域数据\n    context.beginPath();\n    context.setFillStyle(eachSeries.color);\n    context.setGlobalAlpha(0.3);\n    eachSeries.data.forEach(function (item, index) {\n      if (index === 0) {\n        context.moveTo(item.position.x, item.position.y);\n      } else {\n        context.lineTo(item.position.x, item.position.y);\n      }\n    });\n    context.closePath();\n    context.fill();\n    context.setGlobalAlpha(1);\n    if (opts.dataPointShape !== false) {\n      var shape = config.dataPointShape[seriesIndex % config.dataPointShape.length];\n      var points = eachSeries.data.map(function (item) {\n        return item.position;\n      });\n      drawPointShape(points, eachSeries.color, shape, context, opts);\n    }\n  });\n  // draw label text\n  drawRadarLabel(coordinateAngle, radius, centerPosition, opts, config, context);\n  return {\n    center: centerPosition,\n    radius: radius,\n    angleList: coordinateAngle\n  };\n}\nfunction drawCanvas(opts, context) {\n  context.draw();\n}\nvar Timing = {\n  easeIn: function easeIn(pos) {\n    return Math.pow(pos, 3);\n  },\n  easeOut: function easeOut(pos) {\n    return Math.pow(pos - 1, 3) + 1;\n  },\n  easeInOut: function easeInOut(pos) {\n    if ((pos /= 0.5) < 1) {\n      return 0.5 * Math.pow(pos, 3);\n    } else {\n      return 0.5 * (Math.pow(pos - 2, 3) + 2);\n    }\n  },\n  linear: function linear(pos) {\n    return pos;\n  }\n};\nfunction Animation(opts) {\n  this.isStop = false;\n  opts.duration = typeof opts.duration === 'undefined' ? 1000 : opts.duration;\n  opts.timing = opts.timing || 'linear';\n  var delay = 17;\n  var createAnimationFrame = function createAnimationFrame() {\n    if (typeof requestAnimationFrame !== 'undefined') {\n      return requestAnimationFrame;\n    } else if (typeof setTimeout !== 'undefined') {\n      return function (step, delay) {\n        setTimeout(function () {\n          var timeStamp = +new Date();\n          step(timeStamp);\n        }, delay);\n      };\n    } else {\n      return function (step) {\n        step(null);\n      };\n    }\n  };\n  var animationFrame = createAnimationFrame();\n  var startTimeStamp = null;\n  var _step = function step(timestamp) {\n    if (timestamp === null || this.isStop === true) {\n      opts.onProcess && opts.onProcess(1);\n      opts.onAnimationFinish && opts.onAnimationFinish();\n      return;\n    }\n    if (startTimeStamp === null) {\n      startTimeStamp = timestamp;\n    }\n    if (timestamp - startTimeStamp < opts.duration) {\n      var process = (timestamp - startTimeStamp) / opts.duration;\n      var timingFunction = Timing[opts.timing];\n      process = timingFunction(process);\n      opts.onProcess && opts.onProcess(process);\n      animationFrame(_step, delay);\n    } else {\n      opts.onProcess && opts.onProcess(1);\n      opts.onAnimationFinish && opts.onAnimationFinish();\n    }\n  };\n  _step = _step.bind(this);\n  animationFrame(_step, delay);\n}\n\n// stop animation immediately\n// and tigger onAnimationFinish\nAnimation.prototype.stop = function () {\n  this.isStop = true;\n};\nfunction drawCharts(type, opts, config, context) {\n  var _this = this;\n  var series = opts.series;\n  var categories = opts.categories;\n  series = fillSeriesColor(series, config);\n  var _calLegendData = calLegendData(series, opts, config),\n    legendHeight = _calLegendData.legendHeight;\n  config.legendHeight = legendHeight;\n  var _calYAxisData = calYAxisData(series, opts, config),\n    yAxisWidth = _calYAxisData.yAxisWidth;\n  config.yAxisWidth = yAxisWidth;\n  if (categories && categories.length) {\n    var _calCategoriesData = calCategoriesData(categories, opts, config),\n      xAxisHeight = _calCategoriesData.xAxisHeight,\n      angle = _calCategoriesData.angle;\n    config.xAxisHeight = xAxisHeight;\n    config._xAxisTextAngle_ = angle;\n  }\n  if (type === 'pie' || type === 'ring') {\n    config._pieTextMaxLength_ = opts.dataLabel === false ? 0 : getPieTextMaxLength(series);\n  }\n  var duration = opts.animation ? 1000 : 0;\n  this.animationInstance && this.animationInstance.stop();\n  switch (type) {\n    case 'line':\n      this.animationInstance = new Animation({\n        timing: 'easeIn',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          if (opts.rotate) {\n            context.translate(opts.height, 0);\n            context.rotate(90 * Math.PI / 180);\n          }\n          drawYAxisGrid(opts, config, context);\n          var _drawLineDataPoints = drawLineDataPoints(series, opts, config, context, process),\n            xAxisPoints = _drawLineDataPoints.xAxisPoints,\n            calPoints = _drawLineDataPoints.calPoints,\n            eachSpacing = _drawLineDataPoints.eachSpacing;\n          _this.chartData.xAxisPoints = xAxisPoints;\n          _this.chartData.calPoints = calPoints;\n          _this.chartData.eachSpacing = eachSpacing;\n          drawXAxis(categories, opts, config, context);\n          drawLegend(opts.series, opts, config, context);\n          drawYAxis(series, opts, config, context);\n          drawToolTipBridge(opts, config, context, process);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        }\n      });\n      break;\n    case 'column':\n      this.animationInstance = new Animation({\n        timing: 'easeIn',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          if (opts.rotate) {\n            context.translate(opts.height, 0);\n            context.rotate(90 * Math.PI / 180);\n          }\n          drawYAxisGrid(opts, config, context);\n          var _drawColumnDataPoints = drawColumnDataPoints(series, opts, config, context, process),\n            xAxisPoints = _drawColumnDataPoints.xAxisPoints,\n            eachSpacing = _drawColumnDataPoints.eachSpacing;\n          _this.chartData.xAxisPoints = xAxisPoints;\n          _this.chartData.eachSpacing = eachSpacing;\n          drawXAxis(categories, opts, config, context);\n          drawLegend(opts.series, opts, config, context);\n          drawYAxis(series, opts, config, context);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        }\n      });\n      break;\n    case 'area':\n      this.animationInstance = new Animation({\n        timing: 'easeIn',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          if (opts.rotate) {\n            context.translate(opts.height, 0);\n            context.rotate(90 * Math.PI / 180);\n          }\n          drawYAxisGrid(opts, config, context);\n          var _drawAreaDataPoints = drawAreaDataPoints(series, opts, config, context, process),\n            xAxisPoints = _drawAreaDataPoints.xAxisPoints,\n            calPoints = _drawAreaDataPoints.calPoints,\n            eachSpacing = _drawAreaDataPoints.eachSpacing;\n          _this.chartData.xAxisPoints = xAxisPoints;\n          _this.chartData.calPoints = calPoints;\n          _this.chartData.eachSpacing = eachSpacing;\n          drawXAxis(categories, opts, config, context);\n          drawLegend(opts.series, opts, config, context);\n          drawYAxis(series, opts, config, context);\n          drawToolTipBridge(opts, config, context, process);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        }\n      });\n      break;\n    case 'ring':\n    case 'pie':\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          if (opts.rotate) {\n            context.translate(opts.height, 0);\n            context.rotate(90 * Math.PI / 180);\n          }\n          _this.chartData.pieData = drawPieDataPoints(series, opts, config, context, process);\n          drawLegend(opts.series, opts, config, context);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        }\n      });\n      break;\n    case 'radar':\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          if (opts.rotate) {\n            context.translate(opts.height, 0);\n            context.rotate(90 * Math.PI / 180);\n          }\n          _this.chartData.radarData = drawRadarDataPoints(series, opts, config, context, process);\n          drawLegend(opts.series, opts, config, context);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        }\n      });\n      break;\n    case 'gauge':\n      this.animationInstance = new Animation({\n        timing: 'easeInOut',\n        duration: duration,\n        onProcess: function onProcess(process) {\n          if (opts.rotate) {\n            context.translate(opts.height, 0);\n            context.rotate(90 * Math.PI / 180);\n          }\n          _this.chartData.pieData = drawGaugeDataPoints(series, opts, config, context, process);\n          drawCanvas(opts, context);\n        },\n        onAnimationFinish: function onAnimationFinish() {\n          _this.event.trigger('renderComplete');\n        }\n      });\n      break;\n  }\n}\n\n// simple event implement\n\nfunction Event() {\n  this.events = {};\n}\nEvent.prototype.addEventListener = function (type, listener) {\n  this.events[type] = this.events[type] || [];\n  this.events[type].push(listener);\n};\nEvent.prototype.trigger = function () {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  var type = args[0];\n  var params = args.slice(1);\n  if (!!this.events[type]) {\n    this.events[type].forEach(function (listener) {\n      try {\n        listener.apply(null, params);\n      } catch (e) {\n        __f__(\"error\", e, \" at static/wxcharts.js:2105\");\n      }\n    });\n  }\n};\nvar Charts = function Charts(opts) {\n  opts.fontSize = opts.fontSize ? opts.fontSize * opts.pixelRatio : 13 * opts.pixelRatio;\n  opts.title = opts.title || {};\n  opts.subtitle = opts.subtitle || {};\n  opts.yAxis = opts.yAxis || {};\n  opts.xAxis = opts.xAxis || {};\n  opts.xAxis.itemCount = opts.xAxis.itemCount ? opts.xAxis.itemCount : 5;\n  opts.extra = opts.extra || {};\n  opts.legend = opts.legend === false ? false : true;\n  opts.rotate = opts.rotate ? true : false;\n  opts.animation = opts.animation === false ? false : true;\n  var config$$1 = assign({}, config);\n  config$$1.yAxisTitleWidth = opts.yAxis.disabled !== true && opts.yAxis.title ? config$$1.yAxisTitleWidth : 0;\n  config$$1.pieChartLinePadding = opts.dataLabel === false ? 0 : config$$1.pieChartLinePadding * opts.pixelRatio;\n  config$$1.pieChartTextPadding = opts.dataLabel === false ? 0 : config$$1.pieChartTextPadding * opts.pixelRatio;\n\n  //屏幕旋转\n  config$$1.rotate = opts.rotate;\n  if (opts.rotate) {\n    var tempWidth = opts.width;\n    var tempHeight = opts.height;\n    opts.width = tempHeight;\n    opts.height = tempWidth;\n  }\n\n  //适配H5高分屏\n  config$$1.yAxisWidth = config.yAxisWidth * opts.pixelRatio;\n  config$$1.xAxisHeight = config.xAxisHeight * opts.pixelRatio;\n  if (opts.enableScroll) {\n    config$$1.xAxisHeight += 4 * opts.pixelRatio;\n  }\n  config$$1.xAxisLineHeight = config.xAxisLineHeight * opts.pixelRatio;\n  config$$1.legendHeight = config.legendHeight * opts.pixelRatio;\n  //config$$1.yAxisTitleWidth=config.yAxisTitleWidth*opts.pixelRatio;\n  config$$1.padding = config.padding * opts.pixelRatio;\n  config$$1.fontSize = opts.fontSize;\n  config$$1.titleFontSize = config.titleFontSize * opts.pixelRatio;\n  config$$1.subtitleFontSize = config.subtitleFontSize * opts.pixelRatio;\n  //config$$1.toolTipPadding=config.toolTipPadding*opts.pixelRatio;\n  config$$1.toolTipLineHeight = config.toolTipLineHeight * opts.pixelRatio;\n  config$$1.columePadding = config.columePadding * opts.pixelRatio;\n  //config$$1.xAxisTextPadding=config.xAxisTextPadding*opts.pixelRatio;\n\n  //向配置中传入当前pixelRatio及字体大小\n  config.pixelRatio = opts.pixelRatio;\n  config.fontSize = opts.fontSize;\n  config.rotate = opts.rotate;\n  this.opts = opts;\n  this.config = config$$1;\n  this.context = uni.createCanvasContext(opts.canvasId);\n  // store calcuated chart data\n  // such as chart point coordinate\n  this.chartData = {};\n  this.event = new Event();\n  this.scrollOption = {\n    currentOffset: 0,\n    startTouchX: 0,\n    distance: 0\n  };\n  drawCharts.call(this, opts.type, opts, config$$1, this.context);\n};\nCharts.prototype.updateData = function () {\n  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  this.opts.series = data.series || this.opts.series;\n  this.opts.categories = data.categories || this.opts.categories;\n  this.opts.title = assign({}, this.opts.title, data.title || {});\n  this.opts.subtitle = assign({}, this.opts.subtitle, data.subtitle || {});\n  drawCharts.call(this, this.opts.type, this.opts, this.config, this.context);\n};\nCharts.prototype.stopAnimation = function () {\n  this.animationInstance && this.animationInstance.stop();\n};\nCharts.prototype.addEventListener = function (type, listener) {\n  this.event.addEventListener(type, listener);\n};\nCharts.prototype.getCurrentDataIndex = function (e) {\n  var touches = e.mp.changedTouches[0];\n  if (touches) {\n    var _touches$ = touches,\n      x,\n      y;\n    //适配H5高分屏\n    if (_touches$.clientX) {\n      if (this.opts.rotate) {\n        //适配横屏\n        y = _touches$.clientX * this.opts.pixelRatio;\n        x = (_touches$.pageY - e.mp.currentTarget.offsetTop - this.opts.height / this.opts.pixelRatio / 2 * (this.opts.pixelRatio - 1)) * this.opts.pixelRatio;\n      } else {\n        x = _touches$.clientX * this.opts.pixelRatio;\n        y = (_touches$.pageY - e.mp.currentTarget.offsetTop - this.opts.height / this.opts.pixelRatio / 2 * (this.opts.pixelRatio - 1)) * this.opts.pixelRatio;\n      }\n    } else {\n      if (this.opts.rotate) {\n        //适配横屏\n        y = _touches$.x * this.opts.pixelRatio;\n        x = _touches$.y * this.opts.pixelRatio;\n      } else {\n        x = _touches$.x * this.opts.pixelRatio;\n        y = _touches$.y * this.opts.pixelRatio;\n      }\n    }\n    if (this.opts.type === 'pie' || this.opts.type === 'ring' || this.opts.type === 'gauge') {\n      return findPieChartCurrentIndex({\n        x: x,\n        y: y\n      }, this.chartData.pieData);\n    } else if (this.opts.type === 'radar') {\n      return findRadarChartCurrentIndex({\n        x: x,\n        y: y\n      }, this.chartData.radarData, this.opts.categories.length);\n    } else {\n      return findCurrentIndex({\n        x: x,\n        y: y\n      }, this.chartData.xAxisPoints, this.opts, this.config, Math.abs(this.scrollOption.currentOffset));\n    }\n  }\n  return -1;\n};\nCharts.prototype.showToolTip = function (e) {\n  var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (this.opts.type === 'line' || this.opts.type === 'area') {\n    var index = this.getCurrentDataIndex(e);\n    var currentOffset = this.scrollOption.currentOffset;\n    var opts = assign({}, this.opts, {\n      _scrollDistance_: currentOffset,\n      animation: false\n    });\n    if (index > -1) {\n      var seriesData = getSeriesDataItem(this.opts.series, index);\n      if (seriesData.length !== 0) {\n        var _getToolTipData = getToolTipData(seriesData, this.chartData.calPoints, index, this.opts.categories, option),\n          textList = _getToolTipData.textList,\n          offset = _getToolTipData.offset;\n        opts.tooltip = {\n          textList: textList,\n          offset: offset,\n          option: option\n        };\n      }\n    }\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n  }\n};\nCharts.prototype.scrollStart = function (e) {\n  var touches = e.mp.changedTouches[0];\n  if (touches && this.opts.enableScroll === true) {\n    if (touches.x) {\n      this.scrollOption.startTouchX = touches.x;\n    } else {\n      this.scrollOption.startTouchX = touches.clientX;\n    }\n  }\n};\nCharts.prototype.scroll = function (e) {\n  // TODO throtting...\n  var touches = e.mp.changedTouches[0];\n  if (touches && this.opts.enableScroll === true) {\n    var _distance;\n    if (touches.x) {\n      _distance = touches.x - this.scrollOption.startTouchX;\n    } else {\n      _distance = touches.clientX - this.scrollOption.startTouchX;\n    }\n    var currentOffset = this.scrollOption.currentOffset;\n    var validDistance = calValidDistance(currentOffset + _distance, this.chartData, this.config, this.opts);\n    this.scrollOption.distance = _distance = validDistance - currentOffset;\n    var opts = assign({}, this.opts, {\n      _scrollDistance_: currentOffset + _distance,\n      animation: false\n    });\n    drawCharts.call(this, opts.type, opts, this.config, this.context);\n  }\n};\nCharts.prototype.scrollEnd = function (e) {\n  if (this.opts.enableScroll === true) {\n    var _scrollOption = this.scrollOption,\n      currentOffset = _scrollOption.currentOffset,\n      distance = _scrollOption.distance;\n    this.scrollOption.currentOffset = currentOffset + distance;\n    this.scrollOption.distance = 0;\n  }\n};\nmodule.exports = Charts;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///29\n");

/***/ }),
/* 30 */
/*!************************************************!*\
  !*** C:/Users/W/Desktop/remotecontrol/App.vue ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./App.vue?vue&type=script&lang=js& */ 31);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__) if([\"default\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n/* harmony import */ var _E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js */ 13);\nvar render, staticRenderFns, recyclableRender, components\nvar renderjs\n\n\n\n\n/* normalize component */\n\nvar component = Object(_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\n  _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null,\n  false,\n  components,\n  renderjs\n)\n\ncomponent.options.__file = \"App.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUN1RDtBQUNMOzs7QUFHbEQ7QUFDK0s7QUFDL0ssZ0JBQWdCLHdMQUFVO0FBQzFCLEVBQUUseUVBQU07QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNlLGdGIiwiZmlsZSI6IjMwLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHJlbmRlciwgc3RhdGljUmVuZGVyRm5zLCByZWN5Y2xhYmxlUmVuZGVyLCBjb21wb25lbnRzXG52YXIgcmVuZGVyanNcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhRTpcXFxcc29mdHdhcmVcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcQGRjbG91ZGlvXFxcXHZ1ZS1jbGktcGx1Z2luLXVuaVxcXFxwYWNrYWdlc1xcXFx2dWUtbG9hZGVyXFxcXGxpYlxcXFxydW50aW1lXFxcXGNvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsLFxuICBmYWxzZSxcbiAgY29tcG9uZW50cyxcbiAgcmVuZGVyanNcbilcblxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJBcHAudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///30\n");

/***/ }),
/* 31 */
/*!*************************************************************************!*\
  !*** C:/Users/W/Desktop/remotecontrol/App.vue?vue&type=script&lang=js& ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _E_software_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!./node_modules/babel-loader/lib!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--6-1!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/using-components.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!./App.vue?vue&type=script&lang=js& */ 32);\n/* harmony import */ var _E_software_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_E_software_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _E_software_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__) if([\"default\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _E_software_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_E_software_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_E_software_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQXNrQixDQUFnQixxbUJBQUcsRUFBQyIsImZpbGUiOiIzMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb2QgZnJvbSBcIi0hRTpcXFxcc29mdHdhcmVcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcYmFiZWwtbG9hZGVyXFxcXGxpYlxcXFxpbmRleC5qcyFFOlxcXFxzb2Z0d2FyZVxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHdlYnBhY2stcHJlcHJvY2Vzcy1sb2FkZXJcXFxcaW5kZXguanM/P3JlZi0tNi0xIUU6XFxcXHNvZnR3YXJlXFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcd2VicGFjay11bmktYXBwLWxvYWRlclxcXFx1c2luZy1jb21wb25lbnRzLmpzIUU6XFxcXHNvZnR3YXJlXFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcdnVlLWxvYWRlclxcXFxsaWJcXFxcaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hRTpcXFxcc29mdHdhcmVcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcYmFiZWwtbG9hZGVyXFxcXGxpYlxcXFxpbmRleC5qcyFFOlxcXFxzb2Z0d2FyZVxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHdlYnBhY2stcHJlcHJvY2Vzcy1sb2FkZXJcXFxcaW5kZXguanM/P3JlZi0tNi0xIUU6XFxcXHNvZnR3YXJlXFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcd2VicGFjay11bmktYXBwLWxvYWRlclxcXFx1c2luZy1jb21wb25lbnRzLmpzIUU6XFxcXHNvZnR3YXJlXFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcdnVlLWxvYWRlclxcXFxsaWJcXFxcaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///31\n");

/***/ }),
/* 32 */
/*!******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--6-1!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/using-components.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!C:/Users/W/Desktop/remotecontrol/App.vue?vue&type=script&lang=js& ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _default = {\n  onLaunch: function onLaunch() {\n    __f__(\"log\", 'App Launch', \" at App.vue:4\");\n  },\n  onShow: function onShow() {\n    __f__(\"log\", 'App Show', \" at App.vue:7\");\n  },\n  onHide: function onHide() {\n    __f__(\"log\", 'App Hide', \" at App.vue:10\");\n  }\n};\nexports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vQXBwLnZ1ZSJdLCJuYW1lcyI6WyJvbkxhdW5jaCIsIm9uU2hvdyIsIm9uSGlkZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O2VBQ2U7RUFDZEEsUUFBUSxFQUFFLG9CQUFXO0lBQ3BCLGFBQVksWUFBWTtFQUN6QixDQUFDO0VBQ0RDLE1BQU0sRUFBRSxrQkFBVztJQUNsQixhQUFZLFVBQVU7RUFDdkIsQ0FBQztFQUNEQyxNQUFNLEVBQUUsa0JBQVc7SUFDbEIsYUFBWSxVQUFVO0VBQ3ZCO0FBQ0QsQ0FBQztBQUFBLDJCIiwiZmlsZSI6IjMyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5leHBvcnQgZGVmYXVsdCB7XG5cdG9uTGF1bmNoOiBmdW5jdGlvbigpIHtcblx0XHRjb25zb2xlLmxvZygnQXBwIExhdW5jaCcpXG5cdH0sXG5cdG9uU2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0Y29uc29sZS5sb2coJ0FwcCBTaG93Jylcblx0fSxcblx0b25IaWRlOiBmdW5jdGlvbigpIHtcblx0XHRjb25zb2xlLmxvZygnQXBwIEhpZGUnKVxuXHR9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///32\n");

/***/ })
],[[0,"app-config"]]]);